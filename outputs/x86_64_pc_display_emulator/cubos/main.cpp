/*
    ############################################################################################
    #                                                                                          #
    #                                    DEFAULT SETTINGS +                                    #
    #                                                                                          #
    ############################################################################################
*/

// TOUCH
#define TOUCH_SCREEN_DELTA_MOVE_FOR_DRAG 7
#define TOUCH_SCREEN_DELTA_MOVE_FOR_SWIPE 10
#define TOUCH_SCREEN_TIME_MS_FOR_LONG_TOUCH 300


// BUTTONS
#define BUTTON_UP       0x01
#define BUTTON_SELECT   0x02
#define BUTTON_DOWN     0x03
#define BUTTON_BACK     0x04
#define BUTTON_POWER    0x05

#define DRIVER_CONTROLS_TOTALBUTTONS 0
#define DRIVER_CONTROLS_DELAY_BEFORE_LONG_PRESS     50
#define DRIVER_CONTROLS_DELAY_BEFORE_MULTY_PRESS    400

/*
############################################################################
#                                SYNC STATUS                               #
############################################################################
*/

#define SYNC_STATUS_NOT_STARTED                     0x01
#define SYNC_STATUS_CONNECTING                      0x02
#define SYNC_STATUS_IN_PROGRESS                     0x03
#define SYNC_STATUS_FINISHED                        0x04
#define SYNC_STATUS_ERROR_SERVER_NOT_FOUND          0x05
#define SYNC_STATUS_ERROR_DIFFERENT_API_VERSIONS    0x06
#define SYNC_STATUS_ERROR_EXCHANGE_FAILED           0x07
#define SYNC_STATUS_ERROR_UNKNOWN                   0x08

/*
############################################################################
#                               SYNC VARIANTS                              #
############################################################################
*/

#define SYNC_VARIANTS_GET_API_VERSION                           0b0000000000000001
#define SYNC_VARIANTS_GET_SETTINGS                              0b0000000000000010
#define SYNC_VARIANTS_GET_CURRENT_TIME                          0b0000000000000100
#define SYNC_VARIANTS_GET_PEDOMETER_DAY_STEPS_SLEEP_LIMITS      0b0000000000001000
#define SYNC_VARIANTS_SET_PEDOMETER_CURRENT_DAY_STEPS_SLEEP     0b0000000000010000
#define SYNC_VARIANTS_SET_PEDOMETER_DAY_DATA_PER_HOUR           0b0000000000100000
#define SYNC_VARIANTS_SET_PEDOMETER_WEEK_DATA_PER_DAY           0b0000000001000000
#define SYNC_VARIANTS_GET_NOTIFICATIONS                         0b0000000010000000
#define SYNC_VARIANTS_GET_CURRENT_CALL                          0b0000000100000000
#define SYNC_VARIANTS_GET_MISSED_CALLS                          0b0000001000000000
#define SYNC_VARIANTS_GET_DATA_HASH                             0b0000010000000000

/*
############################################################################
#                                 EVENTS +                                 #
############################################################################
*/

#define EVENT_BUTTON_PRESSED                0x00
#define EVENT_BUTTON_RELEASED               0x01
#define EVENT_BUTTON_LONG_PRESS             0x02
#define EVENT_BUTTON_SHORT_PRESS            0x03
#define EVENT_BUTTON_SHORT_SINGLE_PRESS     0x04
#define EVENT_BUTTON_DOUBLE_PRESS           0x05
#define EVENT_ON_GOING_TO_SLEEP             0x07
#define EVENT_ON_WAKE_UP                    0x08

#define EVENT_ON_TOUCH_START                0x09
#define EVENT_ON_TOUCH_RELEASED             0x0A
#define EVENT_ON_TOUCH_CLICK                0x0B
#define EVENT_ON_TOUCH_LONG_PRESS           0x0C
#define EVENT_ON_TOUCH_DRAG                 0x0D
#define EVENT_ON_TOUCH_DOUBLE_PRESS         0x0E
/*
#define EVENT_ON_TOUCH_SWIPE_FROM_LEFT      0x0F
#define EVENT_ON_TOUCH_SWIPE_FROM_RIGHT     0x10
#define EVENT_ON_TOUCH_SWIPE_FROM_TOP       0x11
#define EVENT_ON_TOUCH_SWIPE_FROM_BOTTOM    0x12
*/

#define EVENT_ON_TIME_CHANGED               0x06
#define EVENT_ON_MINUTE_CHANGED             0x13
#define EVENT_ON_HOUR_CHANGED               0x14
#define EVENT_ON_DATE_CHANGED               0x15

#define EVENT_ON_BATTERY_VALUE_CHANGE       0x1A
#define EVENT_ON_BATTERY_CHARGING_CHANGE    0x1B

#define EVENT_ON_TOUCH_QUICK_SWIPE_TO_LEFT      0x16
#define EVENT_ON_TOUCH_QUICK_SWIPE_TO_RIGHT     0x17
#define EVENT_ON_TOUCH_QUICK_SWIPE_TO_TOP       0x18
#define EVENT_ON_TOUCH_QUICK_SWIPE_TO_BOTTOM      0x19

// WAKEUP REASONS
#define WAKE_UP_REASON_EXTERNAL_RTC_IO      0x01
#define WAKE_UP_REASON_EXTERNAL_RTC_CNTL    0x02
#define WAKE_UP_REASON_TIMER                0x03
#define WAKE_UP_REASON_TPOUCHPAD            0x04
#define WAKE_UP_REASON_ULP                  0x05
#define WAKE_UP_REASON_NOT_DEEP_SLEEP       0x06

// SOFTWARE_BUTTONS
#define SOFTWARE_BAR_BUTTON_UP              0x0001
#define SOFTWARE_BAR_BUTTON_SELECT          0x0002
#define SOFTWARE_BAR_BUTTON_DOWN            0x0003
#define SOFTWARE_BAR_BUTTON_BACK            0x0004

/*
 ############################################################################
                                 SLEEP TYPES -                               
*/

#define SLEEP_IDLE_CPU                      0x01
#define SLEEP_DEEP                          0x02
#define SLEEP_LIGHT                         0x03
#define SLEEP_MODEM                         0x04
#define SLEEP_DISPLAY                       0x05
#define SLEEP_HIBERNATE                     0x06
#define WAKE_MODEM                          0x07
#define WAKE_DISPLAY                        0x08
#define WAKE                                0x09
#define SLEEP_LIGHT_SCREEN_OFF              0x0A
#define SLEEP_LIGHT_ACCELEROMETER_SLEEP     0x0B


#define IN_APP_SLEEP_TYPE       SLEEP_LIGHT
#define STAND_BY_SLEEP_TYPE     SLEEP_DEEP
/*
############################################################################
#                                 EVENTS -                                 #
############################################################################
*/

/*
############################################################################
#                                 STYLES +                                 #
############################################################################
*/

#define SOFTWARE_BUTTONS_COLOR_RED          255
#define SOFTWARE_BUTTONS_COLOR_GREEN        255
#define SOFTWARE_BUTTONS_COLOR_BLUE         255

#define SOFTWARE_BUTTONS_COLOR_RED_BG       59
#define SOFTWARE_BUTTONS_COLOR_GREEN_BG     35
#define SOFTWARE_BUTTONS_COLOR_BLUE_BG      71

/*
############################################################################
#                                 STYLES -                                 #
############################################################################
*/

#define ON_TIME_CHANGE_EVERY_MS 1000

#define UPDATE_RTC_EVERY 65
#define I2C_ENABLE
#define CPU_CONTROLL_ENABLE
#define POWERSAVE_ENABLE

#define FONT_SIZE_DEFAULT 1
#define HARDWARE_BUTTONS_VALUE 3

#define CONTROLS_DELAY_TO_DOUBLE_CLICK_MS DRIVER_CONTROLS_DELAY_BEFORE_LONG_PRESS

#define SMOOTH_ANIMATION_COEFFICIENT    5
// #define SMOOTH_ANIMATION
// #define NARROW_SCREEN

#define UPDATE_BATTERY_EVERY_MS 3000
#define SMOOTH_BACKLIGHT_CONTROL_DELAY_CHANGE  4
#define BATTERY_ENABLE

// #define ACCELEROMETER_ENABLE
#define DISPLAY_BACKLIGHT_CONTROL_ENABLE
#define DISPLAY_BACKLIGHT_FADE_CONTROL_ENABLE
#define DEFAULT_FADE_BRIGHTNES 50
#define DEFAULT_SCREEN_BRIGHTNESS 100

#define WAKEUP_FROM_LIGHT_SLEEP_EVERY_MS 1000
#define WAKEUP_FROM_DEEP_SLEEP_EVERY_SECONDS 60*60*24 // Wake up if no any other background works as pedometer

#define USE_TYPE2_OF_IMAGES
//#define PEDOMETER_ENABLE

//#define PEDOMETER_STEP_DETECTION_DELAY                30000

#define PEDOMETER_DO_NOT_USE_PEDOMETER_WHILE_CONNECTED_TO_USB

//#define PEDOMETER_STEP_DETECTION_DELAY                  1000
#define PEDOMETER_STEP_DETECTION_PERIOD_MS              1000
#define PEDOMETER_MESURES_IN_STEP_DETECTION_PERIOD      5
#define PEDOMETER_ENABLE_ON_START                       true
#define PEDOMETER_DAY_VALUE_TYPE                        uint16_t
#define PEDOMETER_DAYS_HISTORY                          7
#define PEDOMETER_DAY_STEP_LIMMIT_DEFAULT               10000
#define PEDOMETER_DAY_SLEEP_LIMMIT_DEFAULT              7*60 //minutes

#define WAKEUP_FOR_BACKGROUND_WORK_IDLE 1000
#define RUN_BACKGROUND_AFTER_RESTART_MCU // As deep sleep in esp

//#define DEBUG_PEDOMETER // Just for teste

#define FORCE_DISPLAY_UPDATE_ON_START // Will quick update screen on start and wakeup. Comment on unknown error.
#define DEFAULT_TIME_TO_POWEROFF_DISPLAY 7
#define DEFAULT_DELAY_TO_FADE_DISPLAY 7

//#define DEBUG_SERIAL

#define SOFTWARE_BUTTONS_BAR_SIZE 0
//#define LEGACY_GET_ICONS

#define DEBUG_SERIAL_PORT Serial

#define PEDOMETER_STEP_DETECTION_DELAY_SEC_MIN          10
#define PEDOMETER_STEP_DETECTION_DELAY_SEC_STEP         10
#define PEDOMETER_STEP_DETECTION_DELAY_SEC_MAX          60 // MAX (255 - PEDOMETER_STEP_DETECTION_PERIOD_MS/1000) and multiple 60 seconds

#define CORE_PEDOMETER_SLEEP_COUNTING_SPOINTS   1 // mesures for sleep detection 
#define COREPEDOMETER_DELTA_SLEEP_VALUE_MIN_100     3 // acceletometer sensitivity/100*G for sleep detection
#define COREPEDOMETER_CENTRALWIGHT_SLEEP_VALUE_MIN      0.05f

#define APP_CLOCK_POWER_AFTER_SECONDS_DEFAULT           4

#define PEDOMETER_DO_NOT_USER_PEDOMETER_WHILE_CONNECTED_TO_USB
//#define USE_NUMBERS_MAIN_MENU_IN_ACTIVE_PAGES

/*
    ############################################################################################
    #                                                                                          #
    #                                    DEFAULT SETTINGS +                                    #
    #                                                                                          #
    ############################################################################################
*/




/*
    ############################################################################################
    #                                                                                          #
    #                                    x86_64 SETTINGS +                                     #
    #                                                                                          #
    ############################################################################################
*/

//SOFTWARE_BUTTONS_ENABLE SOFTWARE_KEYBOARD_ENABLE
//#define DEBUG_SERIAL
//#define DEBUG_ON_SCREEN
#define TERMINAL_DEBUG

#undef DEBUG_SERIAL_PORT Serial

#define SCREEN_WIDTH            240     // Screen resolution width
#define SCREEN_HEIGHT           240     // Screen resolution height

#define FONT_CHAR_WIDTH         6     // Font letter size width
#define FONT_CHAR_HEIGHT        8     // Font letter size height

//#define device_has_battery

#define PLATFORM_PC_EMULATOR
#define BLUETOOTH_ENABLE
#define WIFI_ENABLE

#define PEDOMETER_DAY_STEP_LIMMIT_DEFAULT               10000

#define SMOOTH_ANIMATION
//#define NARROW_SCREEN
#define WATCH_SCREEN

#define ON_TIME_CHANGE_EVERY_MS 1000

#define HARDWARE_BUTTONS_ENABLED        // Conf of controls with hardware btns    
#define TOUCH_SCREEN_ENABLE

#define TOUCH_SCREEN_DELTA_MOVE_FOR_DRAG 7
#define TOUCH_SCREEN_TIME_MS_FOR_LONG_TOUCH 300

#define COLOR_SCREEN                     // Screen is colored
//#define NO_ANIMATION                   // Caurse of framebuffer type

//#define toDefaultApp_onLeftLongPress

#define STARTING_APP_NUMM   -1    // for Mainmenu (default app)
//#define STARTING_APP_NUMM   1

#undef CPU_SLEEP_ENABLE
#undef POWERSAVE_ENABLE
//#define CPU_SLEEP_TIME_DELAY 25000

#define BUTTON_UP       0
#define BUTTON_SELECT   1
#define BUTTON_DOWN     2
#define BUTTON_BACK     3

#define DRIVER_CONTROLS_TOTALBUTTONS 1

#define BATTERY_ENABLE
#define CLOCK_ENABLE
//#define USE_PRIMITIVE_HARDWARE_DRAW_ACCELERATION

#define RTC_ENABLE
#define SCREEN_ROTATION_0
//#define SCREEN_ROTATION_90
//#define SCREEN_ROTATION_180
//#define SCREEN_ROTATION_270

//#define PEDOMETER_ENABLE
//#define ACCELEROMETER_ENABLE
#define STYLE_STATUSBAR_HEIGHT  20

#undef I2C_ENABLE
#undef CPU_CONTROLL_ENABLE

#define PEDOMETER_EMULATOR
#define FONT_SIZE_DEFAULT   2

/*
#define SOFTWARE_BUTTONS_ENABLE
#define SOFTWARE_BUTTONS_PORITION_RIGHT

#define SOFTWARE_BUTTONS_BAR_SIZE 30
#define SOFTWARE_BUTTONS_PADDING 50
*/

//#undef NARROW_SCREEN 
//#undef USE_NUMBERS_MAIN_MENU_IN_ACTIVE_PAGES

#define SOFTWARE_KEYBOARD_ENABLE
#define PEDOMETER_ENABLE_ON_START true
#define USE_XL_MENU_IMAGES
//#define FRAMEBUFFER_ENABLE
//#define FRAMEBUFFER_TWIN_FULL
//#define FRAMEBUFFER_BYTE_PER_PIXEL 2
//#define FRAMEBUFFER_PSRAM

//#define NARROW_SCREEN
//#define DEBUG_CORE_DISPLAY
//#define CORE_TOUCH_DEBUG
//#define APP_SETTINGS_DEBUG
//#define PEDOMETER_EMULATOR
//#define DEBUG_FPS
//#define DEBUG_WAKEUP
//#define DEBUG_PEDOMETER
//#define DEBUG_ACELEROMETER
//#define DEBUG_BACKLIGHT
//#define DEBUG_DRIVER_CONTROLL
//#define DEBUG_DRIVER_BATTERY
/*
    ############################################################################################
    #                                                                                          #
    #                                    x86_64 SETTINGS -                                     #
    #                                                                                          #
    ############################################################################################
*/

//#define unsigned char unsigned char
//#define bool bool
#define PROGMEM /**/
#define pgm_read_byte *
#define pgm_read_word *
#define RTC_DATA_ATTR /**/

#define max MAX
#define min MIN

#define PLATFORM_x86_64

#include <stdio.h>
#include <stdint.h>
#include "WString.h"
#include "stdlib_noniso.h"

#include "core_esp8266_noniso.cpp"
#include "stdlib_noniso.cpp"
#include "noniso.c"
#include "WString.cpp"
#include <ctime>
#include <chrono>

#if defined(_WIN32) || defined(_WIN64)
    #include <dos.h>
#endif

#include <unistd.h>

unsigned long millis(){
    return clock()/100;
}

int max(int a, int b){
    return ((a>b)?a:b);
}

int min(int a, int b){
    return ((a<b)?a:b);
}

unsigned char max(unsigned char a, unsigned char b){
    return ((a>b)?a:b);
}

unsigned char min(unsigned char a, unsigned char b){
    return ((a<b)?a:b);
}


void delay(int x){
    //sleep(x/1000);
    #if defined(_WIN32) || defined(_WIN64)
        _sleep(x);
    #endif
}

// PREDEFINED
void loop_touchScreenCore();
const unsigned char *getAppParams(char i, unsigned char type);
void startApp(char num);
bool getBitInByte(unsigned char currentByte, unsigned char bitNum);
void debug(String string);
void debug(String string, int delaytime);

void core_display_setup();
void core_display_loop();
void drawPixel(int x, int y);

void driver_controls_loop();
void driver_battery_loop();
void core_time_loop();
void driver_controls_setup();
void driver_battery_setup();
void core_time_setup();
void do_cpu_sleep();

unsigned long driver_control_get_last_user_avtivity();
void setup_touchScreenDriver();
void loop_touchScreenDriver();


class Application;
Application *getApp(unsigned char i);

void setup();
void loop();

#ifdef CPU_CONTROLL_ENABLE
    void driver_cpu_setup();
#endif

// START
int main()
{
  debug("App started");
  setup();
  while(true){
      loop();
  }
}

void core_battery_loop();
void setBackgroundColor(unsigned char r, unsigned char g, unsigned char b);
void drawRect(int x0, int y0, int x1, int y1, bool fill);
void setDrawColor(unsigned char red, unsigned char green, unsigned char blue);
void fillScreen(unsigned char red, unsigned char green, unsigned char blue);
bool DRAW_LIMITS_getEnable();
uint16_t get_uint16Color(unsigned char red, unsigned char green, unsigned char blue);
void DRAW_LIMITS_setEnable(bool enabled);
bool core_views_statusBar_draw_time(bool draw);
bool core_views_draw_statusbar_battery(bool draw, unsigned char batteryCharge);
void drawBatteryIcon(int x, int y, unsigned char charge, bool isCharging, bool draw);
unsigned char core_time_getHours_byte();
unsigned char core_time_getMinutes_byte();
unsigned char core_time_getDate();
unsigned char core_time_getSeconds_byte();
void driver_accelerometer_setup();
void driver_accelerometer_loop();
void core_pedometer_setup();
uint16_t get_pedometer_days_steps();
void core_pedometer_newDate();
void core_views_softwareButtons_draw();
void core_views_softwareButtons_draw(uint16_t offset, uint8_t color_red, uint8_t color_green, uint8_t color_blue);
float get_pedometer_days_sleep_hours();

#define DEG_TO_RAD      0.01745329
#define RAD_TO_DEG      57.2957786

#define RTC_DATA_ATTR /*Nothing*/



/*
#ifdef _WIN32
  // See http://stackoverflow.com/questions/12765743/getaddrinfo-on-win32 
  #ifndef _WIN32_WINNT
    #define _WIN32_WINNT 0x0501
  #endif
  #include <winsock2.h>
  #include <Ws2tcpip.h>
#else
  #include <sys/socket.h>
  #include <arpa/inet.h>
  #include <netdb.h>
  #include <unistd.h>
#endif
*/

uint16_t current_drawColor;
unsigned char driver_display_screenBrightness = 0;

uint16_t getDrawColor(){
  return current_drawColor;
}

#include <iostream>

#if defined(_WIN32) || defined(_WIN64)
    //#pragma comment(lib, "ws2_32")//включаем библиотеку для сокетов
    //#include <winsock2.h>
    #include <sys/types.h>
#include <winsock2.h>
#include <memory.h>
#include <conio.h>
    //#include <Ws2tcpip.h>
#else
    #include <sys/socket.h>
    #include <arpa/inet.h>
#endif

#define MSG_SIZE 1024
#define REPLY_SIZE 65536

#ifdef TOUCH_SCREEN_ENABLE
  bool TOUCH_SCREEN_isTouching = false;
  int TOUCH_SCREEN_X = 0;
  int TOUCH_SCREEN_Y = 0;

  bool getTOUCH_SCREEN_isTouching(unsigned char finger){
    return TOUCH_SCREEN_isTouching;
  }

  int getTOUCH_SCREEN_X(unsigned char finger){
    return TOUCH_SCREEN_X;
  }

  int getTOUCH_SCREEN_Y(unsigned char finger){
    return TOUCH_SCREEN_Y;
  }
#endif

bool driver_display_needToUpdateScreen = false;

#if defined(_WIN32) || defined(_WIN64) 
#else
  typedef int SOCKET;
#endif

SOCKET sock;

void sendMessageToDisplay(String message){
  const int str_len = message.length() + 1; 
  char char_array[str_len];
  message.toCharArray(char_array, str_len);
  send(sock,char_array,sizeof(char_array),0);
}

void driver_display_setup(){


  #if defined(_WIN32) || defined(_WIN64)
    WSADATA wData;
  #endif
  
	struct sockaddr_in addr,serv_addr;
	#if defined(_WIN32) || defined(_WIN64) 
    if(WSAStartup(MAKEWORD(1,1),&wData)!=0)
    {
      std::cout<<"socket not initialized\n";
    }
  #else
    int sockfd = 0, n = 0;
    char recvBuff[1024];
    memset(recvBuff, '0',sizeof(recvBuff));
  #endif
	std::cout<<"socket initialized\n";

	sock=socket(AF_INET,SOCK_STREAM,0);
	if(sock==-1)
	{
		std::cout<<"socket not created\n";
	}
	
	addr.sin_family=AF_INET;
	addr.sin_port=htons(9100);
	addr.sin_addr.s_addr=htonl(INADDR_LOOPBACK);
	bind(sock,(struct sockaddr *)&addr,sizeof(addr));

	
  
  #if defined(_WIN32) || defined(_WIN64)
  char HostName[1024];
    DWORD HostIP = 0;
    LPHOSTENT lphost;	  
    gethostname(HostName, 1024);
	  lphost=gethostbyname(HostName);
    serv_addr.sin_family=AF_INET;
	  memcpy((char*)&serv_addr.sin_addr,lphost->h_addr,lphost->h_length);
    serv_addr.sin_port=htons(9100);
  #else
    memset(&serv_addr, '0', sizeof(serv_addr));
    
    serv_addr.sin_family=AF_INET;
    serv_addr.sin_port=htons(9100);

    if(inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr)<=0){
        printf("\n inet_pton error occured\n");
    }

/*
    if( connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0){
       printf("\n Error : Connect Failed \n");
    }*/

  #endif	

	int error;
	//if(connect(sock,(struct sockaddr *)&serv_addr,sizeof(serv_addr))<0)
  if(connect(sock,(struct sockaddr *)&serv_addr,sizeof(serv_addr))<0)
	{
		std::cout<<"connect error\n";
    #if defined(_WIN32) || defined(_WIN64) 
      error=WSAGetLastError();
      std::cout<<error<<"\n";
    #endif
		//_getch();
	}else{
    std::cout<<"connect success\n";
  }
	
}

void sleep_displayDriver(){
  //debug("Display sleep");
}

void wakeup_displayDriver(){
  //debug("Display wakeup");
}

void powerOff_displayDriver(){
  //debug("Display poweroff");
}

void powerOn_displayDriver(){
  //debug("Display poweron");
}

void driver_display_setDrawColor(uint16_t color){
  current_drawColor = color;

  unsigned char r = (color & 0xF800) >> 11; //  5bit
  unsigned char g = (color & 0x07E0) >> 5;  //  6bit
  unsigned char b = color & 0x001F;         //  5bit

  r = (r * 255) / 31;
  g = (g * 255) / 63;
  b = (b * 255) / 31;
  sendMessageToDisplay("C " + String(r) + " " + String(g) + " " + String(b) + "\n");
}

void driver_display_setDrawColor(unsigned char red_new, unsigned char green_new, unsigned char blue_new){
  current_drawColor = get_uint16Color(red_new, green_new, blue_new);
  sendMessageToDisplay("C " + String(red_new) + " " + String(green_new) + " " + String(blue_new) + "\n");
}

void driver_display_loop(){
  if(driver_display_needToUpdateScreen){
    sendMessageToDisplay("U\n");
    driver_display_needToUpdateScreen = false;
  }
}

void display_driver_setPixel(int x, int y){
  sendMessageToDisplay("P " + String(x) + " " + String(y) + "\n");
  driver_display_needToUpdateScreen = true;
  #if defined(SCREEN_ROTATION_90)
    
  #elif defined(SCREEN_ROTATION_180)
    
  #elif defined(SCREEN_ROTATION_270)
    
  #else
    
  #endif
}

void display_driver_setPixel(int x, int y, uint16_t newColor){
  driver_display_setDrawColor(newColor);
  display_driver_setPixel(x, y);
}

void deriver_displayfillScreen(unsigned char red, unsigned char green, unsigned char blue){
  //debug("Fill screen");
  setDrawColor(red, green, blue);
  sendMessageToDisplay("F\n");
  driver_display_needToUpdateScreen = true;
}

bool button[] = {false, false, false, false};
bool digRead(unsigned char b){
  return button[b];
}

#ifdef TOUCH_SCREEN_ENABLE

  void driver_display_updateTouchScreen(){
    char buff[15];  
    sendMessageToDisplay("T\n");
    recv(sock,buff,sizeof(buff),0);

    TOUCH_SCREEN_isTouching = (buff[0]=='1');

    //char x[1];
    //char y[1];

    std::string x = "     ";
    std::string y = "     ";
    
    x[0] = buff[1];
    x[1] = buff[2];
    x[2] = buff[3];
    x[3] = buff[4];
    x[4] = buff[5];

    y[0] = buff[6];
    y[1] = buff[7];
    y[2] = buff[8];
    y[3] = buff[9];
    y[4] = buff[10];

    TOUCH_SCREEN_X = stoi(x);
    TOUCH_SCREEN_Y = stoi(y);
  }
#endif

void driver_display_updateControls(){
  char buff[15];
  sendMessageToDisplay("K\n");
	recv(sock,buff,sizeof(buff),0);
  //printf(buff);

  button[0] = (buff[0]=='1');
  button[1] = (buff[1]=='1');
  button[2] = (buff[2]=='1');
  button[3] = (buff[3]=='1');
  
  /*
  printf("%d-", (int)(buff[0]=='1'));
  printf("%d-", (int)(buff[1]=='1'));
  printf("%d-", (int)(buff[2]=='1'));
  printf("%d\n", (int)(buff[3]=='1'));
  */
}


#ifdef USE_PRIMITIVE_HARDWARE_DRAW_ACCELERATION
  void driver_display_drawFastVLine(int16_t x, int16_t y, int16_t w){
    sendMessageToDisplay("LV " + String(x) + " " + String(y) + " " + String(w) + "\n");
    driver_display_needToUpdateScreen = true;
    #if defined(SCREEN_ROTATION_90)
      
    #elif defined(SCREEN_ROTATION_180)
      
    #elif defined(SCREEN_ROTATION_270)
      
    #else
      
    #endif
    
  }

  void driver_display_drawFastHLine(int16_t x, int16_t y, int16_t h){
    sendMessageToDisplay("LH " + String(x) + " " + String(y) + " " + String(h) + "\n");
    driver_display_needToUpdateScreen = true;
    #if defined(SCREEN_ROTATION_90)
      
    #elif defined(SCREEN_ROTATION_180)
      
    #elif defined(SCREEN_ROTATION_270)
      
    #else
      
    #endif
  }

  void driver_display_fillRect(int16_t x, int16_t y, int16_t w, int16_t h){
    sendMessageToDisplay("R " + String(x) + " " + String(y) + " " + String(w) + " " + String(h) + "\n");
    driver_display_needToUpdateScreen = true;
    #if defined(SCREEN_ROTATION_90)
      
    #elif defined(SCREEN_ROTATION_180)
      
    #elif defined(SCREEN_ROTATION_270)
      
    #else
      
    #endif
  }
#endif

void driver_display_setBrightness(unsigned char brightness){
  // brightness: 0..100%
  brightness =  (unsigned char)((int)brightness*255/100);
  //M5.Lcd.setBrightness(brightness);
}

void driver_cpu_sleep(){}

void driver_cpu_wakeup(){}

void driver_cpu_poweroff(){}


#define LION_EMULATOR_BATTERY_VOLTAGE_100 420 

int getMaxBatteryAnalogValue(){
    return 0;
}

void driver_battery_setup(){
}

void driver_battery_loop(){

}

int driver_battery_raw(){
    return getMaxBatteryAnalogValue();
}

float driver_battery_getVoltage(){
    return (float)LION_EMULATOR_BATTERY_VOLTAGE_100 / 100.0;
}

int driver_battery_getVoltage_mV(){
    return LION_EMULATOR_BATTERY_VOLTAGE_100;
}

unsigned char driver_battery_getPercent(){
    int mV = driver_battery_getVoltage_mV();
    if(mV>=400){
        return 100;
    }else if(mV<=320){
        return 0;
    }else{
        int dmV = mV - 320;
        return dmV*100/80;
    }
    return 0;
}

/**/

float driver_battery_getCurent_mA(){
  return 100.0f;
}

float driver_battery_getUsbVoltage(){
  return 5.2f;
}

float driver_battery_getUsbCurent_mA(){
  return 150.0f;
}

float driver_battery_controller_Temp(){
  return 35.2f;
}

float driver_battery_Temp(){
  return 28.1f;
}

bool driver_battery_isCharging(){
    return true;
}

bool driver_battery_isUsbConnected(){
  return true;
}


unsigned char driver_rtc_emulator_hours 	= 18;
unsigned char driver_rtc_emulator_minutes 	= 23;
unsigned char driver_rtc_emulator_seconds 	= 48;
uint16_t driver_rtc_emulator_year			= 2021;
unsigned char driver_rtc_emulator_date		= 9;
unsigned char driver_rtc_emulator_month		= 6;
unsigned char driver_rtc_emulator_weekday 	= 5;

unsigned char driver_rtc_emulator_temperature;

void driver_RTC_setup(){}

void driver_RTC_refresh(bool hard){
}

void driver_RTC_refresh(){
	driver_RTC_refresh(false);
}

unsigned char driver_RTC_getMinutes(){
	return driver_rtc_emulator_minutes;
}

void driver_RTC_setMinutes(unsigned char minutes){
	minutes = minutes%60;
	driver_rtc_emulator_minutes = minutes;
}

unsigned char driver_RTC_getSeconds(){
	return driver_rtc_emulator_seconds;
}

void driver_RTC_setSeconds(unsigned char seconds){
	seconds = seconds%60;
	driver_rtc_emulator_seconds = seconds;
}

unsigned char driver_RTC_getHours(){
	return driver_rtc_emulator_hours;
}

void driver_RTC_setHours(unsigned char hours){
	hours = hours%24;
	driver_rtc_emulator_hours = hours;
}

unsigned char driver_RTC_getTemperature(){
	return driver_rtc_emulator_temperature;
}

unsigned char driver_RTC_getWeekDay(){
	// TODO
	return driver_rtc_emulator_weekday;
}

void driver_RTC_setWeekDay(unsigned char weekDay){
	weekDay = weekDay%7;
	driver_rtc_emulator_weekday = weekDay;
	// TODO
}

unsigned char driver_RTC_getDate(){
	return driver_rtc_emulator_date;
}

void driver_RTC_setDate(unsigned char date){
	date = date%31;
	driver_rtc_emulator_date = date;
}

unsigned char driver_RTC_getMonth(){
	return driver_rtc_emulator_month;
}

void driver_RTC_setMonth(unsigned char month){
	month = month%12;
	driver_rtc_emulator_month = month;
}

uint16_t driver_RTC_getYear(){
	return driver_rtc_emulator_year;
}


void driver_RTC_setYear(int year){
	#ifndef RTC_MIN_YEAR
		#define RTC_MIN_YEAR 2020
	#endif
	#ifndef RTC_MAX_YEAR
		#define RTC_MAX_YEAR 2070
	#endif

	if(year<RTC_MIN_YEAR) year = RTC_MAX_YEAR;
	if(year>RTC_MAX_YEAR) year = RTC_MIN_YEAR;
	
	driver_rtc_emulator_year = year;
}

void driver_RTC_setAlarmBySeconds(unsigned char seconds){
	/*
	rtc.disableAlarm();
    rtc.setAlarmBySeconds((driver_RTC_getSeconds()+seconds)%60);
    rtc.enableAlarm();
	*/
}




/*
    ############################################################################################
    #                                                                                          #
    #                                   APPLIACATION OJECT +                                   #
    #                                                                                          #
    ############################################################################################
*/

// PREDEFINITION
void core_views_statusBar_draw();
void setup_touchScreenCore();
void core_views_draw_active_page(bool draw, int y0, unsigned char pages_quantity, unsigned char position);
#ifdef SOFTWARE_BUTTONS_ENABLE
  void core_views_softwareButtons_draw();
#endif

#ifdef SOFTWARE_KEYBOARD_ENABLE
  void core_software_keyboard_show();
#endif

#ifdef RTC_ENABLE
  void core_time_driver_RTC_refresh(bool hard);
  void core_time_driver_RTC_refresh();
#endif

class Application;
Application *getApp(unsigned char i);


/////////////////////////////////////
// APPLICATION CLASS

class Application{
  public:
    int scroll_x                        = 0;
    int scroll_y                        = 0;
    int scroll_to_x                     = 0;
    int scroll_to_y                     = 0;
    unsigned char sleep_device_after    = 0;
    bool isfullScreen                   = true;
    bool showStatusBar                  = true;
    bool preventSleep                   = false;
    bool preventInAppSleep              = false;

    #ifdef SOFTWARE_BUTTONS_ENABLE
      bool showSoftWareButtons = true;
    #endif

    virtual void onLoop()     = 0;
    virtual void onDestroy()  = 0;
    virtual void onEvent(unsigned char event, int val1, int val2, int val3, int val4, int val5) = 0;

    void onEvent(unsigned char event, int val1, int val2){
      onEvent(event, val1, val2, 0, 0, 0);
    }

    void super_onCreate(){
      this->preventSleep = false;
      this->preventInAppSleep = false;
      if(this->showStatusBar) core_views_statusBar_draw();
      #ifdef SOFTWARE_BUTTONS_ENABLE
        if(this->showSoftWareButtons) core_views_softwareButtons_draw();
      #endif
    }

    Application(){};
};

bool currentAppSetted = false;
Application* currentApp;
/*
    ############################################################################################
    #                                                                                          #
    #                                    APPLICATION OJECT -                                   #
    #                                                                                          #
    ############################################################################################
*/

#ifdef POWERSAVE_ENABLE
  unsigned char wakeUpReason = 0x00;
  unsigned char getWakeUpReason(){return wakeUpReason;}
#endif

void setup(){   

  #ifdef CORE_SETUP_INIT
    core_setup_driver();
  #endif

  #ifdef DEBUG_SERIAL
    #ifndef DO_NOT_INIT_SERIAL
      DEBUG_SERIAL_PORT.begin(115200);
    #endif
    debug("\n\nSerial debug started " + String(millis()));
  #endif

  #ifdef RUN_BACKGROUND_AFTER_RESTART_MCU
    #ifdef POWERSAVE_ENABLE
      #ifdef CPU_SLEEP_ENABLE
        wakeUpReason = core_powersave_wakeup_reason();
        if(wakeUpReason==WAKE_UP_REASON_TIMER){
          #ifdef DEBUG_WAKEUP
            debug("DEBUG_WAKEUP: Background start " + String(millis()));
            //core_cpu_setup();
          #endif
          #ifdef PEDOMETER_DO_NOT_USE_PEDOMETER_WHILE_CONNECTED_TO_USB
            #ifdef BATTERY_ENABLE
              driver_battery_setup();
            #endif
          #endif
          core_cpu_setup();
          driver_controls_setup();
          #ifdef DEBUG_WAKEUP
            debug("DEBUG_WAKEUP: Backgroung controls inited "  + String(millis()));
          #endif

          #ifdef RTC_ENABLE
              driver_RTC_setup();
              core_time_driver_RTC_refresh(true);
          #endif

          #ifdef DEBUG_WAKEUP
              debug("DEBUG_WAKEUP: RTC inited "  + String(millis()), 10);
          #endif

          backgroundWorkAfterSleep();
          #ifdef PEDOMETER_ENABLE
            #ifdef DEBUG_WAKEUP
              debug("DEBUG_WAKEUP: Going to sleep again for " + String(get_corePedometer_currentsleep_between_mesures()) + "ms " + String(millis()));
              delay(50);
            #endif
            #ifdef PEDOMETER_ENABLE
              if(core_pedometer_getEnable()){
                core_cpu_sleep(STAND_BY_SLEEP_TYPE, get_corePedometer_currentsleep_between_mesures()*1000);
              }else{
                core_cpu_sleep(STAND_BY_SLEEP_TYPE, 24*60*60*1000);// Do not wake up for 1 day 
              }
            #else
              core_cpu_sleep(STAND_BY_SLEEP_TYPE, get_corePedometer_currentsleep_between_mesures()*1000);
            #endif
          #else
            #ifdef DEBUG_WAKEUP
              debug("DEBUG_WAKEUP: Going to sleep while interrupt");
              delay(50);
              core_cpu_sleep(STAND_BY_SLEEP_TYPE);
            #endif
          #endif
        }else{
          #ifdef DEBUG_WAKEUP
            //delay(1000);
            debug("DEBUG_WAKEUP: Not background start 1. Reason: " + String(wakeUpReason), 10);
          #endif
        }
      #endif
    #endif
  #else
    #ifdef DEBUG_WAKEUP
      //delay(1000);
      debug("DEBUG_WAKEUP: Not background start 2. Reason: " + String(wakeUpReason), 10);
    #endif
  #endif
  //debug("**** Main app start", 10);
  core_display_setup();
  
  #ifdef RTC_ENABLE
      driver_RTC_setup();
  #endif

  #ifdef FORCE_DISPLAY_UPDATE_ON_START
    currentApp = getApp(STARTING_APP_NUMM);
    core_display_loop();
    driver_display_loop();
    currentAppSetted = true;
  #endif

  #ifdef BATTERY_ENABLE
    driver_battery_setup();
  #endif

  #ifdef ESP8266
    ESP.wdtDisable();
  #endif

  #ifdef CPU_CONTROLL_ENABLE
    core_cpu_setup();
  #endif

  #ifdef HARDWARE_BUTTONS_ENABLED
    driver_controls_setup();
  #endif

  #ifdef TOUCH_SCREEN_ENABLE
    setup_touchScreenDriver();
  #endif

  #ifdef POWERSAVE_ENABLE
    core_powersave_setup();
  #endif

  #ifdef ACCELEROMETER_ENABLE
    driver_accelerometer_setup();
  #endif

  #ifdef PEDOMETER_ENABLE
    core_pedometer_setup();
  #endif
  
  #ifndef FORCE_DISPLAY_UPDATE_ON_START
    currentApp = getApp(STARTING_APP_NUMM);
    currentAppSetted = true;
  #endif

  #ifdef TOUCH_SCREEN_ENABLE
    setup_touchScreenCore();
  #endif

  #ifdef BLE_ENABLED
    //core_ble_sync_setup(); // Will be setted up only if needed
  #endif
  
  #ifdef ON_SETUP_FINISHED_CUSTOM_FUNCTION_CALL
    ON_SETUP_FINISHED_CUSTOM_FUNCTION_CALL
  #endif
}

bool isInSleep = false;
void loop(){

  #ifdef CORE_SETUP_INIT
    core_loop_driver();
  #endif

  //long t = millis();
  core_display_loop();
  driver_display_loop();
  //t = millis() - t;
  //if(t!=0)debug("FPS: " + String(1000/t));

  #ifdef CPU_CONTROLL_ENABLE
    core_cpu_loop();
  #endif

  #ifdef HARDWARE_BUTTONS_ENABLED
    driver_controls_loop();
  #endif

  #ifdef TOUCH_SCREEN_ENABLE
    //loop_touchScreenDriver();
    loop_touchScreenCore();
  #endif

  #ifdef BATTERY_ENABLE
    core_battery_loop();
  #endif

  #ifdef CLOCK_ENABLE
    core_time_loop();
  #endif

  #ifdef POWERSAVE_ENABLE
    core_powersave_loop();
  #endif

  #ifdef ACCELEROMETER_ENABLE
    driver_accelerometer_loop();
  #endif

  currentApp->onLoop(); 

  #ifdef ESP8266
    //ESP.wdtDisable();
    ESP.wdtFeed();
  #endif

  #ifndef RUN_BACKGROUND_AFTER_RESTART_MCU
    core_pedometer_loop(false);
  #endif

  #ifdef BLE_ENABLED
    //core_ble_sync_loop();
  #endif

}

void debug(String string){
  debug(string, 0);
}

void debug(int string){
  debug(String(string), 0);
}

void debug(String string, int delaytime){
    #ifdef TERMINAL_DEBUG
      int str_len = string.length() + 1;
      char element_value[str_len];
      string.toCharArray(element_value, str_len);
      printf(element_value);
      printf("\n");
    #endif

    #ifdef DEBUG_SERIAL
      Serial.println(string);
      Serial.flush();
      delay(delaytime);
    #endif

    #ifdef DEBUG_ON_SCREEN
      setDrawColor(255, 255, 255);
      drawString(string, 5, STYLE_STATUSBAR_HEIGHT + 10, 2);
      delay(delaytime);
      setDrawColor(0, 0, 0);
      drawString(string, 5, STYLE_STATUSBAR_HEIGHT + 10, 2);
    #endif
}

/*
    ############################################################################################
    #                                                                                          #
    #                                          ICONS +                                         #
    #                                                                                          #
    ############################################################################################
*/

#define ICON_ARROW_RIGHT            0x01
#define ICON_ARROW_LEFT             0x02
#define ICON_ARROW_UP               0x03
#define ICON_ARROW_DOWN             0x04
#define ICON_BATTERY_UNKNOWN        0x05

#define ICON_BATTERY_CHARGING       0x06
#define ICON_BATTERY_100            0x07
#define ICON_BATTERY_90             0x08
#define ICON_BATTERY_80             0x09
#define ICON_BATTERY_70             0x0A
#define ICON_BATTERY_60             0x0B
#define ICON_BATTERY_50             0x0C
#define ICON_BATTERY_40             0x0D
#define ICON_BATTERY_30             0x0E
#define ICON_BATTERY_20             0x0F
#define ICON_BATTERY_10             0x10
#define ICON_BATTERY_0              0x11

#define ICON_WIFI_CONNECTED         0x11
#define ICON_WIFI_NOTCONNECTED      0x12
#define ICON_WI_FI_IMG_OFF          0x13
#define ICON_BT_CONNECTED           0x14
#define ICON_BT_NOTCONNECTED        0x15
#define ICON_BT_OFF                 0x16

#define ICON_LEG                    0x17
#define ICON_LEG_GREY               0x18


#define PARAM_TYPE_ICON             0x01
#define PARAM_TYPE_NAME             0x02

/*
    ############################################################################################
    #                                                                                          #
    #                                          ICONS -                                         #
    #                                                                                          #
    ############################################################################################
*/

// HELPERS
#define TEMPORARILY_DISABLE_LIMITS() bool DRAW_LIMITS_wasEnable = DRAW_LIMITS_getEnable(); DRAW_LIMITS_setEnable(false);
#define TEMPORARILY_RESTORE_LIMITS() DRAW_LIMITS_setEnable(DRAW_LIMITS_wasEnable);

#define TEMPORARILY_DISABLE_BACKGROUND() unsigned char tdbg_r = getBackgroundColor_red(); unsigned char tdbg_g = getBackgroundColor_green(); unsigned char tdbg_b = getBackgroundColor_blue();
#define TEMPORARILY_RESTORE_BACKGROUND() setBackgroundColor(tdbg_r, tdbg_g, tdbg_b);


#define DRIVER_CONTROLS_TOTALBUTTONS 4
#define _millis() millis()
#define DRIVER_CONTROLS_DELAY_BEFORE_LONG_PRESS 350

// unsigned long last_user_activity = _millis();

// Do not change:
bool driver_control_pressed[]      = {false, false, false, false};
unsigned long driver_control_time_pressed[]    = {0, 0, 0, 0};

void onButtonEvent(unsigned char event, int button){
  currentApp->onEvent(event, button, 0);
}

void driver_controls_setup(){

}


void driver_controls_loop(){

    driver_display_updateControls();
    

    for (unsigned char i=0; i<DRIVER_CONTROLS_TOTALBUTTONS; i++){
        if (digRead(i)){
        if(driver_control_pressed[i]==false){
            // press start
            driver_control_pressed[i]=true;
            driver_control_time_pressed[i] = _millis();
            onButtonEvent(EVENT_BUTTON_PRESSED, i);
        }else{
            // was pressed
            if(_millis()-driver_control_time_pressed[i]>DRIVER_CONTROLS_DELAY_BEFORE_LONG_PRESS){
            // long press
            driver_control_time_pressed[i]=-1;
            onButtonEvent(EVENT_BUTTON_LONG_PRESS, i);
            }
        }

        }else{
        if(driver_control_pressed[i]==true){
            // released
            driver_control_pressed[i]=false;
            onButtonEvent(EVENT_BUTTON_RELEASED, i);

        }
        }
    }

}

/*

unsigned long driver_control_get_last_user_avtivity(){
  return last_user_activity;
}

void driver_control_set_last_user_avtivity(unsigned long time){
  last_user_activity = time;
}

*/


#ifdef TOUCH_SCREEN_ENABLE
    void setup_touchScreenDriver(){
        
    }

    void loop_touchScreenDriver(){
        driver_display_updateTouchScreen();
    }

#endif



/*
    ############################################################################################
    #                                                                                          #
    #                                       APPLICATIONS +                                     #
    #                                                                                          #
    ############################################################################################
*/

#define APP_MENU_APPLICATIONS_0             ClockApp
#define APP_MENU_APPLICATIONS_1             SettingsApp
#define APP_MENU_APPLICATIONS_2             BatteryApp
#define APP_MENU_APPLICATIONS_3             TestApplicationApp
#define APP_MENU_APPLICATIONS_4             PedometerApp 
#define APP_MENU_APPLICATIONS_5             PedometerAppTest

#define APP_MENU_APPLICATIONS_6             AlarmApp
#define APP_MENU_APPLICATIONS_7             BarometerApp
#define APP_MENU_APPLICATIONS_8             FileManagerApp
#define APP_MENU_APPLICATIONS_9             InternetApp
#define APP_MENU_APPLICATIONS_10            SimpleGameApp
#define APP_MENU_APPLICATIONS_11            TouchCalibration
#define APP_MENU_APPLICATIONS_12            TouchTest
#define APP_MENU_APPLICATIONS_13            KeyboardTest
#define APP_MENU_APPLICATIONS_14            BleTester


/*
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
    #                                                                       #
    #                    -->> Add your application here                     #
    #                                                                       #
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
*/

/*
#define APP_MENU_APPLICATIONS_11            AppName
#define APP_MENU_APPLICATIONS_12            AppName
#define APP_MENU_APPLICATIONS_13            AppName
#define APP_MENU_APPLICATIONS_14            AppName
#define APP_MENU_APPLICATIONS_15            AppName
#define APP_MENU_APPLICATIONS_16            AppName
#define APP_MENU_APPLICATIONS_17            AppName
#define APP_MENU_APPLICATIONS_18            AppName
#define APP_MENU_APPLICATIONS_19            AppName
#define APP_MENU_APPLICATIONS_20            AppName
#define APP_MENU_APPLICATIONS_21            AppName
#define APP_MENU_APPLICATIONS_22            AppName
#define APP_MENU_APPLICATIONS_23            AppName
#define APP_MENU_APPLICATIONS_24            AppName
#define APP_MENU_APPLICATIONS_25            AppName
#define APP_MENU_APPLICATIONS_26            AppName
#define APP_MENU_APPLICATIONS_27            AppName
#define APP_MENU_APPLICATIONS_28            AppName
#define APP_MENU_APPLICATIONS_29            AppName
#define APP_MENU_APPLICATIONS_30            AppName
#define APP_MENU_APPLICATIONS_31            AppName
*/


/*
    ############################################################################################
    #                                                                                          #
    #                                       APPLICATIONS -                                     #
    #                                                                                          #
    ############################################################################################
*/

/*
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
    #                                                                   #
    #                           READ RAW DATA                           #
    #                                                                   #
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
*/

long readRawChar(const unsigned char* data, long &position){
    unsigned char data_char = (char)pgm_read_word(&(data[position]));
    position ++;
    return data_char;
}   

// Also this func need for B apps
uint64_t byte_to_value(unsigned char byte0, unsigned char byte1, unsigned char byte2, unsigned char byte3, unsigned char byte4, unsigned char byte5, unsigned char byte6, unsigned char byte7){
  return (byte7<<56)|(byte6<<48)|(byte5<<40)|(byte4<<32)|(byte3<<24)|(byte2<<16)|(byte1<<8)|byte0;
}

int readRawParam(const unsigned char* data, long &position){
    unsigned char paramType = readRawChar(data, position);

    if (paramType==0x02){
      return (unsigned char)readRawChar(data, position);
    }else if(paramType==0x03){
      return (unsigned int)byte_to_value(readRawChar(data, position), readRawChar(data, position),0,0,0,0,0,0);
    }
    return 0;
}

/*
*************************************
*                                   *
*          BASIC FUNCTIONS          *
*                                   *
*************************************
*/

//const float pi = 3.141592;

const float get_pi(){
    #ifdef platform_m5stack
        return 3.141592;
    #endif

    #ifdef platform_esp8266
        return 3.141592;
    #endif

    #ifdef platform_avr
        #ifndef conf_atm64_watch4
            return pi;
        #endif
    #endif

    return 3.141592;
}

char * int_to_char(int val){
    char str[2] = "";
    printf(str, "%d", val);
    return str;
}

void int_to_char(char *string, int num, bool fillNull){
    sprintf(string, (num<10&&fillNull?"0%d":"%d"), num);
}

// 1 bit array operations
void set_bit_toBbyte(unsigned char &b, unsigned char position, bool value){ if (value) b|=1<<position; else b&=~(1<<position);}
bool get_bit_fromBbyte(unsigned char b, unsigned char position){return (b&1<<position);}


/*
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
    #                                                                   #
    #                              CONVERT                              #
    #                                                                   #
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
*/

/*
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
    #                                                                   #
    #                               OTHER                               #
    #                                                                   #
    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
*/

#ifdef device_can_cpu_prescale
    #ifdef platform_avr
        void set_cpu_prescale(clock_div_t prescale){
            clock_prescale_set(prescale);
        }
    #endif
#endif

String core_basic_addLeadBullToInt2digits(unsigned char byteIn){
    if(byteIn<10){
        return "0" + String(byteIn);
    }else{
        return String(byteIn);
    }
}

String getHexNumberFromNumber(unsigned char b){
    switch(b){
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
            return String((int)b);
        case 10:
            return "A";
        case 11:
            return "B";
        case 12:
            return "C";
        case 13:
            return "D";
        case 14:
            return "E";
        case 15:
            return "F";
        default:
            return "";
    }

}

String getHexStringFromByte(unsigned char b){
    return "0x" + getHexNumberFromNumber(b/16) + getHexNumberFromNumber(b%16);
}



#ifdef FRAMEBUFFER_ENABLE

  #ifdef FRAMEBUFFER_TWIN_FULL

    #define FRAMEBUFFER_SIZE SCREEN_WIDTH * SCREEN_HEIGHT * FRAMEBUFFER_BYTE_PER_PIXEL
    //#define FRAMEBUFFER_SIZE SCREEN_WIDTH * SCREEN_HEIGHT

    #if FRAMEBUFFER_BYTE_PER_PIXEL==2
      #define FRAMEBUFFER_TYPE uint16_t
    #endif

    #if FRAMEBUFFER_BYTE_PER_PIXEL==1
      #define FRAMEBUFFER_TYPE uint8_t
    #endif

    FRAMEBUFFER_TYPE * FRAMEBUFFER_currentFrame;
    FRAMEBUFFER_TYPE * FRAMEBUFFER_newFrame;
    bool FRAMEBUFFER_pixelChanged_x[SCREEN_WIDTH];
    bool FRAMEBUFFER_pixelChanged_y[SCREEN_HEIGHT];
    bool FRAMEBUFFER_pixelChanged[SCREEN_WIDTH*SCREEN_HEIGHT + 1];

  #endif
#endif

unsigned char get_16GrayscaleColor(unsigned char red, unsigned char green, unsigned char blue){
  int grayColor = ((int)red + (int)green + (int)blue)/3/16;
  //debug("#### COLOR " + String(red) + " " + String(green) + " " + String(blue) + " - " + grayColor);
  return 15 - (unsigned char)grayColor;
}

uint16_t get_uint16Color(unsigned char red, unsigned char green, unsigned char blue){
  #ifdef SCREEN_INVERT_COLORS
    red = 255 - red;
    green = 255 - green;
    blue = 255 - blue;
  #endif
  
  #ifdef SCREEN_CHANGE_BLUE_RED
    return ( (blue*31/255) <<11)|( (green*31/255) <<6)|( (red*31/255) <<0);
  #else
    return ( (red*31/255) <<11)|( (green*31/255) <<6)|( (blue*31/255) <<0);
    //return ( (red*31/255) <<11)|( (green*31/255) <<6)|( (blue*31/255) <<0);
  #endif
}

void setGradientColor(
    unsigned char r1, 
    unsigned char g1, 
    unsigned char b1, 
    unsigned char r2, 
    unsigned char g2, 
    unsigned char b2, 
    unsigned int steps, 
    unsigned int current_steps
    ){

  unsigned char r;
  unsigned char g;
  unsigned char b;

  unsigned char r_min = min(r1,r2);
  unsigned char g_min = min(g1,g2);
  unsigned char b_min = min(b1,b2);

  unsigned char r_max = max(r1,r2);
  unsigned char g_max = max(g1,g2);
  unsigned char b_max = max(b1,b2);

  float k = (float)current_steps/(float)steps;

  if(r1==r2) r = r1;
  else{
    if(r1>r2) r = r_min + ((float)(r_max - r_min))*k;
    else r = r_max - ((float)(r_max - r_min))*k; 
  }
  

  if(g1==g2) g = g1;
  else{
    if(g1>g2) g = g_min + ((float)(g_max - g_min))*k;
    else g = g_max - ((float)(g_max - g_min))*k; 
  }

  if(b1==b2) b = b1;
  else{
    if(b1>b2) b = b_min + ((float)(b_max - b_min))*k;
    else b = b_max - ((float)(b_max - b_min))*k; 
  }

  setDrawColor(r, g, b);
}

/*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
                                  FRAMEBUFFER
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/

unsigned char current_red;
unsigned char current_green;
unsigned char current_blue;

unsigned char get_current_red(){
  return current_red;
}

unsigned char get_current_green(){
  return current_green;
}

unsigned char get_current_blue(){
  return current_blue;
}

void setDrawColor(unsigned char red_new, unsigned char green_new, unsigned char blue_new){
  current_red     = red_new;
  current_green   = green_new;
  current_blue    = blue_new;
  driver_display_setDrawColor(red_new, green_new, blue_new);
}

void setDrawColor(uint16_t color){
  driver_display_setDrawColor(color);
}

#ifdef FRAMEBUFFER_ENABLE

  #ifdef FRAMEBUFFER_TWIN_FULL

    bool FRAMEBUFFER_isChanged = false;

    void setFRAMEBUFFER_isChanged(bool v){
      FRAMEBUFFER_isChanged = v;
    }

    bool getFRAMEBUFFER_isChanged(){
      return FRAMEBUFFER_isChanged;
    }

    FRAMEBUFFER_TYPE FRAMEBUFFER_16bitColor_to_framebufferColor(uint16_t color){
      
      #if FRAMEBUFFER_BYTE_PER_PIXEL==2
        return color;
      #elif FRAMEBUFFER_BYTE_PER_PIXEL==1

        unsigned char r = (color & 0xF800) >> 11; //  5bit
        unsigned char g = (color & 0x07E0) >> 5;  //  6bit
        unsigned char b = color & 0x001F;         //  5bit

        r = (r * 7) / 31;
        g = (g * 7) / 63;
        b = (b * 3) / 31;

        int bufferCollor = (r<<5) | (g<<2) | b;
        return (FRAMEBUFFER_TYPE)bufferCollor;
      #endif
      
    }

    uint16_t FRAMEBUFFER_framebufferColor_to_16bitColor(FRAMEBUFFER_TYPE color){
      
      #if FRAMEBUFFER_BYTE_PER_PIXEL==2
        return color;
      #elif FRAMEBUFFER_BYTE_PER_PIXEL==1
        
        unsigned char r = (color & 0b11100000) >> 5; //  3bit
        unsigned char g = (color & 0b00011100) >> 2;  //  3bit
        unsigned char b = color & 0b00000011;         //  2bit

        r = (r * 31) / 7;
        g = (g * 63) / 7;
        b = (b * 31) / 3;

        uint16_t bufferCollor = (r<<11) | (g<<5) | b;

        return (uint16_t)bufferCollor;
      #endif
      
    }

    void FRAMEBUFFER_new_setPixel(uint16_t x, uint16_t y, uint16_t color){
      long position = y * (SCREEN_WIDTH-1) + x;
      FRAMEBUFFER_newFrame[position] = FRAMEBUFFER_16bitColor_to_framebufferColor(color);
    }

    void FRAMEBUFFER_current_setPixel(uint16_t x, uint16_t y, uint16_t color){
      long position = y * (SCREEN_WIDTH-1) + x;
      FRAMEBUFFER_currentFrame[position] = FRAMEBUFFER_16bitColor_to_framebufferColor(color);
    }

    void FRAMEBUFFER_current_setPixel(long position, uint16_t color){
      FRAMEBUFFER_currentFrame[position] = FRAMEBUFFER_16bitColor_to_framebufferColor(color);
    }

    uint16_t FRAMEBUFFER_new_getPixel(uint16_t x, uint16_t y){
      long position = y * (SCREEN_WIDTH-1) + x;
      return FRAMEBUFFER_framebufferColor_to_16bitColor(FRAMEBUFFER_newFrame[position]);
    }

    uint16_t FRAMEBUFFER_new_getPixel(long position){
      return FRAMEBUFFER_framebufferColor_to_16bitColor(FRAMEBUFFER_newFrame[position]);
    }

    uint16_t FRAMEBUFFER_current_getPixel(uint16_t x, uint16_t y){
      long position = y * (SCREEN_WIDTH-1) + x;
      return FRAMEBUFFER_framebufferColor_to_16bitColor(FRAMEBUFFER_currentFrame[position]);
    }

    uint16_t FRAMEBUFFER_current_getPixel(long position){
      return FRAMEBUFFER_framebufferColor_to_16bitColor(FRAMEBUFFER_currentFrame[position]);
    }

    void FRAMEBUFFER_fill(uint16_t fillColor){
      for(int x=0; x<SCREEN_WIDTH; x++){
        for(int y=0; y<SCREEN_HEIGHT; y++){
          long position = y * SCREEN_WIDTH + x;
          FRAMEBUFFER_pixelChanged[x + SCREEN_WIDTH*y] = false;
          FRAMEBUFFER_new_setPixel(x, y, 0);
          FRAMEBUFFER_current_setPixel(x, y, 0);
        }
      }
    }

    void FRAMEBUFFER_reset(){
      FRAMEBUFFER_fill(0);
    }
  #endif

#endif

void fillScreen(unsigned char red, unsigned char green, unsigned char blue){
  TEMPORARILY_DISABLE_LIMITS();

  #ifdef FRAMEBUFFER_ENABLE

    setDrawColor(red, green, blue);
    for(int x=0; x<SCREEN_WIDTH; x++){
      for(int y=0; y<SCREEN_HEIGHT; y++){
        drawPixel(x,y);
      }
    }

  #else

    deriver_displayfillScreen(red, green, blue);

  #endif

  TEMPORARILY_RESTORE_LIMITS();
}

/*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
                                  DRAW LIMITS
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/

bool DRAW_LIMITS_Enabled  = false;
int DRAW_LIMITS_top       = 0;
int DRAW_LIMITS_bottom    = SCREEN_HEIGHT;
int DRAW_LIMITS_left      = 0;
int DRAW_LIMITS_right     = SCREEN_WIDTH;
 
void DRAW_LIMITS_setEnable(bool enabled){
  DRAW_LIMITS_Enabled = enabled;
}

void DRAW_LIMIT_reset(){
  DRAW_LIMITS_top       = 0;
  DRAW_LIMITS_bottom    = SCREEN_HEIGHT;
  DRAW_LIMITS_left      = 0;
  DRAW_LIMITS_right     = SCREEN_WIDTH;
}

void DRAW_LIMITS_setEnable(int top, int bottom, int left, int right){
  if(top!=-1)     DRAW_LIMITS_top       = top;
  if(bottom!=-1)  DRAW_LIMITS_bottom    = bottom;
  if(left!=-1)    DRAW_LIMITS_left      = left;
  if(right!=-1)   DRAW_LIMITS_right     = right;
}

bool DRAW_LIMITS_getEnable(){
  return DRAW_LIMITS_Enabled;
}

/*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
                                  POWER CONTROLL
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
unsigned char core_display_brightness             = DEFAULT_SCREEN_BRIGHTNESS;

#ifndef DEFAULT_TIME_TO_POWEROFF_DISPLAY
  #define DEFAULT_TIME_TO_POWEROFF_DISPLAY 5;
#endif

#ifndef DEFAULT_DELAY_TO_FADE_DISPLAY
  #define DEFAULT_DELAY_TO_FADE_DISPLAY 10;
#endif


#ifdef DISPLAY_BACKLIGHT_FADE_CONTROL_ENABLE
  unsigned char core_display_brightness_fade        = DEFAULT_FADE_BRIGHTNES;
  unsigned char core_display_time_delay_to_fade     = DEFAULT_DELAY_TO_FADE_DISPLAY;
#endif

#ifdef PLATFORM_ESP32
  RTC_DATA_ATTR unsigned char core_display_time_delay_to_poweroff             = DEFAULT_TIME_TO_POWEROFF_DISPLAY;
#else
  unsigned char core_display_time_delay_to_poweroff             = DEFAULT_TIME_TO_POWEROFF_DISPLAY;
#endif

#ifndef APP_CLOCK_POWER_AFTER_SECONDS_DEFAULT
  #define APP_CLOCK_POWER_AFTER_SECONDS_DEFAULT 0
#endif

#ifdef PLATFORM_ESP32
  RTC_DATA_ATTR unsigned char core_display_time_delay_to_poweroff_clock_app   = APP_CLOCK_POWER_AFTER_SECONDS_DEFAULT;
#else
  unsigned char core_display_time_delay_to_poweroff_clock_app   = APP_CLOCK_POWER_AFTER_SECONDS_DEFAULT;
#endif


#ifdef DISPLAY_BACKLIGHT_CONTROL_ENABLE
  void set_core_display_brightness(unsigned char value){ 
    if(value>100) value = 100;
    core_display_brightness = value;
    driver_display_setBrightness(core_display_brightness);
  }
#endif

#ifdef DISPLAY_BACKLIGHT_FADE_CONTROL_ENABLE
  void set_core_display_brightness_fade(unsigned char value){ 
    if(value>100) value = 100;
    core_display_brightness_fade = value;
  }

  void set_core_display_time_delay_to_fade(unsigned char value){
    if(value>240) value = 240;
    core_display_time_delay_to_fade = value;
  }
#endif

void set_core_display_time_delay_to_poweroff(unsigned char value){ 
  if(value==0) value = 1;
  if(value>240) value = 240;
  core_display_time_delay_to_poweroff = value;
}

void set_core_display_time_delay_to_poweroff_clock_app(unsigned char value){ 
  if(value==0) value = 1;
  if(value>240) value = 240;
  core_display_time_delay_to_poweroff_clock_app = value;
}

unsigned char get_core_display_brightness(){return core_display_brightness; }
#ifdef DISPLAY_BACKLIGHT_FADE_CONTROL_ENABLE
  unsigned char get_core_display_brightness_fade(){return core_display_brightness_fade; }
  unsigned char get_core_display_time_delay_to_fade(){return core_display_time_delay_to_fade; }
#endif
unsigned char get_core_display_time_delay_to_poweroff(){return core_display_time_delay_to_poweroff; }
unsigned char get_core_display_time_delay_to_poweroff_clock_app(){return core_display_time_delay_to_poweroff_clock_app; }

/*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
                                  DISPLAY FUNCTIONS
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
unsigned char background_red = 0;
unsigned char background_green = 0;
unsigned char background_blue = 0;

unsigned char contrast_red = 255;
unsigned char contrast_green = 255;
unsigned char contrast_blue = 255;

unsigned char getBackgroundColor_red(){ return background_red;} 
unsigned char getContrastColor_red(){ return contrast_red;} 

unsigned char getBackgroundColor_green(){ return background_green;} 
unsigned char getContrastColor_green(){ return contrast_green;} 

unsigned char getBackgroundColor_blue(){ return background_blue;} 
unsigned char getContrastColor_blue(){ return contrast_blue;} 

void setBackgroundColor(unsigned char r, unsigned char g, unsigned char b){
  background_red    = r;
  background_green  = g;
  background_blue   = b;
} 

void setContrastColor(unsigned char r, unsigned char g, unsigned char b){
  contrast_red    = r;
  contrast_green  = g;
  contrast_blue   = b;
} 

void core_display_poweroff(){
  powerOff_displayDriver();
}

void core_display_poweron(){
  powerOn_displayDriver();
}

void setDrawColor_BackGroundColor(){
  setDrawColor(getBackgroundColor_red(), getBackgroundColor_green(), getBackgroundColor_blue());
}

void setDrawColor_ContrastColor(){
  setDrawColor(getContrastColor_red(), getContrastColor_green(), getContrastColor_blue());
}

//////////////////////////////////////////////////
// Function needed for CubOS

static const unsigned char font_cubos[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x3E, 0x5B, 0x4F, 0x5B, 0x3E,
  0x3E, 0x6B, 0x4F, 0x6B, 0x3E,
  0x1C, 0x3E, 0x7C, 0x3E, 0x1C,
  0x18, 0x3C, 0x7E, 0x3C, 0x18,
  0x1C, 0x57, 0x7D, 0x57, 0x1C,
  0x1C, 0x5E, 0x7F, 0x5E, 0x1C,
  0x00, 0x18, 0x3C, 0x18, 0x00,
  0xFF, 0xE7, 0xC3, 0xE7, 0xFF,
  0x00, 0x18, 0x24, 0x18, 0x00,
  0xFF, 0xE7, 0xDB, 0xE7, 0xFF,
  0x30, 0x48, 0x3A, 0x06, 0x0E,
  0x26, 0x29, 0x79, 0x29, 0x26,
  0x40, 0x7F, 0x05, 0x05, 0x07,
  0x40, 0x7F, 0x05, 0x25, 0x3F,
  0x5A, 0x3C, 0xE7, 0x3C, 0x5A,
  0x7F, 0x3E, 0x1C, 0x1C, 0x08,
  0x08, 0x1C, 0x1C, 0x3E, 0x7F,
  0x14, 0x22, 0x7F, 0x22, 0x14,
  0x5F, 0x5F, 0x00, 0x5F, 0x5F,
  0x06, 0x09, 0x7F, 0x01, 0x7F,
  0x00, 0x66, 0x89, 0x95, 0x6A,
  0x60, 0x60, 0x60, 0x60, 0x60,
  0x94, 0xA2, 0xFF, 0xA2, 0x94,
  0x08, 0x04, 0x7E, 0x04, 0x08,
  0x10, 0x20, 0x7E, 0x20, 0x10,
  0x08, 0x08, 0x2A, 0x1C, 0x08,
  0x08, 0x1C, 0x2A, 0x08, 0x08,
  0x1E, 0x10, 0x10, 0x10, 0x10,
  0x0C, 0x1E, 0x0C, 0x1E, 0x0C,
  0x30, 0x38, 0x3E, 0x38, 0x30,
  0x06, 0x0E, 0x3E, 0x0E, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x5F, 0x00, 0x00,
  0x00, 0x07, 0x00, 0x07, 0x00,
  0x14, 0x7F, 0x14, 0x7F, 0x14,
  0x24, 0x2A, 0x7F, 0x2A, 0x12,
  0x23, 0x13, 0x08, 0x64, 0x62,
  0x36, 0x49, 0x56, 0x20, 0x50,
  0x00, 0x08, 0x07, 0x03, 0x00,
  0x00, 0x1C, 0x22, 0x41, 0x00,
  0x00, 0x41, 0x22, 0x1C, 0x00,
  0x2A, 0x1C, 0x7F, 0x1C, 0x2A,
  0x08, 0x08, 0x3E, 0x08, 0x08,
  0x00, 0x80, 0x70, 0x30, 0x00,
  0x08, 0x08, 0x08, 0x08, 0x08,
  0x00, 0x00, 0x60, 0x60, 0x00,
  0x20, 0x10, 0x08, 0x04, 0x02,
  0x3E, 0x51, 0x49, 0x45, 0x3E,
  0x00, 0x42, 0x7F, 0x40, 0x00,
  0x72, 0x49, 0x49, 0x49, 0x46,
  0x21, 0x41, 0x49, 0x4D, 0x33,
  0x18, 0x14, 0x12, 0x7F, 0x10,
  0x27, 0x45, 0x45, 0x45, 0x39,
  0x3C, 0x4A, 0x49, 0x49, 0x31,
  0x41, 0x21, 0x11, 0x09, 0x07,
  0x36, 0x49, 0x49, 0x49, 0x36,
  0x46, 0x49, 0x49, 0x29, 0x1E,
  0x00, 0x00, 0x14, 0x00, 0x00,
  0x00, 0x40, 0x34, 0x00, 0x00,
  0x00, 0x08, 0x14, 0x22, 0x41,
  0x14, 0x14, 0x14, 0x14, 0x14,
  0x00, 0x41, 0x22, 0x14, 0x08,
  0x02, 0x01, 0x59, 0x09, 0x06,
  0x3E, 0x41, 0x5D, 0x59, 0x4E,
  0x7C, 0x12, 0x11, 0x12, 0x7C,
  0x7F, 0x49, 0x49, 0x49, 0x36,
  0x3E, 0x41, 0x41, 0x41, 0x22,
  0x7F, 0x41, 0x41, 0x41, 0x3E,
  0x7F, 0x49, 0x49, 0x49, 0x41,
  0x7F, 0x09, 0x09, 0x09, 0x01,
  0x3E, 0x41, 0x41, 0x51, 0x73,
  0x7F, 0x08, 0x08, 0x08, 0x7F,
  0x00, 0x41, 0x7F, 0x41, 0x00,
  0x20, 0x40, 0x41, 0x3F, 0x01,
  0x7F, 0x08, 0x14, 0x22, 0x41,
  0x7F, 0x40, 0x40, 0x40, 0x40,
  0x7F, 0x02, 0x1C, 0x02, 0x7F,
  0x7F, 0x04, 0x08, 0x10, 0x7F,
  0x3E, 0x41, 0x41, 0x41, 0x3E,
  0x7F, 0x09, 0x09, 0x09, 0x06,
  0x3E, 0x41, 0x51, 0x21, 0x5E,
  0x7F, 0x09, 0x19, 0x29, 0x46,
  0x26, 0x49, 0x49, 0x49, 0x32,
  0x03, 0x01, 0x7F, 0x01, 0x03,
  0x3F, 0x40, 0x40, 0x40, 0x3F,
  0x1F, 0x20, 0x40, 0x20, 0x1F,
  0x3F, 0x40, 0x38, 0x40, 0x3F,
  0x63, 0x14, 0x08, 0x14, 0x63,
  0x03, 0x04, 0x78, 0x04, 0x03,
  0x61, 0x59, 0x49, 0x4D, 0x43,
  0x00, 0x7F, 0x41, 0x41, 0x41,
  0x02, 0x04, 0x08, 0x10, 0x20,
  0x00, 0x41, 0x41, 0x41, 0x7F,
  0x04, 0x02, 0x01, 0x02, 0x04,
  0x40, 0x40, 0x40, 0x40, 0x40,
  0x00, 0x03, 0x07, 0x08, 0x00,
  0x20, 0x54, 0x54, 0x78, 0x40,
  0x7F, 0x28, 0x44, 0x44, 0x38,
  0x38, 0x44, 0x44, 0x44, 0x28,
  0x38, 0x44, 0x44, 0x28, 0x7F,
  0x38, 0x54, 0x54, 0x54, 0x18,
  0x00, 0x08, 0x7E, 0x09, 0x02,
  0x18, 0xA4, 0xA4, 0x9C, 0x78,
  0x7F, 0x08, 0x04, 0x04, 0x78,
  0x00, 0x44, 0x7D, 0x40, 0x00,
  0x20, 0x40, 0x40, 0x3D, 0x00,
  0x7F, 0x10, 0x28, 0x44, 0x00,
  0x00, 0x41, 0x7F, 0x40, 0x00,
  0x7C, 0x04, 0x78, 0x04, 0x78,
  0x7C, 0x08, 0x04, 0x04, 0x78,
  0x38, 0x44, 0x44, 0x44, 0x38,
  0xFC, 0x18, 0x24, 0x24, 0x18,
  0x18, 0x24, 0x24, 0x18, 0xFC,
  0x7C, 0x08, 0x04, 0x04, 0x08,
  0x48, 0x54, 0x54, 0x54, 0x24,
  0x04, 0x04, 0x3F, 0x44, 0x24,
  0x3C, 0x40, 0x40, 0x20, 0x7C,
  0x1C, 0x20, 0x40, 0x20, 0x1C,
  0x3C, 0x40, 0x30, 0x40, 0x3C,
  0x44, 0x28, 0x10, 0x28, 0x44,
  0x4C, 0x90, 0x90, 0x90, 0x7C,
  0x44, 0x64, 0x54, 0x4C, 0x44,
  0x00, 0x08, 0x36, 0x41, 0x00,
  0x00, 0x00, 0x77, 0x00, 0x00,
  0x00, 0x41, 0x36, 0x08, 0x00,
  0x02, 0x01, 0x02, 0x04, 0x02,
  0x3C, 0x26, 0x23, 0x26, 0x3C,
  0x1E, 0xA1, 0xA1, 0x61, 0x12,
  0x3A, 0x40, 0x40, 0x20, 0x7A,
  0x38, 0x54, 0x54, 0x55, 0x59,
  0x21, 0x55, 0x55, 0x79, 0x41,
  0x22, 0x54, 0x54, 0x78, 0x42, // a-umlaut
  0x21, 0x55, 0x54, 0x78, 0x40,
  0x20, 0x54, 0x55, 0x79, 0x40,
  0x0C, 0x1E, 0x52, 0x72, 0x12,
  0x39, 0x55, 0x55, 0x55, 0x59,
  0x39, 0x54, 0x54, 0x54, 0x59,
  0x39, 0x55, 0x54, 0x54, 0x58,
  0x00, 0x00, 0x45, 0x7C, 0x41,
  0x00, 0x02, 0x45, 0x7D, 0x42,
  0x00, 0x01, 0x45, 0x7C, 0x40,
  0x7D, 0x12, 0x11, 0x12, 0x7D, // A-umlaut
  0xF0, 0x28, 0x25, 0x28, 0xF0,
  0x7C, 0x54, 0x55, 0x45, 0x00,
  0x20, 0x54, 0x54, 0x7C, 0x54,
  0x7C, 0x0A, 0x09, 0x7F, 0x49,
  0x32, 0x49, 0x49, 0x49, 0x32,
  0x3A, 0x44, 0x44, 0x44, 0x3A, // o-umlaut
  0x32, 0x4A, 0x48, 0x48, 0x30,
  0x3A, 0x41, 0x41, 0x21, 0x7A,
  0x3A, 0x42, 0x40, 0x20, 0x78,
  0x00, 0x9D, 0xA0, 0xA0, 0x7D,
  0x3D, 0x42, 0x42, 0x42, 0x3D, // O-umlaut
  0x3D, 0x40, 0x40, 0x40, 0x3D,
  0x3C, 0x24, 0xFF, 0x24, 0x24,
  0x48, 0x7E, 0x49, 0x43, 0x66,
  0x2B, 0x2F, 0xFC, 0x2F, 0x2B,
  0xFF, 0x09, 0x29, 0xF6, 0x20,
  0xC0, 0x88, 0x7E, 0x09, 0x03,
  0x20, 0x54, 0x54, 0x79, 0x41,
  0x00, 0x00, 0x44, 0x7D, 0x41,
  0x30, 0x48, 0x48, 0x4A, 0x32,
  0x38, 0x40, 0x40, 0x22, 0x7A,
  0x00, 0x7A, 0x0A, 0x0A, 0x72,
  0x7D, 0x0D, 0x19, 0x31, 0x7D,
  0x26, 0x29, 0x29, 0x2F, 0x28,
  0x26, 0x29, 0x29, 0x29, 0x26,
  0x30, 0x48, 0x4D, 0x40, 0x20,
  0x38, 0x08, 0x08, 0x08, 0x08,
  0x08, 0x08, 0x08, 0x08, 0x38,
  0x2F, 0x10, 0xC8, 0xAC, 0xBA,
  0x2F, 0x10, 0x28, 0x34, 0xFA,
  0x00, 0x00, 0x7B, 0x00, 0x00,
  0x08, 0x14, 0x2A, 0x14, 0x22,
  0x22, 0x14, 0x2A, 0x14, 0x08,
  0x55, 0x00, 0x55, 0x00, 0x55, // #176 (25% block) missing in old code
  0xAA, 0x55, 0xAA, 0x55, 0xAA, // 50% block
  0xFF, 0x55, 0xFF, 0x55, 0xFF, // 75% block
  0x00, 0x00, 0x00, 0xFF, 0x00,
  0x10, 0x10, 0x10, 0xFF, 0x00,
  0x14, 0x14, 0x14, 0xFF, 0x00,
  0x10, 0x10, 0xFF, 0x00, 0xFF,
  0x10, 0x10, 0xF0, 0x10, 0xF0,
  0x14, 0x14, 0x14, 0xFC, 0x00,
  0x14, 0x14, 0xF7, 0x00, 0xFF,
  0x00, 0x00, 0xFF, 0x00, 0xFF,
  0x14, 0x14, 0xF4, 0x04, 0xFC,
  0x14, 0x14, 0x17, 0x10, 0x1F,
  0x10, 0x10, 0x1F, 0x10, 0x1F,
  0x14, 0x14, 0x14, 0x1F, 0x00,
  0x10, 0x10, 0x10, 0xF0, 0x00,
  0x00, 0x00, 0x00, 0x1F, 0x10,
  0x10, 0x10, 0x10, 0x1F, 0x10,
  0x10, 0x10, 0x10, 0xF0, 0x10,
  0x00, 0x00, 0x00, 0xFF, 0x10,
  0x10, 0x10, 0x10, 0x10, 0x10,
  0x10, 0x10, 0x10, 0xFF, 0x10,
  0x00, 0x00, 0x00, 0xFF, 0x14,
  0x00, 0x00, 0xFF, 0x00, 0xFF,
  0x00, 0x00, 0x1F, 0x10, 0x17,
  0x00, 0x00, 0xFC, 0x04, 0xF4,
  0x14, 0x14, 0x17, 0x10, 0x17,
  0x14, 0x14, 0xF4, 0x04, 0xF4,
  0x00, 0x00, 0xFF, 0x00, 0xF7,
  0x14, 0x14, 0x14, 0x14, 0x14,
  0x14, 0x14, 0xF7, 0x00, 0xF7,
  0x14, 0x14, 0x14, 0x17, 0x14,
  0x10, 0x10, 0x1F, 0x10, 0x1F,
  0x14, 0x14, 0x14, 0xF4, 0x14,
  0x10, 0x10, 0xF0, 0x10, 0xF0,
  0x00, 0x00, 0x1F, 0x10, 0x1F,
  0x00, 0x00, 0x00, 0x1F, 0x14,
  0x00, 0x00, 0x00, 0xFC, 0x14,
  0x00, 0x00, 0xF0, 0x10, 0xF0,
  0x10, 0x10, 0xFF, 0x10, 0xFF,
  0x14, 0x14, 0x14, 0xFF, 0x14,
  0x10, 0x10, 0x10, 0x1F, 0x00,
  0x00, 0x00, 0x00, 0xF0, 0x10,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
  0xFF, 0xFF, 0xFF, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xFF, 0xFF,
  0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
  0x38, 0x44, 0x44, 0x38, 0x44,
  0xFC, 0x4A, 0x4A, 0x4A, 0x34, // sharp-s or beta
  0x7E, 0x02, 0x02, 0x06, 0x06,
  0x02, 0x7E, 0x02, 0x7E, 0x02,
  0x63, 0x55, 0x49, 0x41, 0x63,
  0x38, 0x44, 0x44, 0x3C, 0x04,
  0x40, 0x7E, 0x20, 0x1E, 0x20,
  0x06, 0x02, 0x7E, 0x02, 0x02,
  0x99, 0xA5, 0xE7, 0xA5, 0x99,
  0x1C, 0x2A, 0x49, 0x2A, 0x1C,
  0x4C, 0x72, 0x01, 0x72, 0x4C,
  0x30, 0x4A, 0x4D, 0x4D, 0x30,
  0x30, 0x48, 0x78, 0x48, 0x30,
  0xBC, 0x62, 0x5A, 0x46, 0x3D,
  0x3E, 0x49, 0x49, 0x49, 0x00,
  0x7E, 0x01, 0x01, 0x01, 0x7E,
  0x2A, 0x2A, 0x2A, 0x2A, 0x2A,
  0x44, 0x44, 0x5F, 0x44, 0x44,
  0x40, 0x51, 0x4A, 0x44, 0x40,
  0x40, 0x44, 0x4A, 0x51, 0x40,
  0x00, 0x00, 0xFF, 0x01, 0x03,
  0xE0, 0x80, 0xFF, 0x00, 0x00,
  0x08, 0x08, 0x6B, 0x6B, 0x08,
  0x36, 0x12, 0x36, 0x24, 0x36,
  0x06, 0x0F, 0x09, 0x0F, 0x06,
  0x00, 0x00, 0x18, 0x18, 0x00,
  0x00, 0x00, 0x10, 0x10, 0x00,
  0x30, 0x40, 0xFF, 0x01, 0x01,
  0x00, 0x1F, 0x01, 0x01, 0x1E,
  0x00, 0x19, 0x1D, 0x17, 0x12,
  0x00, 0x3C, 0x3C, 0x3C, 0x3C,
  0x00, 0x00, 0x00, 0x00, 0x00  // #255 NBSP
};

void setStr(char * dString, int x, int y, unsigned char fontSize){
  
  #ifdef DEBUG_CORE_DISPLAY
    debug("DEBUG_CORE_DISPLAY: dString: " + String(dString));
    debug("DEBUG_CORE_DISPLAY: x: " + String(x));
    debug("DEBUG_CORE_DISPLAY: y: " + String(y));
    debug("DEBUG_CORE_DISPLAY: fontSize: " + String(fontSize));
  #endif

  if(DRAW_LIMITS_Enabled){
    //if out of screen
    if(x>DRAW_LIMITS_right||y>DRAW_LIMITS_bottom) return;
    if(y<DRAW_LIMITS_top - fontSize*FONT_CHAR_WIDTH-1) return;
  }

  int string_length = strlen(dString);
  for (int i=0; i<string_length; i++){

    for (unsigned char char_part=0; char_part<5; char_part++){
      const unsigned char_part_element = pgm_read_byte(&font_cubos[dString[i] *5 + char_part]);

      for (unsigned char bit=0; bit<8; bit++){

        if (getBitInByte(char_part_element, bit)){
          #ifdef USE_PRIMITIVE_HARDWARE_DRAW_ACCELERATION
            unsigned char pixelsInLine=0;
            for (unsigned char i=bit+1; i<8; i++){
              if(getBitInByte(char_part_element, i)) {
                pixelsInLine++;
              }else{
                break;
              }
            }
          #endif

          if(fontSize>1){
            int x_r = x + char_part*fontSize + i*FONT_CHAR_WIDTH*fontSize;
            int y_r = y + bit*fontSize;

            #ifdef USE_PRIMITIVE_HARDWARE_DRAW_ACCELERATION
              if(pixelsInLine>0){
                drawRect(x_r, y_r + (pixelsInLine)*fontSize, x_r + fontSize - 1, y_r - fontSize+1, true);
                bit+=pixelsInLine;
              }else{
                drawRect(x_r, y_r, x_r + fontSize - 1, y_r - fontSize+1, true);
              }
            #else
              drawRect(x_r, y_r, x_r + fontSize - 1, y_r - fontSize+1, true);
            #endif
            
          }else{
            #ifdef USE_PRIMITIVE_HARDWARE_DRAW_ACCELERATION
              

              if(pixelsInLine>0){
                driver_display_drawFastVLine(x +  char_part + i*FONT_CHAR_WIDTH, y + bit, pixelsInLine);
                bit+=pixelsInLine;
              }else{
                drawPixel(x + char_part + i*FONT_CHAR_WIDTH, y + bit);
              }
            #else
              drawPixel(x + char_part + i*FONT_CHAR_WIDTH, y + bit);
            #endif
          }
        }
      }
    }

  }
}

void drawString(char * dString, int x, int y){
  setStr(dString, x, y, FONT_SIZE_DEFAULT);
}

void drawString(char * dString, int x, int y, unsigned char fontSize){
  setStr(dString, x, y, fontSize);
}

void drawString(int val, int x, int y){
  char str[16];
  sprintf(str, "%d", val);
  drawString( str, 0, y);
}

void drawString(String dString, int x, int y, unsigned char fontSize){
  int str_len = dString.length() + 1;
  char element_value[str_len];
  dString.toCharArray(element_value, str_len);

  drawString(element_value, x, y, fontSize);
}

void drawString(String dString, int x, int y){
  drawString(dString, x, y, FONT_SIZE_DEFAULT);
}

void drawString_centered(char * dString, int y){
  drawString(dString, (SCREEN_WIDTH - strlen(dString)*FONT_CHAR_WIDTH)/2, y);  
}

void clearString(char * dString, int x, int y, unsigned char fontSize){
  #ifdef USE_PRIMITIVE_HARDWARE_DRAW_ACCELERATION
    if(fontSize==0) fontSize = FONT_SIZE_DEFAULT;
    int string_length = strlen(dString);
    drawRect(x,y-fontSize, x+string_length*fontSize*FONT_CHAR_WIDTH, y+fontSize*(FONT_CHAR_HEIGHT-1),true);
  #else
    setStr(dString, x, y, fontSize);
  #endif
}
void clearString(char * dString, int x, int y){
  clearString(dString, x, y, FONT_SIZE_DEFAULT);
}

void clearString_centered(char * dString, int y){
  clearString(dString, (SCREEN_WIDTH - strlen(dString)*FONT_CHAR_WIDTH)/2, y, FONT_SIZE_DEFAULT);  
}

void clearString(String dString, int x, int y, unsigned char fontSize){
  int str_len = dString.length() + 1;
  char element_value[str_len];
  dString.toCharArray(element_value, str_len);

  clearString(element_value, x, y, fontSize);
}

void clearString(String dString, int x, int y){
  clearString(dString, x, y, FONT_SIZE_DEFAULT);
}

void drawString_centered(char * dString, int x, int y){
  drawString(dString, x - strlen(dString)*FONT_CHAR_WIDTH/2, y);  
}

void clearString_centered(String dString, int x, int y, unsigned char fontSize){
  clearString(dString, x - dString.length()*fontSize*FONT_CHAR_WIDTH/2 + fontSize/2, y, fontSize);  
}

void clearString_centered(char * dString, int x, int y){
  clearString(dString, x - strlen(dString)*FONT_CHAR_WIDTH/2, y, FONT_SIZE_DEFAULT);    
}

void drawString_centered(String dString, int y){
  drawString(dString, (SCREEN_WIDTH - dString.length()*FONT_CHAR_WIDTH)/2, y);  
}

void drawString_centered(String dString, int x, int y){
  drawString(dString, x - dString.length()*FONT_CHAR_WIDTH/2, y);  
}

void drawString_centered(String dString, int x, int y, unsigned char fontSize){
  drawString(dString, x - dString.length()*FONT_CHAR_WIDTH*fontSize/2 + fontSize/2, y, fontSize);  
}

void drawString_rightAlign(String dString, int x, int y){
  drawString(dString, x - dString.length()*FONT_CHAR_WIDTH, y);  
}

void core_display_setup(){
  #ifdef FRAMEBUFFER_ENABLE

    #ifdef FRAMEBUFFER_TWIN_FULL

      #ifdef FRAMEBUFFER_PSRAM
        FRAMEBUFFER_currentFrame  = (FRAMEBUFFER_TYPE *)ps_malloc(FRAMEBUFFER_SIZE);
        FRAMEBUFFER_newFrame      = (FRAMEBUFFER_TYPE *)ps_malloc(FRAMEBUFFER_SIZE);
      #else
        FRAMEBUFFER_currentFrame  = (FRAMEBUFFER_TYPE *)malloc(FRAMEBUFFER_SIZE);
        FRAMEBUFFER_newFrame      = (FRAMEBUFFER_TYPE *)malloc(FRAMEBUFFER_SIZE);
      #endif
    #endif
  #endif

  driver_display_setup();
  #ifdef FRAMEBUFFER_ENABLE
    FRAMEBUFFER_reset();
  #endif
}

#ifdef DEBUG_FPS
  long fps_last_milllis = millis();
#endif

void core_display_loop(){

  #ifdef DEBUG_FPS
    //delay(16);
    if(getFRAMEBUFFER_isChanged()){
      
      long delta_ms = millis() - fps_last_milllis;
      float fps = (float)1000.0/((float)delta_ms);
      debug("DEBUG_FPS: fps " + String(fps));
    }
    
    fps_last_milllis = millis();
  #endif
  
  #ifdef FRAMEBUFFER_ENABLE
    #ifdef FRAMEBUFFER_TWIN_FULL
      if(getFRAMEBUFFER_isChanged()){
        bool shown = false;

        for(int y=0; y<SCREEN_HEIGHT; y++){
          if(FRAMEBUFFER_pixelChanged_y[y]){
            for(int x=0; x<SCREEN_WIDTH; x++){
              if(FRAMEBUFFER_pixelChanged_x[x]){
                long position = y * (SCREEN_WIDTH-1) + x;  
                if(FRAMEBUFFER_pixelChanged[position]==true){
                  uint16_t newColor = FRAMEBUFFER_new_getPixel(position);
                  if(FRAMEBUFFER_current_getPixel(position)!=newColor){
                    display_driver_setPixel(x, y, newColor);
                    FRAMEBUFFER_current_setPixel(position, newColor);
                    FRAMEBUFFER_pixelChanged[position] = false;
                  }
                }
              }
            }
          }
        }

        for(int x=0; x<SCREEN_WIDTH; x++){ FRAMEBUFFER_pixelChanged_x[x] = false;}
        for(int y=0; y<SCREEN_HEIGHT; y++){ FRAMEBUFFER_pixelChanged_y[y] = false;}

        //FRAMEBUFFER_pixelChanged[239 + (SCREEN_WIDTH-1)*239] = true;
        //FRAMEBUFFER_new_setPixel(239,239, 65535);
      }
      setFRAMEBUFFER_isChanged(false);
    #endif
  #endif
  
}

void drawPixel(int x, int y){
  if(DRAW_LIMITS_Enabled){
    //if out of screen
    if(x>=DRAW_LIMITS_right-1 || x<=DRAW_LIMITS_left+1 || y<=DRAW_LIMITS_top+1 || y>=DRAW_LIMITS_bottom-1) return;
  }
    
  #ifdef FRAMEBUFFER_ENABLE
    if(x>=SCREEN_WIDTH) return;
    #ifdef FRAMEBUFFER_TWIN_FULL
      FRAMEBUFFER_new_setPixel(x, y, getDrawColor());

      long position = x + (SCREEN_WIDTH-1)*y;
      if(position>=0 && position<=SCREEN_HEIGHT*SCREEN_WIDTH) FRAMEBUFFER_pixelChanged[position] = true;

      FRAMEBUFFER_pixelChanged_x[x] = true;
      FRAMEBUFFER_pixelChanged_y[y] = true;

      if(!getFRAMEBUFFER_isChanged()) setFRAMEBUFFER_isChanged(true);
      
      //display_driver_setPixel(x, y);
    #endif
  #else
    display_driver_setPixel(x, y);
  #endif
  
}

void drawLine(int x0, int y0, int x1, int y1){

  #ifdef USE_PRIMITIVE_HARDWARE_DRAW_ACCELERATION
    if(x0==x1){
      driver_display_drawFastVLine(x0, min(y0, y1), abs(y0-y1));
      return;
    }

    if(y0==y1){
      driver_display_drawFastHLine(min(x0, x1), y0, abs(x0-x1));
      return;
    }
  #endif

  int dy = y1 - y0; // Difference between y0 and y1
  int dx = x1 - x0; // Difference between x0 and x1
  int stepx, stepy;

  if (dy < 0)
  {
    dy = -dy;
    stepy = -1;
  }
  else
    stepy = 1;

  if (dx < 0)
  {
    dx = -dx;
    stepx = -1;
  }
  else
    stepx = 1;

  dy <<= 1; // dy is now 2*dy
  dx <<= 1; // dx is now 2*dx
  drawPixel(x0, y0); // Draw the first pixel.

  if (dx > dy) 
  {
    int fraction = dy - (dx >> 1);
    while (x0 != x1)
    {
      if (fraction >= 0)
      {
        y0 += stepy;
        fraction -= dx;
      }
      x0 += stepx;
      fraction += dy;
      drawPixel(x0, y0);
    }
  }
  else
  {
    int fraction = dx - (dy >> 1);
    while (y0 != y1)
    {
      if (fraction >= 0)
      {
        x0 += stepx;
        fraction -= dy;
      }
      y0 += stepy;
      fraction += dx;
      drawPixel(x0, y0);
    }
  }
}

void drawRect(int x0, int y0, int x1, int y1){
  drawRect(x0, y0, x1, y1, false);
}

void drawRect(int x0, int y0, int x1, int y1, bool fill){
  // check if the rectangle is to be filled
  if (fill == 1)
  {
    #ifdef USE_PRIMITIVE_HARDWARE_DRAW_ACCELERATION
      driver_display_fillRect(min(x0, x1), min(y0, y1), abs(x0-x1), abs(y0-y1));
      return;
    #else
      int xDiff;

      if(x0 > x1)
        xDiff = x0 - x1; //Find the difference between the x vars
      else
        xDiff = x1 - x0;

      while(xDiff >= 0)
      {
        drawLine(x0, y0, x0, y1);

        if(x0 > x1)
          x0--;
        else
          x0++;

        xDiff--;
      }
    #endif
  }else{
    // best way to draw an unfilled rectangle is to draw four lines
    drawLine(x0, y0, x1, y0);
    drawLine(x0, y1, x1, y1);
    drawLine(x0, y0, x0, y1);
    drawLine(x1, y0, x1, y1);
  }
}

// The Bresenham algorithm
void drawCircle(int x0, int y0, int radius, bool fill){
	int x = 0;
	int y = radius;
	int delta = 1 - 2 * radius;
	int error = 0;
	while(y >= 0) {
    if(fill){
      drawLine(x0 + x, y0 + y, x0 + x, y0);
      drawLine(x0 + x, y0 - y, x0 + x, y0);
      drawLine(x0 - x, y0 + y, x0 - x, y0);
      drawLine(x0 - x, y0 - y, x0 - x, y0);
    }else{
      drawPixel(x0 + x, y0 + y);
      drawPixel(x0 + x, y0 - y);
      drawPixel(x0 - x, y0 + y);
      drawPixel(x0 - x, y0 - y);
    }

		error = 2 * (delta + y) - 1;
		if(delta < 0 && error <= 0) {
			++x;
			delta += 2 * x + 1;
			continue;
		}
		error = 2 * (delta - x) - 1;
		if(delta > 0 && error > 0) {
			--y;
			delta += 1 - 2 * y;
			continue;
		}
		++x;
		delta += 2 * (x - y);
		--y;
	}
}


void drawCircle(int x0, int y0, int radius){
  drawCircle(x0, y0, radius, false);
}

/*
void drawArc_fade(int x0, int y0, int radius, int drawFromAngle, int drawToAngle, uint16_t width, byte r, byte g, byte b, byte r_fade, byte g_fade, byte b_fade){
  float start_angle = DEG_TO_RAD*drawFromAngle;
  float end_angle = DEG_TO_RAD*drawToAngle;
  float r = radius;

  float step = 1.0/((float)radius*1.6); // 1.6 imperical value
  for(float i = start_angle; i < end_angle; i = i + step)
  {
    float t_cos = cos(i);
    float t_sin = sin(i);

    setDrawColor(r_fade, g_fade, b_fade);
    drawPixel(x0 + t_cos * (r-0.8), y0 + t_sin * (r-0.8));
    drawPixel(x0 + t_cos * (r-width+0.8), y0 + t_sin * (r-width+0.8));

    setDrawColor(r, g, b);
    for(float radius_i=r-0.8; radius_i>=r-width+0.8; radius_i-=0.8){ // 0.8 imperical value
      drawPixel(x0 + t_cos * radius_i, y0 + t_sin * radius_i);
    }
  }
}
*/

void drawArc(int x0, int y0, int radius, int drawFromAngle, int drawToAngle, uint16_t width, bool drawFading){
  double start_angle = DEG_TO_RAD*drawFromAngle;
  double end_angle = DEG_TO_RAD*drawToAngle;
  double r = radius;

  double step = 1.0/((double)radius*1.6); // 1.6 imperical value

  unsigned char draw_red    = get_current_red();
  unsigned char draw_green  = get_current_green();
  unsigned char draw_blue   = get_current_blue();

  for(double i = start_angle; i < end_angle; i = i + step){
    double t_cos = cos(i);
    double t_sin = sin(i);
    if(!drawFading){
      for(double radius_i=r; radius_i>=r-width; radius_i-=0.8){ // 0.8 imperical value
        drawPixel(round(x0 + t_cos * radius_i), round(y0 + t_sin * radius_i));
      }
    }else{
      
      setDrawColor(draw_red, draw_green, draw_blue);

      //for(double radius_i=r-0.4; radius_i>=r-width+0.4; radius_i-=0.8){ // 0.8 imperical value
      for(double radius_i=r; radius_i>=r-width; radius_i-=0.8){ // 0.8 imperical value
        drawPixel(round(x0 + t_cos * radius_i), round(y0 + t_sin * radius_i));
      }

      setDrawColor( 
        (draw_red    + getBackgroundColor_red())/3, 
        (draw_green  + getBackgroundColor_green())/3, 
        (draw_blue   + getBackgroundColor_blue())/3
      );

      drawPixel(round(x0 + t_cos * (r)), round(y0 + t_sin * (r)));
      drawPixel(round(x0 + t_cos * (r-width)), round(y0 + t_sin * (r-width)));

      setDrawColor( 
        (draw_red    + getBackgroundColor_red())/2, 
        (draw_green  + getBackgroundColor_green())/2, 
        (draw_blue   + getBackgroundColor_blue())/2
      );

      drawPixel(round(x0 + t_cos * (r-0.4)), round(y0 + t_sin * (r-0.4)));
      drawPixel(round(x0 + t_cos * (r-width+0.8)), round(y0 + t_sin * (r-width+0.8)));

    }
    
  }
}

void drawArc(int x0, int y0, int radius, int drawFromAngle, int drawToAngle, uint16_t width){
  drawArc(x0, y0, radius, drawFromAngle, drawToAngle, width, false);
}

// System function
int treangle_area(int x0, int y0, int x1, int y1, int x2, int y2){
   return abs((x0 - x2)*(y1 - y2) + (x1-x2)*(y2-y0));
}

void drawRect_custom( int x0, int y0, int x1, int y1, int x2, int y2, int x3, int y3, bool fill){
  if (fill){
    // all angles should be less thаn 180 degrees
    const int min_x = min(min(x0, x1), min(x2, x3));
    const int max_x = max(max(x0, x1), max(x2, x3));
    const int min_y = min(min(y0, y1), min(y2, y3));
    const int max_y = max(max(y0, y1), max(y2, y3));

    for (int i_x=min_x; i_x<max_x; i_x++){
      for (int i_y=min_y; i_y<max_y; i_y++){

        if (
          treangle_area(x0, y0, x1, y1, x2, y2) ==
          treangle_area(x0, y0, x1, y1, i_x, i_y) + 
          treangle_area(x0, y0, x2, y2, i_x, i_y) + 
          treangle_area(x2, y2, x1, y1, i_x, i_y)
          || 
          treangle_area(x0, y0, x3, y3, x2, y2) ==
          treangle_area(x0, y0, x3, y3, i_x, i_y) + 
          treangle_area(x0, y0, x2, y2, i_x, i_y) + 
          treangle_area(x2, y2, x3, y3, i_x, i_y)
        ){
          drawPixel(i_x, i_y);
        }
      }
    }    
  }else{
    drawLine(x0, y0, x1, y1);
    drawLine(x1, y1, x2, y2);
    drawLine(x2, y2, x3, y3);
    drawLine(x3, y3, x0, y0);
  }
}

void drawImage(bool draw, const unsigned char* data, int x, int y){
    /*
    DRAW_LIMITS_Enabled
    DRAW_LIMITS_top
    DRAW_LIMITS_bottom
    DRAW_LIMITS_left
    DRAW_LIMITS_right
    */

  if(DRAW_LIMITS_Enabled){
    //if out of screen
    if(x>DRAW_LIMITS_right||y>DRAW_LIMITS_bottom) return;
  }
  /*
  ################################################
  #                                              #
  #               NEW IMAGE FORMAT               #
  #                                              #
  ################################################
  */

  long readPosition = 0;
  //int data_size = sizeof(data)/sizeof(data[0]);
  unsigned char currentBbyte;


  int image_type = readRawParam(data, readPosition);    // type of image
  int image_wigth = readRawParam(data, readPosition);   // width
  int image_height = readRawParam(data, readPosition);  // height

  if(DRAW_LIMITS_Enabled){
    //if out of screen
    if(x+image_wigth<DRAW_LIMITS_left||y+image_height<DRAW_LIMITS_top) return;
  }

  if(!draw){
    setDrawColor(getBackgroundColor_red(), getBackgroundColor_green(), getBackgroundColor_blue());
    #ifdef USE_PRIMITIVE_HARDWARE_DRAW_ACCELERATION
      drawRect(x, y, x+image_wigth, y+image_height, true);
      return;
    #endif
  }

  int icon_x=0;
  int icon_y=0;

  if(image_type==0x01){
    
    while(1){
      unsigned char color_var = readRawChar(data, readPosition);
      
      if (color_var==0x04){ // new color layout
    
        unsigned char red    = readRawChar(data, readPosition); 
        unsigned char green  = readRawChar(data, readPosition); 
        unsigned char blue   = readRawChar(data, readPosition); 

        if(draw){
          setDrawColor(red, green, blue);
        }
        //else setDrawColor(getBackgroundColor_red(), getBackgroundColor_green(), getBackgroundColor_blue());
        
        icon_x = 0;
        icon_y = 0;

        for (int readingBbyte=0; readingBbyte<(image_wigth*image_height%8==0?image_wigth*image_height/8:image_wigth*image_height/8+1); readingBbyte++){
          //if(data_size<=readPosition) break;
          currentBbyte = readRawChar(data, readPosition);
          //debug("Got color drawing " + String(currentBbyte));

          if(currentBbyte!=0x00 && currentBbyte!=0xFF){
            for (unsigned char d=0; d<8; d++){
              if (icon_x>=image_wigth){
                icon_y+=icon_x/image_wigth;
                icon_x %= image_wigth;
              }

              //if (currentBbyte&1<<(7-d)) drawPixel(x + icon_x, y + icon_y);
              //if (getBitInByte(currentBbyte, d)) drawPixel(x + icon_x, y + icon_y);
              if (getBitInByte(currentBbyte, 7-d)){
                #ifdef USE_PRIMITIVE_HARDWARE_DRAW_ACCELERATION
                  unsigned char pixelsInARow = 0;
                  if(d!=7){
                    for (unsigned char future_d=d+1; future_d<8; future_d++){
                      if (getBitInByte(currentBbyte, 7-future_d)){
                        pixelsInARow++;
                      } else{
                        break;
                      }
                    }
                  }

                  if(pixelsInARow>1){
                    driver_display_drawFastHLine(x + icon_x, y + icon_y, pixelsInARow);
                    d+=pixelsInARow;
                    icon_x+=pixelsInARow;
                  }else{
                    drawPixel(x + icon_x, y + icon_y);  
                  }
                #else
                  drawPixel(x + icon_x, y + icon_y);
                #endif
              }
              icon_x ++;
            }
          }else if(currentBbyte==0xFF){ // Saving 1ms!!!!

            if (icon_x>=image_wigth){
              icon_y+=icon_x/image_wigth;
              icon_x %= image_wigth;
            }

            drawLine(x + icon_x, y + icon_y, x + icon_x+7, y + icon_y); 
            icon_x+=8;
          }else{ // Saving 1ms!!!!
            icon_x+=8;
          }
        }
        
      }else{
        break;
      } 

    }
      
  #ifdef USE_TYPE2_OF_IMAGES
    }else if(image_type==0x02){
      // TYPE 2
      //image_wigth
      //image_height
      if(draw){
        uint16_t byte1;
        unsigned char byte2;
        for(icon_x=0; icon_x<image_wigth; icon_x++){
          for(icon_y=0; icon_y<image_height; icon_y++){
            byte1 = readRawChar(data, readPosition); 
            byte2 = readRawChar(data, readPosition); 

            uint16_t color = (byte1<<8) + byte2;
          
            //debug(String(byte1));
            //debug(String(byte2));
            //debug(String(color));
            //return;

            setDrawColor(color);
            drawPixel(x + icon_x, y + icon_y);
          }
        }
      }else{
        drawRect(x, y, x+image_wigth, y+image_height, true);
      }
      
  #endif
  }else{
    // Unknow type of image
    

  }

}

void drawImage(const unsigned char* data, int x, int y){
  drawImage(1, data, x, y);
}

bool getBitInByte(unsigned char currentbyte, unsigned char bitNum){
  return currentbyte&1<<(bitNum);
}

//////////////////////////////////////////////////
// For debugging
void drawIntString(long val, int x, int y){  
  char str[14];
  sprintf(str, "%d", val);
  drawString( str, x, y);
}

//////////////////////////////////////////////////
// For debugging
void drawDebugString(int val, int y){  
  drawString(val, 0, y);
}



void core_time_onNewDate(){ 
    // Calling once in a day
    // Clearing all counting data for a day
    #ifdef PEDOMETER_ENABLE
        core_pedometer_newDate();
    #endif

    if(currentAppSetted) currentApp->onEvent(EVENT_ON_DATE_CHANGED, 0, 0);
}

void core_time_onNewMinute(){
    //debug("EVENT_ON_MINUTE_CHANGED!", 10);
    if(currentAppSetted) currentApp->onEvent(EVENT_ON_MINUTE_CHANGED, 0, 0);
}

void core_time_onNewHour(){
    //debug("EVENT_ON_HOUR_CHANGED!", 10);
    if(currentAppSetted) currentApp->onEvent(EVENT_ON_HOUR_CHANGED, 0, 0);
}

long getCurrentSystemTime(){
    #ifdef RTC_ENABLE
        long currentSystemTime =  ((long)core_time_getHours_byte())*60*60 + ((long)core_time_getMinutes_byte())*60 + ((long)core_time_getSeconds_byte());
        return currentSystemTime;
    #else
        return millis()/1000;
    #endif
}

#ifdef RTC_ENABLE
    RTC_DATA_ATTR unsigned char lastDay = 0;
    RTC_DATA_ATTR unsigned char lastHour = 0;
    RTC_DATA_ATTR unsigned char lastMinute = 0;
    
    unsigned long driver_RTC_lastTimeRefresh = 0;
    
    void core_time_settings_lastDay_currentDate(){
        //debug("& & & & & & & Setting current last day: " + String(core_time_getDate()));
        lastDay = core_time_getDate();
        core_time_driver_RTC_refresh(true);
    }
    
    void core_time_driver_RTC_refresh(bool hard){
        if(hard || (millis() - driver_RTC_lastTimeRefresh>=UPDATE_RTC_EVERY)){
            driver_RTC_refresh(hard);
            
            if(core_time_getDate()!=lastDay){
                //debug("!!!!!!!!!!!!!!! CURRENT DATE: " + String(core_time_getDate()));
                //debug("!!!!!!!!!!!!!!! lastDay: " + String(lastDay));

                if(abs(lastDay - core_time_getDate())==1){
                    core_time_onNewDate();
                }
                
                lastDay = core_time_getDate();
            }

            if(core_time_getMinutes_byte()!=lastMinute){
                core_time_onNewMinute();
                lastMinute = core_time_getMinutes_byte();
            }

            if(core_time_getHours_byte()!=lastHour){
                core_time_onNewHour();
                lastHour = core_time_getHours_byte();
            }
        }
    }

    void core_time_driver_RTC_refresh(){
        core_time_driver_RTC_refresh(false);
    }
#endif

unsigned char core_time_getHours_byte(){
    #ifdef RTC_ENABLE
        return driver_RTC_getHours();
    #else
        return millis()/(1000*60*60)%24;
    #endif
}

void core_time_setHours(unsigned char hours){
    #ifdef RTC_ENABLE
        driver_RTC_setHours(hours);
    #else
        // TODO
    #endif
}

unsigned char core_time_getMinutes_byte(){
    #ifdef RTC_ENABLE
        return driver_RTC_getMinutes();
    #else
        return millis()/(1000*60)%60;
    #endif
}

void core_time_setMinutes(unsigned char minutes){
    #ifdef RTC_ENABLE
        driver_RTC_setMinutes(minutes);
    #else
        // TODO
    #endif
}

unsigned char core_time_getSeconds_byte(){
    #ifdef RTC_ENABLE
        return driver_RTC_getSeconds();
    #else
        return millis()/(1000)%60;
    #endif
}

void core_time_setSeconds(unsigned char seconds){
    #ifdef RTC_ENABLE
        driver_RTC_setSeconds(seconds);
    #else
        // TODO
    #endif
}

String core_time_getHours_String(){
    return core_basic_addLeadBullToInt2digits(core_time_getHours_byte());
}

String core_time_getMinutes_String(){
    return core_basic_addLeadBullToInt2digits(core_time_getMinutes_byte());
}

String core_time_getSeconds_String(){
    return core_basic_addLeadBullToInt2digits(core_time_getSeconds_byte());
}

String core_time_getHourMinuteSecondsTime(){
    #ifdef RTC_ENABLE
        core_time_driver_RTC_refresh();
    #endif
    return core_time_getHours_String() + ":" + core_time_getMinutes_String() + ":" + core_time_getSeconds_String();
}

String core_time_getHourMinuteTime(){
    #ifdef RTC_ENABLE
        core_time_driver_RTC_refresh();
    #endif
    return core_time_getHours_String() + ":" + core_time_getMinutes_String();
}

unsigned char core_time_getMonth(){
    //return "February";
    #ifdef RTC_ENABLE
        return driver_RTC_getMonth();
    #else
        return 1;
    #endif
}

String core_time_getMonth_string(){
    switch(core_time_getMonth()){
        case 1:
            return "January";
        case 2:
            return "February";
        case 3:
            return "March";
        case 4:
            return "April";
        case 5:
            return "May";
        case 6:
            return "June";
        case 7:
            return "July";
        case 8:
            return "August";
        case 9:
            return "September";
        case 10:
            return "October";
        case 11:
            return "November";
        case 12:
            return "December";
        default:
            return "-";
    }  
}

String core_time_getMonth_stringShort(){
    switch(core_time_getMonth()){
        case 1:
            return "Jan";
        case 2:
            return "Feb";
        case 3:
            return "Mar";
        case 4:
            return "Apr";
        case 5:
            return "May";
        case 6:
            return "Jun";
        case 7:
            return "Jul";
        case 8:
            return "Aug";
        case 9:
            return "Sep";
        case 10:
            return "Oct";
        case 11:
            return "Nov";
        case 12:
            return "Dec";
        default:
            return "-";
    }  
}

unsigned char core_time_getDate(){
    #ifdef RTC_ENABLE
        return driver_RTC_getDate();
    #else
        return 1;
    #endif
}

unsigned char core_time_getWeekDay(){
    #ifdef RTC_ENABLE
        return driver_RTC_getWeekDay();
    #else
        return 0;
    #endif
}

String core_time_getWeekDay_string(){
	switch (core_time_getWeekDay()){
		case 0:
			return "Monday";
		case 1:
			return "Tuesday";
		case 2:
			return "Wednesday";
		case 3:
			return "Thursday";
		case 4:
			return "Friday";
		case 5:
			return "Saturday";
		case 6:
			return "Sunday";
		default:
			return "-";
	}
}

String core_time_getWeekDay_stringShort(){
	switch (core_time_getWeekDay()){
		case 0:
			return "Mon";
		case 1:
			return "Tue";
		case 2:
			return "Wed";
		case 3:
			return "Thu";
		case 4:
			return "Fri";
		case 5:
			return "Sat";
		case 6:
			return "Sun";
		default:
			return "-";
	}
}

uint16_t core_time_getYear(){
    #ifdef RTC_ENABLE
        return driver_RTC_getYear();
    #else
        return 2021;
    #endif
}

String core_time_getDateFull(){
    return core_basic_addLeadBullToInt2digits(core_time_getDate()) + "." + core_basic_addLeadBullToInt2digits(core_time_getMonth()) + "." + String(core_time_getYear());
}

String core_time_getDateFull_short(){
    return core_basic_addLeadBullToInt2digits(core_time_getDate()) + "." + core_basic_addLeadBullToInt2digits(core_time_getMonth());
}

void core_time_setYear(uint16_t year){
    #ifdef RTC_ENABLE
        return driver_RTC_setYear(year);
    #else
        // TODO
    #endif
}

void core_time_setMonth(unsigned char month){
    #ifdef RTC_ENABLE
        return driver_RTC_setMonth(month);
    #else
        // TODO
    #endif
}

void core_time_setDate(unsigned char date){
    #ifdef RTC_ENABLE
        return driver_RTC_setDate(date);
    #else
        // TODO
    #endif
}

void core_time_setWeekDay(unsigned char weekDay){
    #ifdef RTC_ENABLE
        return driver_RTC_setWeekDay(weekDay);
    #else
        // TODO
    #endif
}


//#define EVENT_ON_TIME_CHANGED              0x03
long lastTimeChange = millis()/ON_TIME_CHANGE_EVERY_MS;
void core_time_loop(){
    long currentTime = millis()/ON_TIME_CHANGE_EVERY_MS;
    if(currentTime!=lastTimeChange){
        #ifdef CLOCK_ENABLE
            #ifdef ROUND_SCREEN 
                // Do not show time on round displays
            #else
                if(currentApp->showStatusBar==true){
                    bool needToUpdateTime = core_views_statusBar_draw_time(false);
                    if(needToUpdateTime){
                        core_views_statusBar_draw_time(true);
                        #ifdef PARTIAL_DISPLAY_DRAWING
                            driver_display_partial_loop();
                        #endif
                    }
                }
            #endif
        #endif
        #ifdef RTC_ENABLE
            core_time_driver_RTC_refresh();
        #endif
        currentApp->onEvent(EVENT_ON_TIME_CHANGED, currentTime, 0);
        lastTimeChange = currentTime;
    }
}

void core_time_setAlarmBySeconds(unsigned char seconds){
    #ifdef RTC_ENABLE
        driver_RTC_setAlarmBySeconds(seconds);
    #endif
}

unsigned char core_battery_getPercent(){
    #ifdef BATTERY_ENABLE
        return driver_battery_getPercent();
    #else
        return 0;
    #endif
}

#ifdef BATTERY_ENABLE
    long last_upodate_battery = 0;
    void core_battery_loop(){
        
        TEMPORARILY_DISABLE_LIMITS();
        driver_battery_loop();

        if(millis()-last_upodate_battery>UPDATE_BATTERY_EVERY_MS || millis()<last_upodate_battery){
            last_upodate_battery = millis();
            
            if(currentApp->showStatusBar){
                bool needToUpdate = core_views_draw_statusbar_battery(false, driver_battery_getPercent());
                if(needToUpdate){
                    core_views_draw_statusbar_battery(true, driver_battery_getPercent());
                    #ifdef PARTIAL_DISPLAY_DRAWING
                        driver_display_partial_loop();
                    #endif
                }
            }
        }

        //ICON_BATTERY_100
        TEMPORARILY_RESTORE_LIMITS();
    }
#endif
//


/*
    ############################################################################################
    #                                                                                          #
    #                                        STATUSBAR +                                       #
    #                                                                                          #
    ############################################################################################
*/

// background
#ifdef E_PAPER_DISPLAY
    #ifndef STYLE_STATUSBAR_BACKGROUND_RED
        #define STYLE_STATUSBAR_BACKGROUND_RED      0
    #endif
    #ifndef STYLE_STATUSBAR_BACKGROUND_GREEN
        #define STYLE_STATUSBAR_BACKGROUND_GREEN    0
    #endif
    #ifndef STYLE_STATUSBAR_BACKGROUND_BLUE
        #define STYLE_STATUSBAR_BACKGROUND_BLUE     0
    #endif
#else
    #ifndef STYLE_STATUSBAR_BACKGROUND_RED
        #define STYLE_STATUSBAR_BACKGROUND_RED      116
    #endif
    #ifndef STYLE_STATUSBAR_BACKGROUND_GREEN
        #define STYLE_STATUSBAR_BACKGROUND_GREEN    0
    #endif
    #ifndef STYLE_STATUSBAR_BACKGROUND_BLUE
        #define STYLE_STATUSBAR_BACKGROUND_BLUE     176
    #endif
#endif

// text color
#ifdef E_PAPER_DISPLAY
     #ifndef STYLE_STATUSBAR_TEXT_RED
        #define STYLE_STATUSBAR_TEXT_RED      255
    #endif
    #ifndef STYLE_STATUSBAR_TEXT_GREEN
        #define STYLE_STATUSBAR_TEXT_GREEN    255
    #endif
    #ifndef STYLE_STATUSBAR_TEXT_BLUE
        #define STYLE_STATUSBAR_TEXT_BLUE     255
    #endif
#else
    #ifndef STYLE_STATUSBAR_TEXT_RED
        #define STYLE_STATUSBAR_TEXT_RED      255
    #endif
    #ifndef STYLE_STATUSBAR_TEXT_GREEN
        #define STYLE_STATUSBAR_TEXT_GREEN    255
    #endif
    #ifndef STYLE_STATUSBAR_TEXT_BLUE
        #define STYLE_STATUSBAR_TEXT_BLUE     255
    #endif
#endif

#ifdef BATTERY_ENABLE

    // BATTERY CHARGING ICON
    const unsigned char battery_charging[] PROGMEM = {
        //0x02,0x01,0x02,0x20,0x02,0x10,0x04,0x00,0xdd,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xF0,0x40,0x00,0x00,0x08,0x80,0x00,0x00,0x04,0x80,0x00,0x00,0x04,0x80,0x00,0x00,0x07,0x80,0x00,0x00,0x07,0x80,0x00,0x00,0x07,0x80,0x00,0x00,0x07,0x80,0x00,0x00,0x04,0x80,0x00,0x00,0x04,0x40,0x00,0x00,0x08,0x3F,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        //0x02,0x01,0x02,0x20,0x02,0x10,0x04,0x00,0xaa,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xF0,0x7F,0xFF,0xFF,0xF8,0xE0,0x00,0x00,0x1C,0xC0,0x00,0x00,0x0C,0xC0,0x00,0x00,0x0F,0xC0,0x00,0x00,0x0F,0xC0,0x00,0x00,0x0F,0xC0,0x00,0x00,0x0F,0xC0,0x00,0x00,0x0C,0xE0,0x00,0x00,0x1C,0x7F,0xFF,0xFF,0xF8,0x3F,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x02,0x01,0x02,0x20,0x02,0x10,0x04,0x00,0xcc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xF0,0x40,0x00,0x00,0x08,0x9F,0xFF,0xFF,0xE4,0xBF,0xFF,0xFF,0xF4,0xBF,0xFF,0xFF,0xF7,0xBF,0xFF,0xFF,0xF7,0xBF,0xFF,0xFF,0xF7,0xBF,0xFF,0xFF,0xF7,0xBF,0xFF,0xFF,0xF4,0x9F,0xFF,0xFF,0xE4,0x40,0x00,0x00,0x08,0x3F,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    };

    // BATTERY 100% ICON
    const unsigned char battery100[] PROGMEM = {
        0x02,0x01,0x02,0x20,0x02,0x10,0x04,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xF0,0x40,0x00,0x00,0x08,0x9F,0xFF,0xFF,0xE4,0xBF,0xFF,0xFF,0xF4,0xBF,0xFF,0xFF,0xF7,0xBF,0xFF,0xFF,0xF7,0xBF,0xFF,0xFF,0xF7,0xBF,0xFF,0xFF,0xF7,0xBF,0xFF,0xFF,0xF4,0x9F,0xFF,0xFF,0xE4,0x40,0x00,0x00,0x08,0x3F,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    };

    // BATTERY 90% ICON
    const unsigned char battery90[] PROGMEM = {
        0x02,0x01,0x02,0x20,0x02,0x10,0x04,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xF0,0x40,0x00,0x00,0x08,0x9F,0xFF,0xFF,0x84,0xBF,0xFF,0xFF,0x84,0xBF,0xFF,0xFF,0x87,0xBF,0xFF,0xFF,0x87,0xBF,0xFF,0xFF,0x87,0xBF,0xFF,0xFF,0x87,0xBF,0xFF,0xFF,0x84,0x9F,0xFF,0xFF,0x84,0x40,0x00,0x00,0x08,0x3F,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    };

    // BATTERY 80% ICON
    const unsigned char battery80[] PROGMEM = {
        0x02,0x01,0x02,0x20,0x02,0x10,0x04,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xF0,0x40,0x00,0x00,0x08,0x9F,0xFF,0xFE,0x04,0xBF,0xFF,0xFE,0x04,0xBF,0xFF,0xFE,0x07,0xBF,0xFF,0xFE,0x07,0xBF,0xFF,0xFE,0x07,0xBF,0xFF,0xFE,0x07,0xBF,0xFF,0xFE,0x04,0x9F,0xFF,0xFE,0x04,0x40,0x00,0x00,0x08,0x3F,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    };

    // BATTERY 70% ICON
    const unsigned char battery70[] PROGMEM = {
        0x02,0x01,0x02,0x20,0x02,0x10,0x04,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xF0,0x40,0x00,0x00,0x08,0x9F,0xFF,0xF0,0x04,0xBF,0xFF,0xF0,0x04,0xBF,0xFF,0xF0,0x07,0xBF,0xFF,0xF0,0x07,0xBF,0xFF,0xF0,0x07,0xBF,0xFF,0xF0,0x07,0xBF,0xFF,0xF0,0x04,0x9F,0xFF,0xF0,0x04,0x40,0x00,0x00,0x08,0x3F,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    };

    // BATTERY 60% ICON
    const unsigned char battery60[] PROGMEM = {
        0x02,0x01,0x02,0x20,0x02,0x10,0x04,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xF0,0x40,0x00,0x00,0x08,0x9F,0xFF,0x80,0x04,0xBF,0xFF,0x80,0x04,0xBF,0xFF,0x80,0x07,0xBF,0xFF,0x80,0x07,0xBF,0xFF,0x80,0x07,0xBF,0xFF,0x80,0x07,0xBF,0xFF,0x80,0x04,0x9F,0xFF,0x80,0x04,0x40,0x00,0x00,0x08,0x3F,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    };

    // BATTERY 50% ICON
    const unsigned char battery50[] PROGMEM = {
        0x02,0x01,0x02,0x20,0x02,0x10,0x04,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xF0,0x40,0x00,0x00,0x08,0x9F,0xFC,0x00,0x04,0xBF,0xFC,0x00,0x04,0xBF,0xFC,0x00,0x07,0xBF,0xFC,0x00,0x07,0xBF,0xFC,0x00,0x07,0xBF,0xFC,0x00,0x07,0xBF,0xFC,0x00,0x04,0x9F,0xFC,0x00,0x04,0x40,0x00,0x00,0x08,0x3F,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    };

    // BATTERY 40% ICON
    const unsigned char battery40[] PROGMEM = {
        0x02,0x01,0x02,0x20,0x02,0x10,0x04,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xF0,0x40,0x00,0x00,0x08,0x9F,0xF0,0x00,0x04,0xBF,0xF0,0x00,0x04,0xBF,0xF0,0x00,0x07,0xBF,0xF0,0x00,0x07,0xBF,0xF0,0x00,0x07,0xBF,0xF0,0x00,0x07,0xBF,0xF0,0x00,0x04,0x9F,0xF0,0x00,0x04,0x40,0x00,0x00,0x08,0x3F,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    };

    // BATTERY 30% ICON
    const unsigned char battery30[] PROGMEM = {
        0x02,0x01,0x02,0x20,0x02,0x10,0x04,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xF0,0x40,0x00,0x00,0x08,0x9F,0x80,0x00,0x04,0xBF,0x80,0x00,0x04,0xBF,0x80,0x00,0x07,0xBF,0x80,0x00,0x07,0xBF,0x80,0x00,0x07,0xBF,0x80,0x00,0x07,0xBF,0x80,0x00,0x04,0x9F,0x80,0x00,0x04,0x40,0x00,0x00,0x08,0x3F,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    };

    // BATTERY 20% ICON
    const unsigned char battery20[] PROGMEM = {
        0x02,0x01,0x02,0x20,0x02,0x10,0x04,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xF0,0x40,0x00,0x00,0x08,0x9C,0x00,0x00,0x04,0xBC,0x00,0x00,0x04,0xBC,0x00,0x00,0x07,0xBC,0x00,0x00,0x07,0xBC,0x00,0x00,0x07,0xBC,0x00,0x00,0x07,0xBC,0x00,0x00,0x04,0x9C,0x00,0x00,0x04,0x40,0x00,0x00,0x08,0x3F,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    };

    // BATTERY 10% ICON
    const unsigned char battery10[] PROGMEM = {
        0x02,0x01,0x02,0x20,0x02,0x10,0x04,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xF0,0x40,0x00,0x00,0x08,0x90,0x00,0x00,0x04,0xB0,0x00,0x00,0x04,0xB0,0x00,0x00,0x07,0xB0,0x00,0x00,0x07,0xB0,0x00,0x00,0x07,0xB0,0x00,0x00,0x07,0xB0,0x00,0x00,0x04,0x90,0x00,0x00,0x04,0x40,0x00,0x00,0x08,0x3F,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    };

    // BATTERY 0% ICON
    const unsigned char battery0[] PROGMEM = {
        0x02,0x01,0x02,0x20,0x02,0x10,0x04,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xF0,0x40,0x00,0x00,0x08,0x80,0x00,0x00,0x04,0x80,0x00,0x00,0x04,0x80,0x00,0x00,0x07,0x80,0x00,0x00,0x07,0x80,0x00,0x00,0x07,0x80,0x00,0x00,0x07,0x80,0x00,0x00,0x04,0x80,0x00,0x00,0x04,0x40,0x00,0x00,0x08,0x3F,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    };
#endif

String core_views_statusBar_draw_time_TimeString = "";
bool core_views_statusBar_draw_time(bool draw){
    bool lastLimits = DRAW_LIMITS_getEnable();
    DRAW_LIMITS_setEnable(false);

    #if FONT_SIZE_DEFAULT==1
        #define CORE_VIEWS_STATUSBAR_TIMESTRING_OFFSET 2
    #elif FONT_SIZE_DEFAULT==2
        #define CORE_VIEWS_STATUSBAR_TIMESTRING_OFFSET 0
    #else
        #define CORE_VIEWS_STATUSBAR_TIMESTRING_OFFSET 0
    #endif

    if(draw){
        setDrawColor(STYLE_STATUSBAR_TEXT_RED, STYLE_STATUSBAR_TEXT_GREEN, STYLE_STATUSBAR_TEXT_BLUE);
        core_views_statusBar_draw_time_TimeString = core_time_getHourMinuteTime();
        drawString(core_views_statusBar_draw_time_TimeString, 5, STYLE_STATUSBAR_HEIGHT/2 - FONT_CHAR_HEIGHT/2 + ( (STYLE_STATUSBAR_HEIGHT)%2 ) + ( (FONT_CHAR_HEIGHT)%2 ) + CORE_VIEWS_STATUSBAR_TIMESTRING_OFFSET, FONT_SIZE_DEFAULT);
    }else{
        if(core_views_statusBar_draw_time_TimeString!=core_time_getHourMinuteTime()){
            setDrawColor(STYLE_STATUSBAR_BACKGROUND_RED, STYLE_STATUSBAR_BACKGROUND_GREEN, STYLE_STATUSBAR_BACKGROUND_BLUE);
            clearString(core_views_statusBar_draw_time_TimeString, 5, STYLE_STATUSBAR_HEIGHT/2 - FONT_CHAR_HEIGHT/2 + ( (STYLE_STATUSBAR_HEIGHT)%2 ) + ( (FONT_CHAR_HEIGHT)%2 ) + CORE_VIEWS_STATUSBAR_TIMESTRING_OFFSET, FONT_SIZE_DEFAULT);    
        }else{
            DRAW_LIMITS_setEnable(lastLimits);
            return false;
        }
    }
    DRAW_LIMITS_setEnable(lastLimits);
    return true;
}

#ifdef SOFTWARE_BUTTONS_ENABLE
    
    #define SOFTWARE_BUTTON_SIZE (SOFTWARE_BUTTONS_BAR_SIZE/2)

    #define SOFTWARE_BUTTON1_X (SCREEN_WIDTH - SOFTWARE_BUTTONS_BAR_SIZE/2)
    #define SOFTWARE_BUTTON1_Y (SCREEN_HEIGHT)/2

    #define SOFTWARE_BUTTON2_X SOFTWARE_BUTTON1_X 
    #define SOFTWARE_BUTTON2_Y (SOFTWARE_BUTTON1_Y - SOFTWARE_BUTTONS_PADDING)

    #define SOFTWARE_BUTTON3_X SOFTWARE_BUTTON1_X 
    #define SOFTWARE_BUTTON3_Y (SOFTWARE_BUTTON1_Y + SOFTWARE_BUTTONS_PADDING)

    #define SOFTWARE_BUTTON4_X SOFTWARE_BUTTON1_X 
    #define SOFTWARE_BUTTON4_Y (SCREEN_HEIGHT - SOFTWARE_BUTTON_SIZE)

    void core_views_softwareButtons_draw(uint16_t offset, uint8_t color_red, uint8_t color_green, uint8_t color_blue, uint8_t color_red_bg, uint8_t color_green_bg, uint8_t color_blue_bg){
        #ifdef SOFTWARE_BUTTONS_PORITION_RIGHT
            setDrawColor(color_red_bg, color_green_bg, color_blue_bg);
            drawRect(SCREEN_WIDTH-1, offset + 1, SCREEN_WIDTH - SOFTWARE_BUTTONS_BAR_SIZE, SCREEN_HEIGHT, true);

            setDrawColor(color_red, color_green, color_blue);

            // Button 1
            drawCircle(SOFTWARE_BUTTON1_X, SOFTWARE_BUTTON1_Y, SOFTWARE_BUTTON_SIZE/2, false);
        
            // Button 2
            drawLine(SOFTWARE_BUTTON2_X - SOFTWARE_BUTTON_SIZE/2, SOFTWARE_BUTTON2_Y + SOFTWARE_BUTTON_SIZE/2, SOFTWARE_BUTTON2_X, SOFTWARE_BUTTON2_Y - SOFTWARE_BUTTON_SIZE/3);
            drawLine(SOFTWARE_BUTTON2_X + SOFTWARE_BUTTON_SIZE/2, SOFTWARE_BUTTON2_Y + SOFTWARE_BUTTON_SIZE/2, SOFTWARE_BUTTON2_X, SOFTWARE_BUTTON2_Y - SOFTWARE_BUTTON_SIZE/3);
            drawLine(SOFTWARE_BUTTON2_X + SOFTWARE_BUTTON_SIZE/2, SOFTWARE_BUTTON2_Y + SOFTWARE_BUTTON_SIZE/2, SOFTWARE_BUTTON2_X - SOFTWARE_BUTTON_SIZE/2, SOFTWARE_BUTTON2_Y + SOFTWARE_BUTTON_SIZE/2);

            // Button 3
            drawLine(SOFTWARE_BUTTON3_X + SOFTWARE_BUTTON_SIZE/2, SOFTWARE_BUTTON3_Y - SOFTWARE_BUTTON_SIZE/2, SOFTWARE_BUTTON3_X, SOFTWARE_BUTTON3_Y + SOFTWARE_BUTTON_SIZE/3);
            drawLine(SOFTWARE_BUTTON3_X - SOFTWARE_BUTTON_SIZE/2, SOFTWARE_BUTTON3_Y - SOFTWARE_BUTTON_SIZE/2, SOFTWARE_BUTTON3_X, SOFTWARE_BUTTON3_Y + SOFTWARE_BUTTON_SIZE/3);
            drawLine(SOFTWARE_BUTTON3_X - SOFTWARE_BUTTON_SIZE/2, SOFTWARE_BUTTON3_Y - SOFTWARE_BUTTON_SIZE/2, SOFTWARE_BUTTON3_X + SOFTWARE_BUTTON_SIZE/2, SOFTWARE_BUTTON3_Y - SOFTWARE_BUTTON_SIZE/2);

            // Button 4
            drawLine(SOFTWARE_BUTTON4_X - SOFTWARE_BUTTON_SIZE/2, SOFTWARE_BUTTON4_Y, SOFTWARE_BUTTON4_X + SOFTWARE_BUTTON_SIZE/2, SOFTWARE_BUTTON4_Y);            
            drawLine(SOFTWARE_BUTTON4_X - SOFTWARE_BUTTON_SIZE/2, SOFTWARE_BUTTON4_Y - SOFTWARE_BUTTON_SIZE/2, SOFTWARE_BUTTON4_X - SOFTWARE_BUTTON_SIZE/2, SOFTWARE_BUTTON4_Y);
            drawLine(SOFTWARE_BUTTON4_X + SOFTWARE_BUTTON_SIZE/2, SOFTWARE_BUTTON4_Y - SOFTWARE_BUTTON_SIZE/2, SOFTWARE_BUTTON4_X + SOFTWARE_BUTTON_SIZE/2, SOFTWARE_BUTTON4_Y);
            drawLine(SOFTWARE_BUTTON4_X - SOFTWARE_BUTTON_SIZE/2, SOFTWARE_BUTTON4_Y - SOFTWARE_BUTTON_SIZE/2, SOFTWARE_BUTTON4_X, SOFTWARE_BUTTON4_Y - SOFTWARE_BUTTON_SIZE);
            drawLine(SOFTWARE_BUTTON4_X + SOFTWARE_BUTTON_SIZE/2, SOFTWARE_BUTTON4_Y - SOFTWARE_BUTTON_SIZE/2, SOFTWARE_BUTTON4_X, SOFTWARE_BUTTON4_Y - SOFTWARE_BUTTON_SIZE);
            //drawLine(SOFTWARE_BUTTON4_X + SOFTWARE_BUTTON_SIZE/2, SOFTWARE_BUTTON4_Y - SOFTWARE_BUTTON_SIZE/3, SOFTWARE_BUTTON4_X, SOFTWARE_BUTTON4_Y - SOFTWARE_BUTTON_SIZE);
            

            //void drawArc(int x0, int y0, int radius, int drawFromAngle, int drawToAngle, uint16_t width, bool drawFading){
        #else
            // for SOFTWARE_BUTTONS_PORITION_BOTTOM
        #endif
    }

    void core_views_softwareButtons_draw(){
        #ifdef SOFTWARE_BUTTONS_PORITION_RIGHT
            core_views_softwareButtons_draw(STYLE_STATUSBAR_HEIGHT, SOFTWARE_BUTTONS_COLOR_RED,SOFTWARE_BUTTONS_COLOR_GREEN, SOFTWARE_BUTTONS_COLOR_BLUE, SOFTWARE_BUTTONS_COLOR_RED_BG,SOFTWARE_BUTTONS_COLOR_GREEN_BG, SOFTWARE_BUTTONS_COLOR_BLUE_BG);


        #else
            // for SOFTWARE_BUTTONS_PORITION_BOTTOM
        #endif
    }
#endif

#if defined(SOFTWARE_BUTTONS_ENABLE) || defined(SOFTWARE_KEYBOARD_ENABLE)
    uint16_t core_view_isSoftwareButtons_clicked(int x, int y){
        #ifdef SOFTWARE_BUTTONS_ENABLE
            #ifdef SOFTWARE_BUTTONS_PORITION_RIGHT
                if(x>=SCREEN_WIDTH-SOFTWARE_BUTTONS_BAR_SIZE){

                    if ( abs(SOFTWARE_BUTTON1_Y-y)<=SOFTWARE_BUTTONS_BAR_SIZE ){
                        return SOFTWARE_BAR_BUTTON_UP;
                    }

                    if ( abs(SOFTWARE_BUTTON2_Y-y)<=SOFTWARE_BUTTONS_BAR_SIZE ){
                        return SOFTWARE_BAR_BUTTON_SELECT;
                    }

                    if ( abs(SOFTWARE_BUTTON3_Y-y)<=SOFTWARE_BUTTONS_BAR_SIZE ){
                        return SOFTWARE_BAR_BUTTON_DOWN;
                    }

                    if ( abs(SOFTWARE_BUTTON4_Y-y)<=SOFTWARE_BUTTONS_BAR_SIZE ){
                        return SOFTWARE_BAR_BUTTON_BACK;
                    }

                    /*
                    #define SOFTWARE_BUTTON_SIZE (SOFTWARE_BUTTONS_BAR_SIZE/2)

                    #define SOFTWARE_BUTTON1_X (SCREEN_WIDTH - SOFTWARE_BUTTONS_BAR_SIZE/2)
                    #define SOFTWARE_BUTTON1_Y (SCREEN_HEIGHT - offset)/2

                    #define SOFTWARE_BUTTON2_X SOFTWARE_BUTTON1_X 
                    #define SOFTWARE_BUTTON2_Y (SOFTWARE_BUTTON1_Y - SOFTWARE_BUTTONS_PADDING)

                    #define SOFTWARE_BUTTON3_X SOFTWARE_BUTTON1_X 
                    #define SOFTWARE_BUTTON3_Y (SOFTWARE_BUTTON1_Y + SOFTWARE_BUTTONS_PADDING)

                    #define SOFTWARE_BUTTON4_X SOFTWARE_BUTTON1_X 
                    #define SOFTWARE_BUTTON4_Y (SCREEN_HEIGHT - SOFTWARE_BUTTON_SIZE)
                    */
                }
            #endif
        #endif
        return 0;
    }
#else
    uint16_t core_view_isSoftwareButtons_clicked(int x, int y){}
#endif

void core_views_statusBar_draw(){
    /*
            [ TIME | ----- | NOTIFICATIONS | BATTERY ]
    */
    bool DRAW_LIMITS_wasEnable = DRAW_LIMITS_Enabled;
    DRAW_LIMITS_setEnable(false);
    
    // BACKGROUND
    setDrawColor(STYLE_STATUSBAR_BACKGROUND_RED, STYLE_STATUSBAR_BACKGROUND_GREEN, STYLE_STATUSBAR_BACKGROUND_BLUE);
    drawRect(0, 0, SCREEN_WIDTH-1, STYLE_STATUSBAR_HEIGHT, true);

    #ifdef ROUND_SCREEN
        // BATTERY
        #ifdef BATTERY_ENABLE
            core_views_draw_statusbar_battery(true, driver_battery_getPercent());
        #endif
    #else
        // TIME
        #ifdef CLOCK_ENABLE
            core_views_statusBar_draw_time(true);
        #endif

        // BATTERY
        #ifdef BATTERY_ENABLE
            core_views_draw_statusbar_battery(true, driver_battery_getPercent());
        #endif
    #endif

    DRAW_LIMITS_setEnable(DRAW_LIMITS_Enabled);
}

#ifdef BATTERY_ENABLE
    unsigned char batteryCharge_last = 0;
    bool batteryCharge_last_wasCharging = false;
    bool core_views_draw_statusbar_battery(bool draw, unsigned char batteryCharge){

        if(!draw && batteryCharge_last==batteryCharge) return false;

        TEMPORARILY_DISABLE_BACKGROUND();

        setBackgroundColor(STYLE_STATUSBAR_BACKGROUND_RED, STYLE_STATUSBAR_BACKGROUND_GREEN, STYLE_STATUSBAR_BACKGROUND_BLUE);
        if(draw){

            if(currentApp!=nullptr){
                if(batteryCharge_last!=batteryCharge) currentApp->onEvent(EVENT_ON_BATTERY_VALUE_CHANGE, batteryCharge, batteryCharge_last, 0, 0, 0);
                if(batteryCharge_last_wasCharging!=driver_battery_isCharging()) currentApp->onEvent(EVENT_ON_BATTERY_CHARGING_CHANGE, driver_battery_isCharging(), batteryCharge_last_wasCharging, 0, 0, 0);
            }

            batteryCharge_last = batteryCharge;
            batteryCharge_last_wasCharging = driver_battery_isCharging();
        }
        
        #ifdef ROUND_SCREEN
            drawBatteryIcon(SCREEN_WIDTH/2-32/2, STYLE_STATUSBAR_HEIGHT/2 - 8 + 1, batteryCharge_last, batteryCharge_last_wasCharging, draw);
        #else
            drawBatteryIcon(SCREEN_WIDTH-32-STYLE_STATUSBAR_HEIGHT/5, STYLE_STATUSBAR_HEIGHT/2 - 8 + 1, batteryCharge_last, batteryCharge_last_wasCharging, draw);
        #endif

        TEMPORARILY_RESTORE_BACKGROUND();

        return true;
    }

    void drawBatteryIcon(int x, int y, unsigned char charge, bool isCharging, bool draw){
        const unsigned char *batteryIcon;
        if(charge>=100){
            batteryIcon = battery100;
        }else if(charge>=90){
            batteryIcon = battery90;
        }else if(charge>=80){
            batteryIcon = battery80;
        }else if(charge>=70){
            batteryIcon = battery70;
        }else if(charge>=60){
            batteryIcon = battery60;
        }else if(charge>=50){
            batteryIcon = battery50;
        }else if(charge>=40){
            batteryIcon = battery40;
        }else if(charge>=30){
            batteryIcon = battery30;
        }else if(charge>=20){
            batteryIcon = battery20;
        }else if(charge>=10){
            batteryIcon = battery10;
        }else{
            batteryIcon = battery0;
        }

        if(isCharging){
            drawImage(draw, battery_charging, x, y);
        }else{
            drawImage(draw, batteryIcon, x, y);
        }
    }
#endif

/*
    ############################################################################################
    #                                                                                          #
    #                                        STATUSBAR -                                       #
    #                                                                                          #
    ############################################################################################
*/

/*
    ############################################################################################
    #                                                                                          #
    #                                       PAGES LIST +                                       #
    #                                                                                          #
    ############################################################################################
*/

#define CORE_VIEWS_PAGES_LIST_ELEMENT_SIZE                  4
#define CORE_VIEWS_PAGES_LIST_BETWEEN_ELEMENTS_SIZE         20


int core_views_pages_list_get_element_position_x(int pages_quantity, int position){
    return ( (pages_quantity%2==1) ? (-pages_quantity/2 + position) * CORE_VIEWS_PAGES_LIST_BETWEEN_ELEMENTS_SIZE : -((-CORE_VIEWS_PAGES_LIST_BETWEEN_ELEMENTS_SIZE/2) ) + (-pages_quantity/2 + position) * CORE_VIEWS_PAGES_LIST_BETWEEN_ELEMENTS_SIZE);
}

void core_views_draw_pages_list_simple(
    bool draw, // true - draw, false - clear
    int y0,
    unsigned char pages_quantity
){
    //SCREEN_WIDTH
    //SCREEN_HEIGHT

    if(draw) setDrawColor(128, 128, 128);
    else setDrawColor(getBackgroundColor_red(), getBackgroundColor_green(), getBackgroundColor_blue());

    for(int i=0; i<pages_quantity; i++){
        int element_x = SCREEN_WIDTH/2 + core_views_pages_list_get_element_position_x(pages_quantity, i);
        int element_y = y0;
        drawRect(element_x - CORE_VIEWS_PAGES_LIST_ELEMENT_SIZE, element_y - CORE_VIEWS_PAGES_LIST_ELEMENT_SIZE, element_x + CORE_VIEWS_PAGES_LIST_ELEMENT_SIZE, element_y + CORE_VIEWS_PAGES_LIST_ELEMENT_SIZE);
    }
}

void core_views_draw_active_page(
    bool draw, // true - draw, false - clear
    int y0,
    unsigned char pages_quantity,
    unsigned char position
){
    
    #ifdef NARROW_SCREEN
        #define USE_NUMBERS_MAIN_MENU_IN_ACTIVE_PAGES
    #endif

    #ifdef USE_NUMBERS_MAIN_MENU_IN_ACTIVE_PAGES
        //if(draw) setDrawColor(getContrastColor_red(), getContrastColor_green(), getContrastColor_blue());
        #define GRAY_COLOR 164
        if(draw) setDrawColor(GRAY_COLOR, GRAY_COLOR, GRAY_COLOR);
        else setDrawColor(getBackgroundColor_red(), getBackgroundColor_green(), getBackgroundColor_blue());

        //drawString_centered(String(position) + "/" + String(pages_quantity), y0, 1);
        String activePageString = String(position + 1) + "/" + String(pages_quantity);
        drawString(activePageString, (SCREEN_WIDTH - activePageString.length()*FONT_CHAR_WIDTH*2)/2, y0 - FONT_CHAR_HEIGHT, 2);
    #else
        if(draw) setDrawColor(0, 255, 0);
        else setDrawColor(getBackgroundColor_red(), getBackgroundColor_green(), getBackgroundColor_blue());

        int element_x = SCREEN_WIDTH/2 + core_views_pages_list_get_element_position_x(pages_quantity, position);
        int element_y = y0;
        drawRect(element_x - (CORE_VIEWS_PAGES_LIST_ELEMENT_SIZE-1), element_y - (CORE_VIEWS_PAGES_LIST_ELEMENT_SIZE-1), element_x + (CORE_VIEWS_PAGES_LIST_ELEMENT_SIZE-1), element_y + (CORE_VIEWS_PAGES_LIST_ELEMENT_SIZE-1), true);
    #endif

}

/*
    ############################################################################################
    #                                                                                          #
    #                                       PAGES LIST -                                       #
    #                                                                                          #
    ############################################################################################
*/

/*
    ############################################################################################
    #                                                                                          #
    #                                    APPLICATION ICON +                                    #
    #                                                                                          #
    ############################################################################################
*/


#define CORE_VIEWS_APPICON_IMAGE_WIDTH          32
#define CORE_VIEWS_APPICON_IMAGE_HEIGHT         32
#define CORE_VIEWS_APPICON_IMAGE_Y_OFFSET       -10
#define CORE_VIEWS_APPICON_TITLE_Y_OFFSET       20

#ifdef USE_L_MENU_IMAGES
    #define CORE_VIEWS_APPICON_IMAGE_WIDTH          56 
    #define CORE_VIEWS_APPICON_IMAGE_HEIGHT         56 
    #define CORE_VIEWS_APPICON_IMAGE_Y_OFFSET       -10
    #define CORE_VIEWS_APPICON_TITLE_Y_OFFSET       20
#endif
#ifdef USE_XL_MENU_IMAGES
    #define CORE_VIEWS_APPICON_IMAGE_WIDTH          80
    #define CORE_VIEWS_APPICON_IMAGE_HEIGHT         80
    #define CORE_VIEWS_APPICON_IMAGE_Y_OFFSET       -10
    #define CORE_VIEWS_APPICON_TITLE_Y_OFFSET       45
#endif

void core_views_draw_app_icon(bool draw, int x, int y, const unsigned char* title, const unsigned char* icon){
    // image
    drawImage(draw, icon, x-CORE_VIEWS_APPICON_IMAGE_WIDTH/2, y-CORE_VIEWS_APPICON_IMAGE_HEIGHT/2 + CORE_VIEWS_APPICON_IMAGE_Y_OFFSET);

    // title
    if(draw){
        #ifdef LIGHT_COLOR_THEME
            setDrawColor(0, 0, 0);
        #else 
            setDrawColor(255, 255, 255);
        #endif

        drawString_centered((char*)title, x, y + CORE_VIEWS_APPICON_TITLE_Y_OFFSET, FONT_SIZE_DEFAULT);
    }else{
        setDrawColor(getBackgroundColor_red(), getBackgroundColor_green(), getBackgroundColor_blue());
        clearString_centered((char*)title, x, y + CORE_VIEWS_APPICON_TITLE_Y_OFFSET, FONT_SIZE_DEFAULT);
    }

}

void drawMenuElement(bool draw, uint16_t x, uint16_t y, uint16_t width, uint16_t height, const unsigned char* icon, String string1, String string2){
    if(draw) setDrawColor(255, 255, 255);
    else setDrawColor(getBackgroundColor_red(), getBackgroundColor_green(), getBackgroundColor_blue());

    drawRect( x, y, x + width, y + height, false);

    drawString(string1, x + 36 + 10, y + height/3 - FONT_CHAR_HEIGHT/2);
    //drawString_rightAlign(string2, x + width - 15, y + height*2/3 - FONT_CHAR_HEIGHT/2);
    drawString(string2, x + 36 + 10, y + height*2/3 - FONT_CHAR_HEIGHT/2);

    drawImage(draw, icon, x + 10, y + height/2 - 16/2);
}

/*
    ############################################################################################
    #                                                                                          #
    #                                    APPLICATION ICON -                                    #
    #                                                                                          #
    ############################################################################################
*/

#if defined(USE_L_MENU_IMAGES)
    
#elif defined(USE_XL_MENU_IMAGES)

#else
    
#endif

const unsigned char icon_arrow_up[] PROGMEM = {
    0x02,0x01,0x02,0x18,0x02,0x10,0x04,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x3C,0x00,0x00,0x7E,0x00,0x00,0xFF,0x00,0x01,0xFF,0x80,0x03,0xFF,0xC0,0x07,0xFF,0xE0,0x0F,0xFF,0xF0,0x1F,0xFF,0xF8,0x3F,0xFF,0xFC,0x7F,0xFF,0xFE,0xFF,0xFF,0xFF,
};    
const unsigned char icon_arrow_down[] PROGMEM = {
    0x02,0x01,0x02,0x18,0x02,0x10,0x04,0xff,0xff,0xff,0xFF,0xFF,0xFF,0x7F,0xFF,0xFE,0x3F,0xFF,0xFC,0x1F,0xFF,0xF8,0x0F,0xFF,0xF0,0x07,0xFF,0xE0,0x03,0xFF,0xC0,0x01,0xFF,0x80,0x00,0xFF,0x00,0x00,0x7E,0x00,0x00,0x3C,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};

#if defined(PEDOMETER_ENABLE) || defined(PEDOMETER_EMULATOR)

    const unsigned char icon_leg[] PROGMEM = {
        0x02,0x01,0x02,0x10,0x02,0x10,0x04,0x00,0x00,0x00,0xC7,0xE3,0x83,0xC1,0x03,0xC1,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x81,0x83,0xC1,0xC3,0xC3,0xFF,0xFF,0xFF,0xFF,0xE3,0xC7,0xC1,0x83,0xC1,0x83,0xE3,0xC7,0x04,0xff,0xff,0xff,0x38,0x1C,0x7C,0x3E,0xFC,0x3E,0xFE,0x7F,0xFE,0x7F,0xFE,0x7F,0xFE,0x7F,0xFE,0x7E,0x7C,0x3E,0x3C,0x3C,0x00,0x00,0x00,0x00,0x1C,0x38,0x3E,0x7C,0x3E,0x7C,0x1C,0x38,
    };
    const unsigned char icon_leg_grey[] PROGMEM = {
        0x02,0x01,0x02,0x10,0x02,0x10,0x04,0x00,0x00,0x00,0xC7,0xE3,0x83,0xC1,0x03,0xC1,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x81,0x83,0xC1,0xC3,0xC3,0xFF,0xFF,0xFF,0xFF,0xE3,0xC7,0xC1,0x83,0xC1,0x83,0xE3,0xC7,0x04,0xb4,0xb4,0xb4,0x38,0x1C,0x7C,0x3E,0xFC,0x3E,0xFE,0x7F,0xFE,0x7F,0xFE,0x7F,0xFE,0x7F,0xFE,0x7E,0x7C,0x3E,0x3C,0x3C,0x00,0x00,0x00,0x00,0x1C,0x38,0x3E,0x7C,0x3E,0x7C,0x1C,0x38,
    };

    const unsigned char icon_sleep_grey[] PROGMEM = {
        0x02,0x01,0x02,0x10,0x02,0x10,0x04,0x00,0x00,0x00,0xFC,0x3F,0xF0,0x0F,0xE0,0x07,0xC0,0xF3,0x81,0xF9,0x83,0xFF,0x03,0xFF,0x07,0xFF,0x07,0xFF,0x03,0xFF,0x03,0xFF,0x81,0xF9,0x80,0xF3,0xC0,0x07,0xF0,0x0F,0xFC,0x3F,0x04,0xb4,0xb4,0xb4,0x03,0xC0,0x0F,0xF0,0x1F,0xF8,0x3F,0x0C,0x7E,0x06,0x7C,0x00,0xFC,0x00,0xF8,0x00,0xF8,0x00,0xFC,0x00,0xFC,0x00,0x7E,0x06,0x7F,0x0C,0x3F,0xF8,0x0F,0xF0,0x03,0xC0,
    };
#endif

#ifdef LEGACY_GET_ICONS
    const unsigned char* getIcon(int icon){

        switch (icon){
            #ifdef BATTERY_ENABLE
                case ICON_BATTERY_CHARGING:     return battery_charging;
                case ICON_BATTERY_100:          return battery100;  
                case ICON_BATTERY_90:           return battery90;  
                case ICON_BATTERY_80:           return battery80;  
                case ICON_BATTERY_70:           return battery70;  
                case ICON_BATTERY_60:           return battery60;  
                case ICON_BATTERY_50:           return battery50;  
                case ICON_BATTERY_40:           return battery40;  
                case ICON_BATTERY_30:           return battery30;  
                case ICON_BATTERY_20:           return battery20;  
                case ICON_BATTERY_10:           return battery10;  
                case ICON_BATTERY_0:            return battery0;
            #endif
            #if defined(PEDOMETER_ENABLE) || defined(PEDOMETER_EMULATOR)
                case ICON_LEG:                  return icon_leg;
                case ICON_LEG_GREY:             return icon_leg_grey;
            #endif
            case ICON_ARROW_UP:             return icon_arrow_up;
            case ICON_ARROW_DOWN:           return icon_arrow_down;
            default: return {0};
        }
    
    }

#else
    #if defined(PEDOMETER_ENABLE) || defined(PEDOMETER_EMULATOR)
        const unsigned char* getIcon_legs_white(){
            return icon_leg;
        }

        const unsigned char* getIcon_legs_grey(){
            return icon_leg_grey;
        }

        const unsigned char* getIcon_sleep_grey(){
            return icon_sleep_grey;
        }
    #endif

    const unsigned char* getIcon_arrow_down(){
        return icon_arrow_down;
    }

    const unsigned char* getIcon_arrow_up(){
        return icon_arrow_up;
    }
    
#endif



//#define DEBUG_CPU_CONTROLL_ENABLE
#ifdef CPU_CONTROLL_ENABLE
    void core_cpu_setup(){
        driver_cpu_setup();

        #ifdef ACCELEROMETER_ENABLE
        #endif
        //core_cpu_modemSleep();

        //debug("Should be in sleep!");
    }

    void core_cpu_loop(){
        driver_cpu_loop();
    }
    void core_cpu_sleep(unsigned char SLEEP_TYPE){
        core_cpu_sleep(SLEEP_TYPE, 0, true);
    }

    void core_cpu_sleep(unsigned char SLEEP_TYPE, long timeToWakeUp_s){
        core_cpu_sleep(SLEEP_TYPE, timeToWakeUp_s, true);
    }

    void core_cpu_sleep(unsigned char SLEEP_TYPE, long timeToWakeUp_s, bool accelerometer_sleep){
        #ifdef DEBUG_CPU_CONTROLL_ENABLE
            String sleepTypeText;

            switch (SLEEP_TYPE){
                case SLEEP_IDLE_CPU:
                    sleepTypeText = "SLEEP_IDLE_CPU"; break;
                case SLEEP_DEEP:
                    sleepTypeText = "SLEEP_DEEP"; break;
                case SLEEP_LIGHT:
                    sleepTypeText = "SLEEP_LIGHT"; break;
                case SLEEP_MODEM:
                    sleepTypeText = "SLEEP_MODEM"; break;
                case SLEEP_DISPLAY:
                    sleepTypeText = "SLEEP_DISPLAY"; break;
                case SLEEP_HIBERNATE:
                    sleepTypeText = "SLEEP_HIBERNATE"; break;
                case WAKE_MODEM:
                    sleepTypeText = "WAKE_MODEM"; break;
                case WAKE_DISPLAY:
                    sleepTypeText = "WAKE_DISPLAY"; break;
                case WAKE:
                    sleepTypeText = "WAKE"; break;
                case SLEEP_LIGHT_SCREEN_OFF:
                    sleepTypeText = "SLEEP_LIGHT_SCREEN_OFF"; break;
                case SLEEP_LIGHT_ACCELEROMETER_SLEEP:
                    sleepTypeText = "SLEEP_LIGHT_ACCELEROMETER_SLEEP"; break;
                
                default:
                    sleepTypeText = "UNKNOWN"; break;
            }
            debug("DEBUG_CPU_CONTROLL_ENABLE: going to sleep " + sleepTypeText + " for " + String(timeToWakeUp_s), 25);
        #endif

        #ifdef ACCELEROMETER_ENABLE
            if(accelerometer_sleep) driver_accelerometer_sleep();
        #endif

        driver_cpu_sleep(SLEEP_TYPE, timeToWakeUp_s);
        
        //#ifdef ACCELEROMETER_ENABLE
        //    if(accelerometer_sleep) driver_accelerometer_wakeup();
        //#endif
    }
#endif

#define SOFTWARE_KEYBOARD_SIZES_MOBILE 0x00
#define SOFTWARE_KEYBOARD_SIZES_FULL 0x01

#ifndef SOFTWARE_KEYBOARD_SIZE
    #define SOFTWARE_KEYBOARD_SIZE SOFTWARE_KEYBOARD_SIZES_MOBILE
#endif 

#define SOFTWARE_KEYBOARD_TYPES_TEXT                0x00
#define SOFTWARE_KEYBOARD_TYPES_UPPER_TEXT          0x01
#define SOFTWARE_KEYBOARD_TYPES_NUMBERS             0x02
#define SOFTWARE_KEYBOARD_TYPES_SCPECSYMBOLS_1      0x03
#define SOFTWARE_KEYBOARD_TYPES_SCPECSYMBOLS_2      0x04
#define SOFTWARE_KEYBOARD_TYPES_SCPECSYMBOLS_3      0x05
#define SOFTWARE_KEYBOARD_TYPES_SCPECSYMBOLS_4      0x06

#ifdef SOFTWARE_KEYBOARD_ENABLE
    unsigned char software_keyboard_type = SOFTWARE_KEYBOARD_TYPES_TEXT;
    int core_software_keyboard_lastActiveBtn = -1;
    bool core_software_keyboard_shift_pressed = false;
    bool core_software_keyboard_caps_pressed = false;

    #ifndef SOFTWARE_KEYBOARD_HEIGHT
        #define SOFTWARE_KEYBOARD_HEIGHT (SCREEN_HEIGHT - STYLE_STATUSBAR_HEIGHT  - FONT_CHAR_HEIGHT*FONT_SIZE_DEFAULT*3 - 1)
    #endif

    #ifndef SOFTWARE_KEYBOARD_WIDTH
        #define SOFTWARE_KEYBOARD_WIDTH (SCREEN_WIDTH - SOFTWARE_BUTTONS_BAR_SIZE - 1)
    #endif

    #ifndef SOFTWARE_KEYBOARD_KEYS_FONST_SIZE
        #define SOFTWARE_KEYBOARD_KEYS_FONST_SIZE 1
    #endif

    #ifndef SOFTWARE_KEYBOARD_KEYS_BETWEEN_LINES_MARGIN
        //#define SOFTWARE_KEYBOARD_KEYS_BETWEEN_LINES_MARGIN (SOFTWARE_KEYBOARD_KEYS_FONST_SIZE*FONT_CHAR_HEIGHT*4/3)
        #define SOFTWARE_KEYBOARD_KEYS_BETWEEN_LINES_MARGIN (SOFTWARE_KEYBOARD_KEYS_FONST_SIZE*FONT_CHAR_HEIGHT*5/3)
    #endif

    #if SOFTWARE_KEYBOARD_SIZE == SOFTWARE_KEYBOARD_SIZES_MOBILE
        #define SOFTWARE_KEYBOARD_TOTAL_BTNS 12
    #endif

    struct BtnCoords{
        int x1=-1;
        int x2=-1;
        int y1=-1;
        int y2=-1;
        int x_center=-1;
        int y_center=-1;
    };

    BtnCoords core_software_getBtnsCoords(int btnNum){
        BtnCoords coords;
        #if SOFTWARE_KEYBOARD_SIZE == SOFTWARE_KEYBOARD_SIZES_MOBILE
            
            int keyBoardRealHeight = SOFTWARE_KEYBOARD_HEIGHT - SOFTWARE_KEYBOARD_HEIGHT%4;

            unsigned char y_button_num = btnNum/3;
            unsigned char x_button_num = btnNum%3;

            coords.x_center = x_button_num*SOFTWARE_KEYBOARD_WIDTH/3 + SOFTWARE_KEYBOARD_WIDTH/6;
            coords.y_center = (SCREEN_HEIGHT - keyBoardRealHeight) + y_button_num*SOFTWARE_KEYBOARD_HEIGHT/4 + SOFTWARE_KEYBOARD_HEIGHT/8; 
            
            coords.x1 = SOFTWARE_KEYBOARD_WIDTH/3 + SOFTWARE_KEYBOARD_WIDTH*(x_button_num-1)/3;
            coords.x2 = SOFTWARE_KEYBOARD_WIDTH/3 + SOFTWARE_KEYBOARD_WIDTH*x_button_num/3;
            coords.y1 = SCREEN_HEIGHT - keyBoardRealHeight/4 - keyBoardRealHeight*(3-y_button_num)/4;
            coords.y2 = SCREEN_HEIGHT - keyBoardRealHeight/4 - keyBoardRealHeight*((3-y_button_num)-1)/4;

        #endif
        return coords;
    }

    bool core_software_keyboard_isVisible = false;

    bool get_core_software_keyboard_isVisible(){
        return core_software_keyboard_isVisible;
    }

    unsigned char software_keyboard_get_label_levels_in_keyboard(unsigned char keyboard_type, unsigned char button){
        #if SOFTWARE_KEYBOARD_SIZE == SOFTWARE_KEYBOARD_SIZES_MOBILE
            switch(keyboard_type){
                case SOFTWARE_KEYBOARD_TYPES_TEXT:
                    switch(button){
                        case 9:
                        //case 11:
                            return 1;
                    }
                    return 2;
                case SOFTWARE_KEYBOARD_TYPES_UPPER_TEXT:
                    return 2;
                case SOFTWARE_KEYBOARD_TYPES_NUMBERS:
                    switch(button){
                        case 9:
                        case 10:
                        case 11:
                            return 2;
                    }
                    return 1;
                case SOFTWARE_KEYBOARD_TYPES_SCPECSYMBOLS_1:
                    return 1;
                case SOFTWARE_KEYBOARD_TYPES_SCPECSYMBOLS_2:
                    return 1;
                case SOFTWARE_KEYBOARD_TYPES_SCPECSYMBOLS_3:
                    return 1;
                case SOFTWARE_KEYBOARD_TYPES_SCPECSYMBOLS_4:
                    return 1;
            }
            return 1;
        #else
            return 1;
        #endif
    }

    String software_keyboard_get_button_label(unsigned char keyboard_type, int button, unsigned char level){
        #if SOFTWARE_KEYBOARD_SIZE == SOFTWARE_KEYBOARD_SIZES_MOBILE
            switch(keyboard_type){
                case SOFTWARE_KEYBOARD_TYPES_TEXT:
                    switch(level){
                        case 0:
                            switch(button){
                                case 0: return "1";
                                case 1: return "2";
                                case 2: return "3";
                                case 3: return "4";
                                case 4: return "5";
                                case 5: return "6";
                                case 6: return "7";
                                case 7: return "8";
                                case 8: return "9";
                                case 9: return "%&?";
                                case 10: return "0";
                                case 11: return "Capslock";
                            }
                        case 1:
                            if(core_software_keyboard_shift_pressed){
                                switch(button){
                                    case 0: return "123";
                                    case 1: return "ABC";
                                    case 2: return "DEF";
                                    case 3: return "GHI";
                                    case 4: return "JKL";
                                    case 5: return "MNO";
                                    case 6: return "PQRS";
                                    case 7: return "TNV";
                                    case 8: return "WXYZ";
                                    case 10: return "_";
                                    case 11: return "Shift";
                                }
                            }else{
                                switch(button){
                                    case 0: return "123";
                                    case 1: return "abc";
                                    case 2: return "def";
                                    case 3: return "ghi";
                                    case 4: return "jkl";
                                    case 5: return "mno";
                                    case 6: return "pqrs";
                                    case 7: return "tnv";
                                    case 8: return "wxyz";
                                    case 10: return "_";
                                    case 11: return "Shift";
                                }
                            }
                    }
                    return "";
                case SOFTWARE_KEYBOARD_TYPES_UPPER_TEXT:
                    return "2";
                case SOFTWARE_KEYBOARD_TYPES_NUMBERS:
                    return "1";
                case SOFTWARE_KEYBOARD_TYPES_SCPECSYMBOLS_1:
                    return "1";
                case SOFTWARE_KEYBOARD_TYPES_SCPECSYMBOLS_2:
                    return "1";
                case SOFTWARE_KEYBOARD_TYPES_SCPECSYMBOLS_3:
                    return "1";
                case SOFTWARE_KEYBOARD_TYPES_SCPECSYMBOLS_4:
                    return "1";
            }
            return "1";
        #else
            return "1";
        #endif
    }

    int core_software_keyboard_getPressedButton(){
        #if SOFTWARE_KEYBOARD_SIZE == SOFTWARE_KEYBOARD_SIZES_MOBILE
        #endif
        return -1;
    }

    void core_software_keyboard_drawButton(bool draw, int btnNum, bool isActive){
        BtnCoords coords = core_software_getBtnsCoords(btnNum);
        if(coords.x_center==-1||coords.y_center == -1) return;

        if(isActive) setDrawColor(64, 64, 64);
        else setDrawColor(128, 128, 128);
        
        drawRect(coords.x1, coords.y1, coords.x2, coords.y2, true);
        
        if(isActive) setDrawColor(32, 32, 32);
        else setDrawColor(64, 64, 64);

        drawRect(coords.x1, coords.y1, coords.x2, coords.y2, false);

        if(software_keyboard_get_label_levels_in_keyboard(software_keyboard_type, btnNum)==1){
            // For 1 string
            if(isActive) setDrawColor(172, 172, 172);
            else setDrawColor(64, 64, 64);
            //setDrawColor(64, 64, 64);
            drawString_centered(
                software_keyboard_get_button_label(software_keyboard_type, btnNum, 0), 
                coords.x_center, 
                coords.y_center - SOFTWARE_KEYBOARD_KEYS_FONST_SIZE*FONT_CHAR_HEIGHT/2,
                SOFTWARE_KEYBOARD_KEYS_FONST_SIZE
            );
        }else{
            // for 2 strings
            if(isActive) setDrawColor(128, 128, 128);
            else setDrawColor(64, 64, 64);
            //setDrawColor(64, 64, 64);
            drawString_centered(
                software_keyboard_get_button_label(software_keyboard_type, btnNum, 0), 
                coords.x_center, 
                coords.y_center - SOFTWARE_KEYBOARD_KEYS_FONST_SIZE*FONT_CHAR_HEIGHT/2  - SOFTWARE_KEYBOARD_KEYS_BETWEEN_LINES_MARGIN/2,
                SOFTWARE_KEYBOARD_KEYS_FONST_SIZE
            );

            if(isActive) setDrawColor(216, 216, 216);
            else setDrawColor(0, 0, 0);
            //setDrawColor(0, 0, 0);
            drawString_centered(
                software_keyboard_get_button_label(software_keyboard_type, btnNum, 1), 
                coords.x_center, 
                coords.y_center - SOFTWARE_KEYBOARD_KEYS_FONST_SIZE*FONT_CHAR_HEIGHT/2 + SOFTWARE_KEYBOARD_KEYS_BETWEEN_LINES_MARGIN/2,
                SOFTWARE_KEYBOARD_KEYS_FONST_SIZE
            );   
        }
    }

    void core_software_keyboard_draw(bool draw){
        for(int btnNum=0; btnNum<SOFTWARE_KEYBOARD_TOTAL_BTNS; btnNum++){
            core_software_keyboard_drawButton(draw, btnNum, false);
        }
    }

    void core_software_keyboard_show(){
        core_software_keyboard_isVisible = true;
        core_software_keyboard_draw(true);
    }

    void core_software_keyboard_hide(){
        core_software_keyboard_isVisible = false;
        core_software_keyboard_draw(false);
    }

    bool core_software_keyboard_isTouchInBtn(int btnNum, int touch_x, int touch_y){
        BtnCoords coords = core_software_getBtnsCoords(btnNum);
        if(
            touch_x>coords.x1 && 
            touch_x<coords.x2 &&
            touch_y>coords.y1 && 
            touch_y<coords.y2 &&
            true
        ) return true;
        else return false;
    }

    int core_software_keyboard_getTouchingButton(int touch_x, int touch_y){
        for(int btnNum=0; btnNum<SOFTWARE_KEYBOARD_TOTAL_BTNS; btnNum++){
            if(core_software_keyboard_isTouchInBtn(btnNum, touch_x, touch_y)) return btnNum; 
        }
        return -1;
    }

    void core_software_keyboard_onEvent(unsigned char event, int val1, int val2, int val3, int val4, int val5){
        if(!core_software_keyboard_isVisible) return; 
        
        if(event==EVENT_ON_TOUCH_START){
            //debug("On keyboard touch start " + String(val1) + " " + String(val2));
            int touch_btn = core_software_keyboard_getTouchingButton(val1, val2);

            #if SOFTWARE_KEYBOARD_SIZE == SOFTWARE_KEYBOARD_SIZES_MOBILE
                if(software_keyboard_type == SOFTWARE_KEYBOARD_TYPES_TEXT && touch_btn==11){
                    if(core_software_keyboard_shift_pressed){
                        if(core_software_keyboard_caps_pressed){
                            core_software_keyboard_shift_pressed = false;
                            core_software_keyboard_caps_pressed = false;
                            core_software_keyboard_draw(true);
                        }else{
                            core_software_keyboard_caps_pressed = true;
                            //core_software_keyboard_draw(true);
                            core_software_keyboard_drawButton(true, 11, true);
                        }
                    }else{
                        core_software_keyboard_shift_pressed = true;
                        core_software_keyboard_draw(true);
                        core_software_keyboard_lastActiveBtn = touch_btn;
                        core_software_keyboard_drawButton(true, touch_btn, true);
                    }
                }else 
            #endif
            if(touch_btn!=-1){
                //debug("Touching " + String(touch_btn) + "!");
                core_software_keyboard_lastActiveBtn = touch_btn;
                core_software_keyboard_drawButton(true, touch_btn, true);
            }
        }else if(event==EVENT_ON_TOUCH_CLICK){    

        }else if(event==EVENT_ON_TOUCH_RELEASED){
            if(core_software_keyboard_lastActiveBtn!=-1){
                core_software_keyboard_drawButton(true, core_software_keyboard_lastActiveBtn, false);
                core_software_keyboard_lastActiveBtn=-1;
            }
        }else if(event==EVENT_ON_TOUCH_DRAG){

        }
    }

#endif

//#define CORE_TOUCH_DEBUG
//#define TOUCH_SCREEN_ENABLE
#ifndef MULTITOUCH_SCREEN_ENABLE
    #define MULTITOUCH_SCREEN_FINGERS 1
#endif

#ifdef TOUCH_SCREEN_ENABLE
    bool TOUCH_SCREEN_last_isTouching[MULTITOUCH_SCREEN_FINGERS];
    bool TOUCH_SCREEN_isDragging[MULTITOUCH_SCREEN_FINGERS];
    bool TOUCH_SCREEN_isLongPressed[MULTITOUCH_SCREEN_FINGERS];

    int TOUCH_SCREEN_last_x[MULTITOUCH_SCREEN_FINGERS];
    int TOUCH_SCREEN_last_y[MULTITOUCH_SCREEN_FINGERS];

    int TOUCH_SCREEN_touch_start_x[MULTITOUCH_SCREEN_FINGERS];
    int TOUCH_SCREEN_touch_start_y[MULTITOUCH_SCREEN_FINGERS];
    bool CORE_TOUCH_swipeStarted[MULTITOUCH_SCREEN_FINGERS];

    int getTOUCH_SCREEN_touch_start_x(uint8_t finger){
        return TOUCH_SCREEN_touch_start_x[finger];
    }
    int getTOUCH_SCREEN_touch_start_y(uint8_t finger){
        return TOUCH_SCREEN_touch_start_y[finger];
    }

    long TOUCH_SCREEN_touch_start_ms[MULTITOUCH_SCREEN_FINGERS];

    long getTOUCH_SCREEN_touch_start_ms(uint8_t finger){
        return TOUCH_SCREEN_touch_start_ms[finger];
    }

    void setup_touchScreenCore(){
        for(uint8_t finger=0; finger<MULTITOUCH_SCREEN_FINGERS; finger++){
            TOUCH_SCREEN_last_isTouching[finger] = false;
            TOUCH_SCREEN_isDragging[finger] = false;
            TOUCH_SCREEN_isLongPressed[finger] = false;
            CORE_TOUCH_swipeStarted[finger] = false;

            TOUCH_SCREEN_last_x[finger] = 0;
            TOUCH_SCREEN_last_y[finger] = 0;
            TOUCH_SCREEN_touch_start_x[finger] = 0;
            TOUCH_SCREEN_touch_start_y[finger] = 0;
            TOUCH_SCREEN_touch_start_ms[finger] = 0;
        }
    }

    void loop_touchScreenCore(){
        loop_touchScreenDriver();

        /*
        #define EVENT_ON_TOUCH_START            0x06
        #define EVENT_ON_TOUCH_RELEASED         0x07
        #define EVENT_ON_TOUCH_CLICK            0x08
        #define EVENT_ON_TOUCH_LONG_PRESS       0x09
        #define EVENT_ON_TOUCH_DRAG             0x0A
        #define EVENT_ON_TOUCH_DOUBLE_CLICK     0x0B
        */

        for(uint8_t finger=0; finger<MULTITOUCH_SCREEN_FINGERS; finger++){

            if(!TOUCH_SCREEN_last_isTouching[finger] && getTOUCH_SCREEN_isTouching(finger)){

                TOUCH_SCREEN_last_isTouching[finger]    = true;
                TOUCH_SCREEN_last_x[finger]             = getTOUCH_SCREEN_X(finger);
                TOUCH_SCREEN_last_y[finger]             = getTOUCH_SCREEN_Y(finger);
                TOUCH_SCREEN_touch_start_x[finger]      = TOUCH_SCREEN_last_x[finger];
                TOUCH_SCREEN_touch_start_y[finger]      = TOUCH_SCREEN_last_y[finger];
                TOUCH_SCREEN_isDragging[finger]         = false;
                TOUCH_SCREEN_isLongPressed[finger]      = false;
                TOUCH_SCREEN_touch_start_ms[finger]     = millis();

                #ifdef CORE_TOUCH_DEBUG
                    debug("Touch start on finger " + String(finger));
                #endif

                
                currentApp->onEvent(EVENT_ON_TOUCH_START, TOUCH_SCREEN_last_x[finger], TOUCH_SCREEN_last_y[finger], 0, 0, finger);
                #ifdef SOFTWARE_KEYBOARD_ENABLE
                    core_software_keyboard_onEvent(EVENT_ON_TOUCH_START, TOUCH_SCREEN_last_x[finger], TOUCH_SCREEN_last_y[finger], 0, 0, 0);
                #endif
            }else if(TOUCH_SCREEN_last_isTouching[finger] && !getTOUCH_SCREEN_isTouching(finger)){

                TOUCH_SCREEN_last_isTouching[finger] = false;
                CORE_TOUCH_swipeStarted[finger] = false;

                #ifdef CORE_TOUCH_DEBUG
                    debug("Touch released on finger " + String(finger));
                #endif

                currentApp->onEvent(EVENT_ON_TOUCH_RELEASED, getTOUCH_SCREEN_X(finger), getTOUCH_SCREEN_Y(finger), 0, 0, finger);
                #ifdef SOFTWARE_KEYBOARD_ENABLE
                    core_software_keyboard_onEvent(EVENT_ON_TOUCH_RELEASED, getTOUCH_SCREEN_X(finger), getTOUCH_SCREEN_Y(finger), 0, 0, 0);
                #endif

                if(!TOUCH_SCREEN_isDragging[finger] && millis()-TOUCH_SCREEN_touch_start_ms[finger]<TOUCH_SCREEN_TIME_MS_FOR_LONG_TOUCH){
                    
                    #if defined(SOFTWARE_BUTTONS_ENABLE) || defined(SOFTWARE_KEYBOARD_ENABLE)
                        if(core_view_isSoftwareButtons_clicked(getTOUCH_SCREEN_X(finger), getTOUCH_SCREEN_Y(finger))){
                            #ifdef CORE_TOUCH_DEBUG
                                debug("Touch click on software button on finger " + String(finger));
                            #endif    
                        }else{
                            #ifdef CORE_TOUCH_DEBUG
                                debug("Touch click on finger " + String(finger));
                            #endif    
                            currentApp->onEvent(EVENT_ON_TOUCH_CLICK, getTOUCH_SCREEN_X(finger), getTOUCH_SCREEN_Y(finger), 0, 0, finger);
                            #ifdef SOFTWARE_KEYBOARD_ENABLE
                                core_software_keyboard_onEvent(EVENT_ON_TOUCH_CLICK, getTOUCH_SCREEN_X(finger), getTOUCH_SCREEN_Y(finger), 0, 0, 0);
                            #endif
                        }
                    #else
                        #ifdef CORE_TOUCH_DEBUG
                            debug("Touch click on finger " + String(finger));
                        #endif    
                        currentApp->onEvent(EVENT_ON_TOUCH_CLICK, getTOUCH_SCREEN_X(finger), getTOUCH_SCREEN_Y(finger), 0, 0, finger);
                        #ifdef SOFTWARE_KEYBOARD_ENABLE
                            core_software_keyboard_onEvent(EVENT_ON_TOUCH_CLICK, getTOUCH_SCREEN_X(finger), getTOUCH_SCREEN_Y(finger), 0, 0, 0);
                        #endif
                    #endif
                    
                }else{
                    TOUCH_SCREEN_isDragging[finger] = false;
                    TOUCH_SCREEN_isLongPressed[finger] = false;
                }
                

            }else if(TOUCH_SCREEN_last_isTouching[finger] && getTOUCH_SCREEN_isTouching(finger)){

                int dx;
                int dy;

                if(!TOUCH_SCREEN_isDragging[finger]){
                    dx = getTOUCH_SCREEN_X(finger) - TOUCH_SCREEN_touch_start_x[finger];
                    dy = getTOUCH_SCREEN_Y(finger) - TOUCH_SCREEN_touch_start_y[finger];
                }else{
                    dx = getTOUCH_SCREEN_X(finger) - TOUCH_SCREEN_last_x[finger];
                    dy = getTOUCH_SCREEN_Y(finger) - TOUCH_SCREEN_last_y[finger];
                }

                //TOUCH_SCREEN_DELTA_MOVE_FOR_DRAG
                if( (TOUCH_SCREEN_isDragging[finger]) || abs(dx)>TOUCH_SCREEN_DELTA_MOVE_FOR_DRAG || abs(dy)>TOUCH_SCREEN_DELTA_MOVE_FOR_DRAG){
                    TOUCH_SCREEN_isDragging[finger] = true;
                    TOUCH_SCREEN_last_x[finger] = getTOUCH_SCREEN_X(finger);
                    TOUCH_SCREEN_last_y[finger] = getTOUCH_SCREEN_Y(finger);

                    #ifdef CORE_TOUCH_DEBUG
                        debug("Touch drag on finger " + String(finger));
                    #endif
                    
                    currentApp->onEvent(EVENT_ON_TOUCH_DRAG, dx, dy, TOUCH_SCREEN_touch_start_x[finger], TOUCH_SCREEN_touch_start_y[finger], finger);

                    if(!CORE_TOUCH_swipeStarted[finger]){
                        if(abs(dx)>TOUCH_SCREEN_DELTA_MOVE_FOR_SWIPE || abs(dy)>TOUCH_SCREEN_DELTA_MOVE_FOR_SWIPE){
                            CORE_TOUCH_swipeStarted[finger] = true;
                            if(abs(dx)>abs(dy)){
                                if(dx>0){
                                    currentApp->onEvent(EVENT_ON_TOUCH_QUICK_SWIPE_TO_RIGHT, dx, dy, 0, 0, finger);
                                    #ifdef CORE_TOUCH_DEBUG
                                        debug("CORE_TOUCH_DEBUG: EVENT_ON_TOUCH_QUICK_SWIPE_TO_RIGHT on finger " + String(finger));
                                    #endif
                                }else{
                                    currentApp->onEvent(EVENT_ON_TOUCH_QUICK_SWIPE_TO_LEFT, dx, dy, 0, 0, finger);
                                    #ifdef CORE_TOUCH_DEBUG
                                        debug("CORE_TOUCH_DEBUG: EVENT_ON_TOUCH_QUICK_SWIPE_TO_LEFT on finger " + String(finger));
                                    #endif
                                } 
                            }else{
                                if(dy>0){
                                    currentApp->onEvent(EVENT_ON_TOUCH_QUICK_SWIPE_TO_BOTTOM, dx, dy, 0, 0, finger);
                                    #ifdef CORE_TOUCH_DEBUG
                                        debug("CORE_TOUCH_DEBUG: EVENT_ON_TOUCH_QUICK_SWIPE_TO_BOTTOM on finger " + String(finger));
                                    #endif
                                }else{
                                    currentApp->onEvent(EVENT_ON_TOUCH_QUICK_SWIPE_TO_TOP, dx, dy, 0, 0, finger);
                                    #ifdef CORE_TOUCH_DEBUG
                                        debug("CORE_TOUCH_DEBUG: EVENT_ON_TOUCH_QUICK_SWIPE_TO_TOP on finger " + String(finger));
                                    #endif
                                } 
                            }
                        }
                    }

                    #ifdef SOFTWARE_KEYBOARD_ENABLE
                        core_software_keyboard_onEvent(EVENT_ON_TOUCH_DRAG, dx, dy, 0, 0, 0);
                    #endif

                }else if(!TOUCH_SCREEN_isLongPressed[finger] && millis()-TOUCH_SCREEN_touch_start_ms[finger]>TOUCH_SCREEN_TIME_MS_FOR_LONG_TOUCH){
                    TOUCH_SCREEN_isLongPressed[finger] = true;

                    #ifdef CORE_TOUCH_DEBUG
                        debug("Touch long press on finger " + String(finger));
                    #endif
                    
                    currentApp->onEvent(EVENT_ON_TOUCH_LONG_PRESS, getTOUCH_SCREEN_X(finger), getTOUCH_SCREEN_Y(finger), 0, 0, finger);
                    #ifdef SOFTWARE_KEYBOARD_ENABLE
                        core_software_keyboard_onEvent(EVENT_ON_TOUCH_LONG_PRESS, getTOUCH_SCREEN_X(finger), getTOUCH_SCREEN_Y(finger), 0, 0, 0);
                    #endif
                }
                
            } 
        }
    }

#endif



#if defined(PEDOMETER_ENABLE) || defined(PEDOMETER_EMULATOR)
    //RTC_DATA_ATTR long pedometer_days_steps = 0;

    bool pedometer_in_work = false;
    bool get_pedometer_in_work(){
        return pedometer_in_work;
    }

    RTC_DATA_ATTR unsigned char analyse_sleep_delta_accels = 0;
    RTC_DATA_ATTR unsigned char corePedometer_currentsleep_between_mesures = PEDOMETER_STEP_DETECTION_DELAY_SEC_MIN;

    //#define PEDOMETER_DAY_VALUE_TYPE long
    RTC_DATA_ATTR uint16_t pedometer_days_steps_min_limit = PEDOMETER_DAY_STEP_LIMMIT_DEFAULT;
    RTC_DATA_ATTR uint16_t pedometer_days_sleep_min_limit = PEDOMETER_DAY_SLEEP_LIMMIT_DEFAULT; // in minutes
    
    #ifdef PEDOMETER_EMULATOR
        // Presentation and emulator data
        RTC_DATA_ATTR PEDOMETER_DAY_VALUE_TYPE pedometer_days_steps[PEDOMETER_DAYS_HISTORY] = {8340,12234,7654,23593,5633,1290,430};
        RTC_DATA_ATTR uint16_t pedometer_days_sleep[PEDOMETER_DAYS_HISTORY] = {430,550,230,500,349,765,234};
        RTC_DATA_ATTR uint16_t pedometer_hours_steps[24] = {0,   0,  0,  0,  0,  0, 120, 300, 1232, 10, 23, 43, 1230, 900, 534, 230, 890, 600, 200, 100, 10,  0, 10, 0};
        RTC_DATA_ATTR uint16_t pedometer_hours_steps_lastDay[24] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

        RTC_DATA_ATTR uint8_t pedometer_hours_sleep[24] =  {60, 60, 60, 58, 60, 34, 0,   0,   0,    0,  0,  0,  0,    0,   0,   0,   0,   0,   0,   0,   0,   0, 0, 23};
        RTC_DATA_ATTR uint8_t pedometer_hours_sleep_lastDay[24] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

        PEDOMETER_DAY_VALUE_TYPE get_pedometer_days_steps(unsigned char day){ 
            pedometer_days_steps[0] = 8340; pedometer_days_steps[1] = 12234; pedometer_days_steps[2] = 7654; pedometer_days_steps[3] = 23593;
            pedometer_days_steps[4] = 5633; pedometer_days_steps[5] = 1290; pedometer_days_steps[6] = 430;

            return pedometer_days_steps[day];
        }
        uint16_t get_pedometer_days_sleep(unsigned char day){ 
            pedometer_days_sleep[0] = 430; pedometer_days_sleep[1] = 550; pedometer_days_sleep[2] = 230; pedometer_days_sleep[3] = 500;
            pedometer_days_sleep[4] = 349; pedometer_days_sleep[5] = 765; pedometer_days_sleep[6] = 234;

            return pedometer_days_sleep[day];
        }
        uint16_t get_pedometer_hours_steps(unsigned char hour){ 
            pedometer_hours_steps[0] = 0; pedometer_hours_steps[1] = 0; pedometer_hours_steps[2] = 0;  pedometer_hours_steps[3] = 0; pedometer_hours_steps[4] = 0;
            pedometer_hours_steps[5] = 0; pedometer_hours_steps[6] = 120; pedometer_hours_steps[7] = 300; pedometer_hours_steps[8] = 1232; pedometer_hours_steps[9] = 10;
            pedometer_hours_steps[10] = 23; pedometer_hours_steps[11] = 43; pedometer_hours_steps[12] = 1230; pedometer_hours_steps[13] = 900; pedometer_hours_steps[14] = 534;
            pedometer_hours_steps[15] = 230; pedometer_hours_steps[16] = 890; pedometer_hours_steps[17] = 600; pedometer_hours_steps[18] = 200; pedometer_hours_steps[19] = 100;
            pedometer_hours_steps[20] = 10; pedometer_hours_steps[21] = 0; pedometer_hours_steps[22] = 10; pedometer_hours_steps[23] = 0; 
            return pedometer_hours_steps[hour];
        }
        uint8_t get_pedometer_hours_sleep(unsigned char hour){ 
            pedometer_hours_sleep[0] = 60; pedometer_hours_sleep[1] = 60; pedometer_hours_sleep[2] = 60; pedometer_hours_sleep[3] = 58; pedometer_hours_sleep[4] = 60; 
            pedometer_hours_sleep[5] = 34; pedometer_hours_sleep[6] = 0; pedometer_hours_sleep[7] = 0; pedometer_hours_sleep[8] = 0; pedometer_hours_sleep[9] = 0;  
            pedometer_hours_sleep[10] = 0; pedometer_hours_sleep[11] = 0; pedometer_hours_sleep[12] = 0; pedometer_hours_sleep[13] = 0; pedometer_hours_sleep[14] = 0;   
            pedometer_hours_sleep[15] = 0; pedometer_hours_sleep[16] = 0; pedometer_hours_sleep[17] = 0; pedometer_hours_sleep[18] = 0; pedometer_hours_sleep[19] = 0;   
            pedometer_hours_sleep[20] = 0; pedometer_hours_sleep[21] = 0; pedometer_hours_sleep[22] = 0; pedometer_hours_sleep[23] = 23; 
            return pedometer_hours_sleep[hour];
        }
    #else
        
        RTC_DATA_ATTR PEDOMETER_DAY_VALUE_TYPE pedometer_days_steps[PEDOMETER_DAYS_HISTORY] = {0,0,0,0,0,0,0};
        RTC_DATA_ATTR uint16_t pedometer_days_sleep[PEDOMETER_DAYS_HISTORY] = {0,0,0,0,0,0,0};
        // Steps in every hour
        RTC_DATA_ATTR uint16_t pedometer_hours_steps[24] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        RTC_DATA_ATTR uint16_t pedometer_hours_steps_lastDay[24] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        // Sleep minutes in every hour
        RTC_DATA_ATTR uint8_t pedometer_hours_sleep[24] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        RTC_DATA_ATTR uint8_t pedometer_hours_sleep_lastDay[24] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

        PEDOMETER_DAY_VALUE_TYPE get_pedometer_days_steps(unsigned char day){ return pedometer_days_steps[day];}
        uint16_t get_pedometer_days_sleep(unsigned char day){ return pedometer_days_sleep[day];}
        uint16_t get_pedometer_hours_steps(unsigned char hour){ return pedometer_hours_steps[hour];}
        uint8_t get_pedometer_hours_sleep(unsigned char hour){ return pedometer_hours_sleep[hour];}
    #endif

    uint16_t get_pedometer_hours_steps_lastDay(unsigned char hour){ return pedometer_hours_steps_lastDay[hour];}
    uint8_t get_pedometer_hours_sleep_lastDay(unsigned char hour){ return pedometer_hours_sleep_lastDay[hour];}

    void set_pedometer_hours_steps_lastDay(unsigned char hour, uint16_t value){ pedometer_hours_steps_lastDay[hour] = value;}
    void set_pedometer_hours_sleep_lastDay(unsigned char hour, uint8_t value){ pedometer_hours_sleep_lastDay[hour] = value;}

    float get_pedometer_days_sleep_hours(unsigned char day){ return (((float)(((int)pedometer_days_sleep[day])*100/60))/100.0);}

    #ifdef PEDOMETER_EMULATOR
        float get_pedometer_days_sleep_hours(){ return 8*60 - 10;}
        uint16_t get_pedometer_days_sleep(){return 8*60 - 10;}
        PEDOMETER_DAY_VALUE_TYPE get_pedometer_days_steps(){ return 5500;}
    #else
        float get_pedometer_days_sleep_hours(){return get_pedometer_days_sleep_hours(0);}
        uint16_t get_pedometer_days_sleep(){return get_pedometer_days_sleep(0);}
        PEDOMETER_DAY_VALUE_TYPE get_pedometer_days_steps(){ return get_pedometer_days_steps(0);}
    #endif

    uint16_t get_pedometer_days_steps_min_limit(){return pedometer_days_steps_min_limit;}
    uint16_t get_pedometer_days_sleep_min_limit(){return pedometer_days_sleep_min_limit;} //in minutes
    float get_pedometer_days_sleep_hours_limit(){return (((float)(((int)get_pedometer_days_sleep_min_limit())*100/60))/100.0);} //in hours

    void set_pedometer_hours_steps(unsigned char hour, uint16_t steps){ pedometer_hours_steps[hour] = steps;}
    void set_pedometer_hours_sleep(unsigned char hour, uint8_t sleep_minutes){ pedometer_hours_sleep[hour] = sleep_minutes;}
    void set_pedometer_days_steps_min_limit(uint16_t limit){pedometer_days_steps_min_limit = limit;}
    void set_pedometer_days_sleep_min_limit(uint16_t limit){pedometer_days_sleep_min_limit = limit;} //in minutes
    void set_pedometer_days_steps(unsigned char day, PEDOMETER_DAY_VALUE_TYPE steps){pedometer_days_steps[day] = steps;}
    void set_pedometer_days_sleep(unsigned char day, uint16_t sleep){pedometer_days_sleep[day] = sleep;}
    void set_pedometer_days_sleep(uint16_t sleep){set_pedometer_days_sleep(0, sleep);}
    void set_pedometer_days_steps(uint16_t steps){set_pedometer_days_steps(0, steps);}

    RTC_DATA_ATTR uint32_t pedometr_mesurings_in_a_day = 0;

    long getPedometr_mesurings_in_a_day(){
        return pedometr_mesurings_in_a_day;
    }


    void core_pedometer_newDate(){

        debug("*****************************************************************");
        debug("*                           NEW DATE                            *");
        debug("*****************************************************************");

        for(unsigned char i=PEDOMETER_DAYS_HISTORY-1; i>0; i--){
            pedometer_days_steps[i] = pedometer_days_steps[i-1];
            pedometer_days_sleep[i] = pedometer_days_sleep[i-1];
        }

        // TODO: Trying to sync before clear data
        
        //debug("new date");
        set_pedometer_days_steps(0, 0);
        set_pedometer_days_sleep(0, 0);
        //get_pedometer_hours_sleep = 0;

        for(unsigned char i=0; i<24; i++){
            pedometer_hours_steps_lastDay[i] = pedometer_hours_steps[i];
            pedometer_hours_sleep_lastDay[i] = pedometer_hours_sleep[i];
            pedometer_hours_steps[i] = 0;
            pedometer_hours_sleep[i] = 0;
        }

        pedometr_mesurings_in_a_day = 0;
        
    }

    #ifndef pedometer_days_steps_IN_SEC
        #define pedometer_days_steps_IN_SEC                          1.68f
    #endif

    #define CORE_PEDOMETER_MESURE_EVERY_MS                      (PEDOMETER_STEP_DETECTION_PERIOD_MS/PEDOMETER_MESURES_IN_STEP_DETECTION_PERIOD)

    RTC_DATA_ATTR bool core_pedometer_on = PEDOMETER_ENABLE_ON_START;
    void core_pedometer_setEnable(bool enable){core_pedometer_on = enable;}
    bool core_pedometer_getEnable(){return core_pedometer_on;}
    String core_pedometer_getEnable_String(){return (core_pedometer_on?"On":"Off");}

    int     core_pedometer_current_step_detection = -1;
    bool    core_pedometer_current_get_isNotInMesure(){
        core_pedometer_current_step_detection==-1;
    };
    float   core_pedometer_step_detection_arrays[PEDOMETER_MESURES_IN_STEP_DETECTION_PERIOD];
    long    core_pedometer_step_detection_start_time = 0;
    RTC_DATA_ATTR long    lastTimeWalkingDetection = 0;

    void core_pedometer_setup(){
        // Just for test M5StickC
        #ifdef DEBUG_PEDOMETER
            //pinMode(10, OUTPUT);
            //digitalWrite(10, 1);
        #endif
    }

    #ifdef PEDOMETER_ENABLE
        void core_pedometer_loop(bool inBackGroung){
            #ifdef DEBUG_PEDOMETER
                //debug("Core pedometer loop");
            #endif 
            #ifdef PEDOMETER_DO_NOT_USER_PEDOMETER_WHILE_CONNECTED_TO_USB
                #ifdef BATTERY_ENABLE
                    #ifndef DEBUG_PEDOMETER
                        if(driver_battery_isUsbConnected() || !core_pedometer_getEnable()){
                            #ifdef DEBUG_PEDOMETER
                                debug("DEBUG_PEDOMETER: exit job course on usb");
                            #endif 
                            analyse_sleep_delta_accels=0;
                            return;
                        }
                    #else
                        #ifdef DEBUG_PEDOMETER
                            if(driver_battery_isUsbConnected()){
                                //debug("DEBUG_PEDOMETER: usb is connected");
                            }
                        #endif 
                    #endif
                #endif
            #endif

            if(core_pedometer_on){
                #ifdef DEBUG_PEDOMETER
                    //debug("Pedometer is ON!");
                #endif 

                if(core_pedometer_current_step_detection!=-1){
                    #ifdef DEBUG_PEDOMETER
                        //debug("Pedometer - Not first mesure!");
                    #endif
                    core_pedometer_mesure_loop(inBackGroung);
                }else{
                    driver_accelerometer_wakeup();
                    #ifdef DEBUG_PEDOMETER 
                        //debug("Pedometer - check time!", 10);
                    #endif
                    
                    if(getCurrentSystemTime()<lastTimeWalkingDetection) lastTimeWalkingDetection = getCurrentSystemTime();

                    if( (inBackGroung && (lastTimeWalkingDetection + corePedometer_currentsleep_between_mesures<=getCurrentSystemTime()))
                        || ( !inBackGroung && millis() - core_pedometer_step_detection_start_time>=(((long)corePedometer_currentsleep_between_mesures)*1000) )
                    ){
                        if(inBackGroung){
                            #ifdef ACCELEROMETER_ENABLE
                                driver_accelerometer_setup();
                                #ifdef DEBUG_PEDOMETER
                                    debug("DEBUG_PEDOMETER: Accelerometer is setted up " + String(millis()), 10);
                                #endif
                            #endif
                        }

                        #ifdef DEBUG_PEDOMETER
                            debug("DEBUG_PEDOMETER: Pedometer - Start step!", 10);
                        #endif
                        #ifdef PEDOMETER_ENABLE
                            core_pedometer_start_step_detection(inBackGroung);
                            core_pedometer_mesure_loop(inBackGroung);
                        #endif
                    }else{
                        #ifdef DEBUG_PEDOMETER
                            //debug("!!!!! Time is not come", 10);
                        #endif
                    }
                }
            }else{
                #ifdef DEBUG_PEDOMETER
                    debug("Pedometer is OFF!", 10);
                #endif 
            }
        }
    #endif

    #ifdef PEDOMETER_ENABLE
        void core_pedometer_mesure_loop(){ core_pedometer_mesure_loop(true); }
        void core_pedometer_mesure_loop(bool inBackGroung){
            if(core_pedometer_current_step_detection!=-1){

                if(
                    (inBackGroung) || 
                    ( (millis()-core_pedometer_step_detection_start_time)/CORE_PEDOMETER_MESURE_EVERY_MS >= core_pedometer_current_step_detection ) 
                    ){ // Mesure condition

                    #ifdef DEBUG_PEDOMETER
                        debug("DEBUG_PEDOMETER: Mesure " + String( core_pedometer_current_step_detection));
                    #endif

                    driver_accelerometer_update_accelerometer();
                    core_pedometer_step_detection_arrays[core_pedometer_current_step_detection] = driver_accelerometer_get_accel_total();

                    core_pedometer_current_step_detection++;

                    /*
                    if(
                        core_pedometer_step_detection_arrays[core_pedometer_current_step_detection-1]<0.2f ||
                        core_pedometer_step_detection_arrays[core_pedometer_current_step_detection-1]>1.8f
                    ){
                        core_pedometer_step_detection_arrays[core_pedometer_current_step_detection-1] = 1;
                        core_pedometer_current_step_detection--;
                    }*/

                    if(core_pedometer_current_step_detection==PEDOMETER_MESURES_IN_STEP_DETECTION_PERIOD){
                        core_pedometer_current_step_detection=-1;
                        driver_accelerometer_sleep();
                        core_pedometer_analyse_steps_mesure(inBackGroung);
                    }

                    //if(!inBackGroung) core_pedometer_current_step_detection++;
                }

                if(inBackGroung){
                    #ifdef DEBUG_PEDOMETER
                        // debug("PEDOMETER MESURE IN BACKGROUN", 10);
                    #endif
                    
                    #ifdef DEBUG_WAKEUP
                        debug("Mesure in BG "  + String(millis()), 10);
                    #endif

                    #ifdef PEDOMETER_ENABLE
                        core_cpu_sleep(SLEEP_LIGHT, CORE_PEDOMETER_MESURE_EVERY_MS, false); 
                        core_pedometer_mesure_loop(true);
                    #endif
                }
            }
            

        }

        void core_pedometer_start_step_detection(bool inBackGroung){
            pedometer_in_work = true;
            core_pedometer_current_step_detection = 0;
            for(int i=0; i<PEDOMETER_MESURES_IN_STEP_DETECTION_PERIOD; i++){
                core_pedometer_step_detection_arrays[i] = 0.0f;
            }
            core_pedometer_step_detection_start_time = millis();
        }
    #endif

    #ifdef DEBUG_PEDOMETER
        float analysis_max_value = -1;
        float analysis_min_value = 100;
        float analysis_delta_value;
        float analysis_central_weight_value = 0;
        float analysis_central_value;
        int analysis_axis_crossings = 0;

        float get_analysis_max_value(){             return analysis_max_value;}
        float get_analysis_min_value(){             return analysis_min_value;}
        float get_analysis_delta_value(){           return analysis_delta_value;}
        float get_analysis_central_weight_value(){  return analysis_central_weight_value;}
        float get_analysis_central_value(){         return analysis_central_value;}
        int get_analysis_axis_crossings(){          return analysis_axis_crossings;}
    #endif

    unsigned char get_corePedometer_currentsleep_between_mesures(){
        return corePedometer_currentsleep_between_mesures;
    }
    #define ABS(x) ((x)>0?(x):-(x))

    bool core_pedometer_analyse_steps_mesure(bool inBackground){

        // # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
        pedometr_mesurings_in_a_day++;

        #ifdef DEBUG_PEDOMETER
            analysis_max_value = -1;
            analysis_min_value = 100;
            analysis_delta_value;
            analysis_central_weight_value = 0;
            analysis_central_value;
            analysis_axis_crossings = 0;
        #else
            float analysis_max_value = -1;
            float analysis_min_value = 100;
            float analysis_delta_value;
            float analysis_central_weight_value = 0;
            float analysis_central_value;
            int analysis_axis_crossings = 0;
        #endif

        // getiing max and min dots
        for(int i=0; i<PEDOMETER_MESURES_IN_STEP_DETECTION_PERIOD; i++){
            if(core_pedometer_step_detection_arrays[i]>analysis_max_value){
                analysis_max_value = core_pedometer_step_detection_arrays[i];
            }

            if(core_pedometer_step_detection_arrays[i]<analysis_min_value){
                analysis_min_value = core_pedometer_step_detection_arrays[i];
            }
        }

        analysis_central_value = (analysis_max_value + analysis_min_value)/2;
        analysis_delta_value = analysis_max_value - analysis_min_value;

        bool isMin = false;
        if(core_pedometer_step_detection_arrays[0]<analysis_central_value) isMin = true;

        for(int i=0; i<PEDOMETER_MESURES_IN_STEP_DETECTION_PERIOD; i++){
            //core_pedometer_step_detection_arrays[i]
            if(
                (isMin && core_pedometer_step_detection_arrays[i]>=analysis_central_value)
                || (!isMin && core_pedometer_step_detection_arrays[i]<=analysis_central_value)
            ){
                isMin = !isMin;
                analysis_axis_crossings++;
            }

            //analysis_central_weight_value += core_pedometer_step_detection_arrays[i];
            /*
            if(core_pedometer_step_detection_arrays[i]>=analysis_central_value){
                analysis_central_weight_value += core_pedometer_step_detection_arrays[i] - analysis_central_value;
            }else{
                analysis_central_weight_value += analysis_central_value - core_pedometer_step_detection_arrays[i];
            }*/
            analysis_central_weight_value += ABS(core_pedometer_step_detection_arrays[i] - analysis_central_value);
        }

        analysis_central_weight_value = analysis_central_weight_value/PEDOMETER_MESURES_IN_STEP_DETECTION_PERIOD;

        #ifdef DEBUG_PEDOMETER
            debug("# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #");
            //debug( String("max_value: ") + analysis_max_value);
            //debug( String("min_value: ") + analysis_min_value);
            debug( String("delta_value: ") + analysis_delta_value);
            //debug( String("axis_crossings: ") + analysis_axis_crossings);
            //debug( String("central_value: ") + analysis_central_value);
            debug( String("central_weight_value: ") + analysis_central_weight_value);
            debug("                                                                    ");
        #endif
        

        #define PEDOMETER_CROSSINGS_MIN             (8*1000/PEDOMETER_STEP_DETECTION_PERIOD_MS)
        #define PEDOMETER_CROSSINGS_MAX             (16*1000/PEDOMETER_STEP_DETECTION_PERIOD_MS)
        #ifndef PEDOMETER_DELTA_VALUE_MIN
            #define PEDOMETER_DELTA_VALUE_MIN           0.5f
        #endif
        #ifndef PEDOMETER_CENTRALWIGHT_VALUE_MIN
            #define PEDOMETER_CENTRALWIGHT_VALUE_MIN    0.1f
        #endif

        // # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

        if( true && //|| 
                (
                    true
                    //&& analysis_axis_crossings<=PEDOMETER_CROSSINGS_MAX 
                    //&& analysis_axis_crossings>=PEDOMETER_CROSSINGS_MIN
                    && analysis_delta_value >= PEDOMETER_DELTA_VALUE_MIN
                    && analysis_central_weight_value>=PEDOMETER_CENTRALWIGHT_VALUE_MIN
                )
            ){
                //
                #ifdef DEBUG_PEDOMETER
                    debug("Is walking", 20);
                    //if(!inBackground) digitalWrite(10,0);
                #endif
                unsigned char hours_to_add = (PEDOMETER_DAY_VALUE_TYPE)((pedometer_days_steps_IN_SEC*( (float)( ((long)corePedometer_currentsleep_between_mesures)*1000 + PEDOMETER_STEP_DETECTION_PERIOD_MS)))/1000);
                pedometer_hours_steps[core_time_getHours_byte()] += hours_to_add;
                pedometer_days_steps[0] += hours_to_add;

                // reset sleep counting
                analyse_sleep_delta_accels = 0;
                corePedometer_currentsleep_between_mesures = PEDOMETER_STEP_DETECTION_DELAY_SEC_MIN;
            }else{
                corePedometer_currentsleep_between_mesures += PEDOMETER_STEP_DETECTION_DELAY_SEC_STEP;
                unsigned char between_mesure_realy_delay = (corePedometer_currentsleep_between_mesures + PEDOMETER_STEP_DETECTION_PERIOD_MS/1000);

                if((between_mesure_realy_delay)>=60){
                    corePedometer_currentsleep_between_mesures += 60;
                    between_mesure_realy_delay += 60;
                }
                
                if((between_mesure_realy_delay)>=60){
                    corePedometer_currentsleep_between_mesures = corePedometer_currentsleep_between_mesures - (between_mesure_realy_delay)%60;
                }

                if(between_mesure_realy_delay>PEDOMETER_STEP_DETECTION_DELAY_SEC_MAX){
                    corePedometer_currentsleep_between_mesures = PEDOMETER_STEP_DETECTION_DELAY_SEC_MAX - PEDOMETER_STEP_DETECTION_PERIOD_MS/1000;
                }

                #ifdef DEBUG_PEDOMETER
                    debug("DEBUG_PEDOMETER: Is not walking", 10);    
                #endif

                unsigned char analysis_delta_value_byte = (unsigned char)(analysis_delta_value*100.0);

                if(analysis_delta_value_byte<=COREPEDOMETER_DELTA_SLEEP_VALUE_MIN_100 && analysis_central_weight_value<=COREPEDOMETER_CENTRALWIGHT_SLEEP_VALUE_MIN){
                    #ifdef DEBUG_PEDOMETER
                        debug("DEBUG_PEDOMETER: Sleeping analyse - " + String(analyse_sleep_delta_accels));
                    #endif
                    
                    if(analyse_sleep_delta_accels>=CORE_PEDOMETER_SLEEP_COUNTING_SPOINTS){
                        #ifdef DEBUG_PEDOMETER
                            debug("IS SLEEPING");
                        #endif

                        between_mesure_realy_delay = (corePedometer_currentsleep_between_mesures + PEDOMETER_STEP_DETECTION_PERIOD_MS/1000);
                        #ifdef SLEEP_VALUE_DEBUG
                            unsigned char sleep_minutes_to_add = 1;
                        #else    
                            unsigned char sleep_minutes_to_add = (between_mesure_realy_delay+1)/60;
                        #endif
                        
                        #ifdef DEBUG_PEDOMETER_TIMING
                        
                            debug("corePedometer_currentsleep_between_mesures " + String(corePedometer_currentsleep_between_mesures));
                            debug("sleep_minutes_to_add " + String(sleep_minutes_to_add));
                            debug("between_mesure_realy_delay " + String(between_mesure_realy_delay));
                        #endif

                        #ifdef DEBUG_PEDOMETER
                            debug("sleep_minutes_to_add " + String(sleep_minutes_to_add));
                        #endif
                        pedometer_hours_sleep[core_time_getHours_byte()] += sleep_minutes_to_add;
                        pedometer_days_sleep[0] += sleep_minutes_to_add;

                    }else{
                        analyse_sleep_delta_accels++;
                    }
                }else{
                    // reset sleep counting
                    analyse_sleep_delta_accels = 0;
                }

                
                
            }

        core_pedometer_step_detection_start_time = millis();
        lastTimeWalkingDetection = getCurrentSystemTime();

        //core_pedometer_current_step_detection = -1;
        pedometer_in_work = false;
        return true;
    }


#endif

#define appNameClass    AlarmApp          // App name without spaces
#define appName         "Alarm"              // App name with spaces 

class appNameClass: public Application{
    public:
        virtual void onLoop() override;
        virtual void onDestroy() override;
        virtual void onEvent(unsigned char event, int val1, int val2, int val3, int val4, int val5) override;

        void onCreate();
        appNameClass(){ fillScreen(0, 0, 0); super_onCreate(); onCreate(); };
        static unsigned const char* getParams(const unsigned char type){
            switch(type){ 
              case PARAM_TYPE_NAME: return (unsigned char*)appName; 
              case PARAM_TYPE_ICON: return icon;
              default: return (unsigned char*)""; }
        };
        const static unsigned char icon[] PROGMEM;
      
};

void appNameClass::onCreate(){
    /*
        Write you code onCreate here
    */

    setDrawColor(255, 255, 255);
    drawString(appName, 5, STYLE_STATUSBAR_HEIGHT + 10, 2);
}

void appNameClass::onLoop(){
    /*
        Write you code onLoop here
    */
}

void appNameClass::onDestroy(){
    /*
        Write you code onDestroy here
    */
}

void appNameClass::onEvent(unsigned char event, int val1, int val2, int val3, int val4, int val5){
    
    if(event==EVENT_BUTTON_PRESSED){
        // Write you code on [val1] button pressed here
        if(val1==BUTTON_BACK){
            startApp(-1);
        }

    }else if(event==EVENT_BUTTON_RELEASED){
        // Write you code on [val1] button released here
    }else if(event==EVENT_BUTTON_LONG_PRESS){
        // Write you code on [val1] button long press here
    }else if(event==EVENT_ON_TIME_CHANGED){
        // Write you code on system time changed
    }
    
}

const unsigned char appNameClass::icon[] PROGMEM = {
    
	/*            PUT YOUR ICON HERE            */

    0x02,0x01,0x02,0x20,0x02,0x20,0x04,0xff,0xd9,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xF0,0x00,0x00,0x37,0xFC,
    0x00,0x00,0x6F,0xFE,0x00,0x00,0xDF,0xFF,0x00,0x00,0xDF,0xFF,0x00,0x01,0x9F,0xFF,0x80,0x01,0x9F,0xFF,0x80,
    0x01,0x9F,0xFF,0x80,0x01,0x9F,0xFF,0x80,0x01,0x9F,0xFF,0x80,0x01,0x9F,0xFF,0x80,0x01,0x9F,0xFF,0x80,0x01,
    0x9F,0xFF,0x80,0x01,0x9F,0xFF,0x80,0x01,0x9F,0xFF,0x80,0x01,0xDF,0xFF,0x80,0x00,0x7F,0xFE,0x00,0x00,0x0F,
    0xF0,0x00,0x03,0x80,0x01,0xC0,0x03,0xF0,0x0F,0xC0,0x07,0x3F,0xFF,0xE0,0x0C,0x7F,0xFF,0xF0,0x18,0xFF,0xFF,
    0xF8,0x71,0xFF,0xFF,0xFE,0x79,0xFF,0xFF,0xFE,0x1F,0xFF,0xFF,0xF8,0x03,0xFF,0xFF,0xC0,0x00,0x7F,0xFE,0x00,
    0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x60,
    0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x60,0x00,
    0x00,0x00,0x60,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x20,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x03,
    0x80,0x00,0x00,0x07,0x00,0x00,0x00,0x0E,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xd8,0xd8,
    0xd8,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x60,0x00,0x00,0x03,0xC0,0x00,0x00,
    0x01,0x80,0x00,0x04,0x8f,0x8f,0x8f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x01,0x80,0x01,0xF0,0x0F,0x80,0x00,
    0x7F,0xFE,0x00,0x00,0x0F,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};


#define appNameClass                        BatteryApp              // App name without spaces
#define appName                             "Battery"              // App name with spaces 

#ifndef APP_BATTERY_UPDATE_EVERY_MS
    #define APP_BATTERY_UPDATE_EVERY_MS         500
#endif

#ifndef APP_BATTERY_FONT_SIZE
    #define APP_BATTERY_FONT_SIZE FONT_SIZE_DEFAULT
#endif

class appNameClass: public Application{
    public:
        virtual void onLoop() override;
        virtual void onDestroy() override;
        virtual void onEvent(unsigned char event, int val1, int val2, int val3, int val4, int val5) override;

        void onCreate();
        appNameClass(){ 
            #ifdef LIGHT_COLOR_THEME
                fillScreen(255, 255, 255); 
            #else
                fillScreen(0, 0, 0); 
            #endif
            super_onCreate();           // Drawind statusbar and etc if needed
            onCreate(); 
        };

        void drawInfo();
        long lastUpdate = 0;

        static unsigned const char* getParams(const unsigned char type){
            switch(type){ 
              case PARAM_TYPE_NAME: return (unsigned char*)appName; 
              case PARAM_TYPE_ICON: return icon;
              default: return (unsigned char*)""; }
        };
        const static unsigned char icon[] PROGMEM;
        
        unsigned char currentPrintScreenString = 0;
        void drawStringOnScreen(String stringToPrint);
};

void appNameClass::drawStringOnScreen(String stringToPrint){
    #ifdef ROUND_SCREEN
        drawString_centered(stringToPrint, SCREEN_WIDTH/2, STYLE_STATUSBAR_HEIGHT + currentPrintScreenString*10*APP_BATTERY_FONT_SIZE + 10, APP_BATTERY_FONT_SIZE);
        currentPrintScreenString ++;
    #else
        drawString(stringToPrint, 5, STYLE_STATUSBAR_HEIGHT + currentPrintScreenString*10*APP_BATTERY_FONT_SIZE + 10, APP_BATTERY_FONT_SIZE);
        currentPrintScreenString ++;
    #endif
}

/*
float driver_battery_getVoltage()
int driver_battery_getVoltage_mV()
float driver_battery_getCurent_mA()
float driver_battery_getUsbVoltage()
float driver_battery_getUsbCurent_mA()
float driver_battery_controller_Temp()
float driver_battery_Temp()
unsigned char driver_battery_getPercent()
*/

void appNameClass::onCreate(){
    #ifdef LIGHT_COLOR_THEME
        setBackgroundColor(255, 255, 255); 
    #else
        setBackgroundColor(0, 0, 0);
    #endif

    DRAW_LIMITS_setEnable(true);
    DRAW_LIMIT_reset();
    DRAW_LIMITS_setEnable(STYLE_STATUSBAR_HEIGHT, -1, -1, -1);
    this->drawInfo();
}

void appNameClass::drawInfo(){
    this->lastUpdate = millis();
    this->currentPrintScreenString = 0;

    #ifdef LIGHT_COLOR_THEME
        setDrawColor(0, 0, 0);
    #else
        setDrawColor(255, 255, 255);
    #endif

    #ifdef BATTERY_ENABLE
        //#ifdef NARROW_SCREEN
            drawStringOnScreen("Bat voltage:");
            drawStringOnScreen(String(driver_battery_getVoltage()) + " V");
            
            drawStringOnScreen("Bat voltage:");
            drawStringOnScreen(String(driver_battery_getVoltage_mV()) + " mV");
            
            drawStringOnScreen("Bat current:");
            drawStringOnScreen(String(driver_battery_getCurent_mA()) + " mA");
                        
            drawStringOnScreen("Usb voltage:");
            drawStringOnScreen(String(driver_battery_getUsbVoltage()) + " mV");

            drawStringOnScreen("Usb current:");
            drawStringOnScreen(String(driver_battery_getUsbCurent_mA()) + " mA");
            
            /*
            drawStringOnScreen("Vin voltage:");
            drawStringOnScreen(String(driver_battery_getVinVoltage()) + " mV");

            drawStringOnScreen("Vin current:");
            drawStringOnScreen(String(driver_battery_getVinCurent_mA()) + " mA");

            drawStringOnScreen("Battery temp:");
            drawStringOnScreen(String(driver_battery_Temp()) + " C");
            
            drawStringOnScreen("Controller temp:");
            drawStringOnScreen(String(driver_battery_controller_Temp()) + " C");
            */

            drawStringOnScreen("Battery:");
            drawStringOnScreen(String(core_battery_getPercent()) + " %");
    
            drawStringOnScreen("Battery is charging:");
            if(driver_battery_isCharging()) drawStringOnScreen("True");
            else drawStringOnScreen("False");

            drawStringOnScreen("USB is connected:");
            if(driver_battery_isUsbConnected()) drawStringOnScreen("True");
            else drawStringOnScreen("False");
        //#else
            
        //#endif
        
    #else
        drawStringOnScreen("Battery not supported");
    #endif
}

void appNameClass::onLoop(){
    /*
        Write you code onLoop here
    */
    #ifdef BATTERY_ENABLE
        if(millis()-this->lastUpdate>APP_BATTERY_UPDATE_EVERY_MS){
            //fillScreen(0, 0, 0);
            setDrawColor_BackGroundColor();
            drawRect(0, STYLE_STATUSBAR_HEIGHT, SCREEN_WIDTH, SCREEN_HEIGHT, true);
            this->drawInfo();
            #ifdef PARTIAL_DISPLAY_DRAWING
                driver_display_partial_loop();
            #endif
        }
    #endif
}

void appNameClass::onDestroy(){
    /*
        Write you code onDestroy here
    */
}

void appNameClass::onEvent(unsigned char event, int val1, int val2, int val3, int val4, int val5){
    #if (DRIVER_CONTROLS_TOTALBUTTONS == 2 || DRIVER_CONTROLS_TOTALBUTTONS == 1)
        if(event==EVENT_BUTTON_PRESSED){
            // Write you code on [val1] button pressed here
            if(val1==BUTTON_POWER){
                startApp(-1);
            }
        }else if(event==EVENT_BUTTON_DOUBLE_PRESS){
            if(val1==BUTTON_SELECT){
                startApp(-1);
            }
        }
    #else
        if(event==EVENT_BUTTON_PRESSED){
            // Write you code on [val1] button pressed here
            if(val1==BUTTON_BACK){
                startApp(-1);
            }
        }else if(event==EVENT_BUTTON_RELEASED){
            // Write you code on [val1] button released here
        }else if(event==EVENT_BUTTON_LONG_PRESS){
            // Write you code on [val1] button long press here
        }else if(event==EVENT_ON_TIME_CHANGED){
            // Write you code on system time changed
        }
    #endif

    #ifdef TOUCH_SCREEN_ENABLE
        if(event==EVENT_ON_TOUCH_START){
            startApp(-1);
        }
    #endif
}

const unsigned char appNameClass::icon[] PROGMEM = {
    
	/*            PUT YOUR ICON HERE            */
    #ifdef USE_L_MENU_IMAGES
    #elif defined(USE_XL_MENU_IMAGES)
        #ifdef COLOR_GRAY_16
            0x02,0x01,0x02,0x50,0x02,0x50,0x04,0x7E,0x7E,0x7E,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x40,0x02,0x00,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x40,0x02,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x40,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x80,0x01,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x01,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x02,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x40,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x80,0x00,0x08,0x00,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x04,0x3E,0x3E,0x3E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x02,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x1F,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x50,0x00,0x00,0x0A,0x00,0x00,0x00,0x08,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x10,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x10,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x08,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x20,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x04,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x40,0x00,0x00,0x40,0x00,0x00,0x42,0x00,0x00,0x02,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x42,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x42,0x00,0x00,0x42,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x42,0x00,0x00,0x42,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x40,0x00,0x00,0x41,0xFF,0xFF,0x82,0x00,0x00,0x02,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x20,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x04,0x00,0x00,0x00,0x42,0x00,0x00,0x42,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x10,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x08,0x00,0x00,0x00,0x42,0x00,0x00,0x42,0x00,0x00,0x00,0x08,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x10,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x04,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x20,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x02,0x00,0x00,0x42,0x00,0x00,0x42,0x00,0x00,0x40,0x00,0x00,0x00,0x50,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x0A,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xE0,0x00,0x00,0x00,0x00,0x40,0x00,0x20,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x3F,0xFF,0xFF,0xC0,0x01,0xFF,0xFF,0xFC,0x00,0x00,0x7F,0xFF,0xFF,0x80,0x01,0xFF,0xFF,0xFE,0x00,0x00,0xFF,0xFF,0xFF,0x9F,0xF9,0xFF,0xFF,0xFF,0x00,0x01,0xFF,0xFF,0xFF,0x9F,0xF9,0xFF,0xFF,0xFF,0x80,0x01,0xFF,0xFF,0xE0,0x1F,0xF8,0x07,0xFF,0xFF,0x80,0x03,0xFF,0xFF,0xC0,0x00,0x00,0x03,0xFF,0xFF,0xC0,0x03,0xFF,0xFF,0x8F,0xFF,0xFF,0xF3,0xFF,0xFF,0xC0,0x07,0xFF,0xFF,0x8F,0xFF,0xFF,0xF1,0xFF,0xFF,0xE0,0x07,0xFF,0xFF,0x9F,0xFF,0xFF,0xF9,0xFF,0xFF,0xE0,0x0F,0xFF,0xFF,0x9F,0xFF,0xFF,0xF9,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0x9F,0xFF,0xFF,0xF9,0xFF,0xFF,0xF0,0x1F,0xFF,0xFF,0x9F,0xFF,0xFF,0xF9,0xFF,0xFF,0xF8,0x1F,0xFF,0xFF,0x9F,0xFF,0xFF,0xF9,0xFF,0xFF,0xF8,0x1F,0xFF,0xFF,0x9F,0xFF,0xFF,0xF9,0xFF,0xFF,0xF8,0x3F,0xFF,0xFF,0x9F,0xFF,0xFF,0xF9,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0x9F,0xFF,0xFF,0xF9,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0x9F,0xFF,0xFF,0xF9,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0x9E,0x00,0x00,0x39,0xFF,0xFF,0xFC,0x7F,0xFF,0xFF,0x9E,0x00,0x00,0x39,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0x9E,0x00,0x00,0x39,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0x9E,0x00,0x00,0x39,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0x9E,0x00,0x00,0x39,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0x9F,0xFF,0xFF,0xF9,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0x9F,0xFF,0xFF,0xF9,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0x9F,0xFF,0xFF,0xF9,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0x9C,0x00,0x00,0x39,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0x9C,0x00,0x00,0x39,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0x9C,0x00,0x00,0x39,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0x9C,0x00,0x00,0x39,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0x9C,0x00,0x00,0x39,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0x9F,0xFF,0xFF,0xF9,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0x9F,0xFF,0xFF,0xF9,0xFF,0xFF,0xFE,0x3F,0xFF,0xFF,0x9E,0x00,0x00,0x79,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0x9C,0x00,0x00,0x39,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0x9C,0x00,0x00,0x39,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0x9C,0x00,0x00,0x39,0xFF,0xFF,0xFC,0x1F,0xFF,0xFF,0x9C,0x00,0x00,0x39,0xFF,0xFF,0xF8,0x1F,0xFF,0xFF,0x9C,0x00,0x00,0x39,0xFF,0xFF,0xF8,0x1F,0xFF,0xFF,0x9F,0xFF,0xFF,0xF9,0xFF,0xFF,0xF8,0x0F,0xFF,0xFF,0x9F,0xFF,0xFF,0xF9,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0x9C,0x00,0x00,0x39,0xFF,0xFF,0xF0,0x07,0xFF,0xFF,0x9C,0x00,0x00,0x39,0xFF,0xFF,0xE0,0x07,0xFF,0xFF,0x9C,0x00,0x00,0x39,0xFF,0xFF,0xE0,0x03,0xFF,0xFF,0x9C,0x00,0x00,0x39,0xFF,0xFF,0xC0,0x03,0xFF,0xFF,0x9C,0x00,0x00,0x39,0xFF,0xFF,0xC0,0x01,0xFF,0xFF,0x9C,0x00,0x00,0x39,0xFF,0xFF,0x80,0x01,0xFF,0xFF,0x8F,0xFF,0xFF,0xF9,0xFF,0xFF,0x80,0x00,0xFF,0xFF,0x8F,0xFF,0xFF,0xF1,0xFF,0xFF,0x00,0x00,0x7F,0xFF,0xC0,0x00,0x00,0x03,0xFF,0xFE,0x00,0x00,0x3F,0xFF,0xC0,0x00,0x00,0x07,0xFF,0xFC,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        #else
            0x02,0x01,0x02,0x50,0x02,0x50,0x04,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFE,0x00,0x00,0x00,0x1F,0xF8,0x00,0x00,0x00,0x7F,0xFE,0x00,0x00,0x00,0x1F,0xF8,0x00,0x00,0x00,0x7F,0xFC,0x00,0x00,0x00,0x1F,0xF8,0x00,0x00,0x00,0x3F,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xF8,0x00,0x00,0x0F,0xFF,0xFF,0xF0,0x00,0x00,0x1F,0xF0,0x00,0x00,0x1F,0xFF,0xFF,0xF8,0x00,0x00,0x0F,0xF0,0x00,0x00,0x1F,0xFF,0xFF,0xF8,0x00,0x00,0x0F,0xE0,0x00,0x00,0x1F,0xFF,0xFF,0xF8,0x00,0x00,0x07,0xE0,0x00,0x00,0x1F,0xFF,0xFF,0xF8,0x00,0x00,0x07,0xE0,0x00,0x00,0x1F,0xFF,0xFF,0xF8,0x00,0x00,0x07,0xC0,0x00,0x00,0x1F,0xFF,0xFF,0xF8,0x00,0x00,0x03,0xC0,0x00,0x00,0x1F,0xFF,0xFF,0xF8,0x00,0x00,0x03,0xC0,0x00,0x00,0x1F,0xFF,0xFF,0xF8,0x00,0x00,0x03,0x80,0x00,0x00,0x1F,0xFF,0xFF,0xF8,0x00,0x00,0x01,0x80,0x00,0x00,0x1F,0xFF,0xFF,0xF8,0x00,0x00,0x01,0x80,0x00,0x00,0x1E,0x00,0x00,0x78,0x00,0x00,0x01,0x80,0x00,0x00,0x1C,0x00,0x00,0x38,0x00,0x00,0x01,0x80,0x00,0x00,0x1C,0x00,0x00,0x38,0x00,0x00,0x01,0x80,0x00,0x00,0x1C,0x00,0x00,0x38,0x00,0x00,0x01,0x00,0x00,0x00,0x1E,0x00,0x00,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x00,0x00,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x00,0x38,0x00,0x00,0x00,0x80,0x00,0x00,0x1E,0x00,0x00,0x78,0x00,0x00,0x01,0x80,0x00,0x00,0x1F,0xFF,0xFF,0xF8,0x00,0x00,0x01,0x80,0x00,0x00,0x1F,0xFF,0xFF,0xF8,0x00,0x00,0x01,0x80,0x00,0x00,0x1F,0xFF,0xFF,0xF8,0x00,0x00,0x01,0x80,0x00,0x00,0x1E,0x00,0x00,0x78,0x00,0x00,0x01,0x80,0x00,0x00,0x1C,0x00,0x00,0x38,0x00,0x00,0x01,0xC0,0x00,0x00,0x1C,0x00,0x00,0x38,0x00,0x00,0x03,0xC0,0x00,0x00,0x1C,0x00,0x00,0x38,0x00,0x00,0x03,0xC0,0x00,0x00,0x1E,0x00,0x00,0x78,0x00,0x00,0x03,0xE0,0x00,0x00,0x1F,0xFF,0xFF,0xF8,0x00,0x00,0x07,0xE0,0x00,0x00,0x1F,0xFF,0xFF,0xF8,0x00,0x00,0x07,0xE0,0x00,0x00,0x1F,0xFF,0xFF,0xF8,0x00,0x00,0x07,0xF0,0x00,0x00,0x1E,0x00,0x00,0x78,0x00,0x00,0x0F,0xF0,0x00,0x00,0x1C,0x00,0x00,0x38,0x00,0x00,0x0F,0xF8,0x00,0x00,0x1C,0x00,0x00,0x38,0x00,0x00,0x1F,0xF8,0x00,0x00,0x1C,0x00,0x00,0x38,0x00,0x00,0x1F,0xFC,0x00,0x00,0x1E,0x00,0x00,0x78,0x00,0x00,0x3F,0xFE,0x00,0x00,0x1F,0xFF,0xFF,0xF8,0x00,0x00,0x7F,0xFE,0x00,0x00,0x0F,0xFF,0xFF,0xF0,0x00,0x00,0x7F,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0xFF,0xFF,0x04,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x0F,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x7F,0xFF,0xFF,0xC0,0x03,0xFF,0xFF,0xFE,0x00,0x00,0xFF,0xFF,0xFF,0x80,0x01,0xFF,0xFF,0xFF,0x00,0x01,0xFF,0xFF,0xFF,0x80,0x01,0xFF,0xFF,0xFF,0x80,0x01,0xFF,0xFF,0xFF,0x80,0x01,0xFF,0xFF,0xFF,0x80,0x03,0xFF,0xFF,0xE0,0x00,0x00,0x07,0xFF,0xFF,0xC0,0x07,0xFF,0xFF,0xC0,0x00,0x00,0x03,0xFF,0xFF,0xE0,0x07,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xE0,0x0F,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xF0,0x1F,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xF8,0x1F,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xF8,0x1F,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xF8,0x3F,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xFC,0x7F,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xFE,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xFF,0x7F,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xFE,0x3F,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xFC,0x1F,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xF8,0x1F,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xF8,0x1F,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xF8,0x0F,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xF0,0x07,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xE0,0x07,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xE0,0x03,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xC0,0x01,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0x80,0x01,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0x80,0x00,0xFF,0xFF,0xC0,0x00,0x00,0x03,0xFF,0xFF,0x00,0x00,0x7F,0xFF,0xE0,0x00,0x00,0x07,0xFF,0xFE,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xF0,0x00,0x00,0x00,0x00,0x04,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xE0,0x07,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x00,0x00,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x61,0xFF,0xFF,0x86,0x00,0x00,0x00,0x00,0x00,0x00,0x63,0xFF,0xFF,0xC6,0x00,0x00,0x00,0x00,0x00,0x00,0x63,0xFF,0xFF,0xC6,0x00,0x00,0x00,0x00,0x00,0x00,0x63,0xFF,0xFF,0xC6,0x00,0x00,0x00,0x00,0x00,0x00,0x61,0xFF,0xFF,0x86,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x61,0xFF,0xFF,0x86,0x00,0x00,0x00,0x00,0x00,0x00,0x63,0xFF,0xFF,0xC6,0x00,0x00,0x00,0x00,0x00,0x00,0x63,0xFF,0xFF,0xC6,0x00,0x00,0x00,0x00,0x00,0x00,0x63,0xFF,0xFF,0xC6,0x00,0x00,0x00,0x00,0x00,0x00,0x61,0xFF,0xFF,0x86,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x61,0xFF,0xFF,0x86,0x00,0x00,0x00,0x00,0x00,0x00,0x63,0xFF,0xFF,0xC6,0x00,0x00,0x00,0x00,0x00,0x00,0x63,0xFF,0xFF,0xC6,0x00,0x00,0x00,0x00,0x00,0x00,0x63,0xFF,0xFF,0xC6,0x00,0x00,0x00,0x00,0x00,0x00,0x61,0xFF,0xFF,0x86,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x61,0xFF,0xFF,0x86,0x00,0x00,0x00,0x00,0x00,0x00,0x63,0xFF,0xFF,0xC6,0x00,0x00,0x00,0x00,0x00,0x00,0x63,0xFF,0xFF,0xC6,0x00,0x00,0x00,0x00,0x00,0x00,0x63,0xFF,0xFF,0xC6,0x00,0x00,0x00,0x00,0x00,0x00,0x61,0xFF,0xFF,0x86,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x00,0x00,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        #endif
        
    #else
        // small image
        0x02,0x01,0x02,0x20,0x02,0x20,0x04,0x33,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xE0,0x00,0x00,0x07,0xE0,0x00,0x00,0x07,0xE0,
        0x00,0x0F,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0xF0,
        0x0F,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0xF0,0x0F,
        0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0xF0,0x0F,0xFF,
        0xFF,0xF0,0x0F,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,
        0xF0,0x0F,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x04,0xff,0xff,0xff,0x00,0x07,0xE0,0x00,0x00,0x08,0x10,0x00,
        0x00,0x08,0x10,0x00,0x0F,0xF8,0x1F,0xF0,0x10,0x00,0x00,0x08,0x10,0x00,0x00,0x08,0x10,0x00,0x00,0x08,0x10,0x00,0x00,0x08,0x10,
        0x00,0x00,0x08,0x10,0x00,0x00,0x08,0x10,0x00,0x00,0x08,0x10,0x00,0x00,0x08,0x10,0x00,0x00,0x08,0x10,0x00,0x00,0x08,0x10,0x00,
        0x00,0x08,0x10,0x00,0x00,0x08,0x10,0x00,0x00,0x08,0x10,0x00,0x00,0x08,0x10,0x00,0x00,0x08,0x10,0x00,0x00,0x08,0x10,0x00,0x00,
        0x08,0x10,0x00,0x00,0x08,0x10,0x00,0x00,0x08,0x10,0x00,0x00,0x08,0x10,0x00,0x00,0x08,0x10,0x00,0x00,0x08,0x10,0x00,0x00,0x08,
        0x10,0x00,0x00,0x08,0x10,0x00,0x00,0x08,0x10,0x00,0x00,0x08,0x10,0x00,0x00,0x08,0x0F,0xFF,0xFF,0xF0,
    #endif
    
};

/* 
* /
#define DRIVER_CONTROLS_TOTALBUTTONS 1
#define SMOOTH_ANIMATION
#define NARROW_SCREEN
// */
//#define DRIVER_CONTROLS_TOTALBUTTONS 1

#define appNameClass    SettingsApp     // App name without spaces
#define appName         "Settings"      // App name with spaces 

#define CORE_VIEWS_SETTINGS_IMAGE_WIDTH 24
#define SETTINGS_ELEMENTS

#define PAGES_LIST_HEIGHT               20
#define ACTIVE_SCREEN_WIDTH             SCREEN_WIDTH
#define ACTIVE_SCREEN_HEIGHT            (SCREEN_HEIGHT - STYLE_STATUSBAR_HEIGHT - PAGES_LIST_HEIGHT)
#define SINGLE_ELEMENT_MIN_WIDTH        200
#define SINGLE_ELEMENT_MIN_HEIGHT       60

#define SINGLE_ELEMENTS_IN_X            ((int)(ACTIVE_SCREEN_WIDTH/SINGLE_ELEMENT_MIN_WIDTH))
#define SINGLE_ELEMENTS_IN_Y            ((int)(ACTIVE_SCREEN_HEIGHT/SINGLE_ELEMENT_MIN_HEIGHT))

#define SINGLE_ELEMENTS_IN_X_MACRO      ((ACTIVE_SCREEN_WIDTH/SINGLE_ELEMENT_MIN_WIDTH))
#define SINGLE_ELEMENTS_IN_Y_MACRO      ((ACTIVE_SCREEN_HEIGHT/SINGLE_ELEMENT_MIN_HEIGHT))

#if ((ACTIVE_SCREEN_WIDTH/SINGLE_ELEMENT_MIN_WIDTH)) < 1
  #define SINGLE_ELEMENTS_IN_X 1
  #define SINGLE_ELEMENTS_IN_X_MACRO 1
#endif

#if ((ACTIVE_SCREEN_HEIGHT/SINGLE_ELEMENT_MIN_HEIGHT)) < 1
  #define SINGLE_ELEMENTS_IN_Y 1
  #define SINGLE_ELEMENTS_IN_Y_MACRO 1
#endif

#if ( ((SINGLE_ELEMENTS_IN_X_MACRO)==1) && ((SINGLE_ELEMENTS_IN_Y_MACRO)==1))
  #define SINGLE_ELEMENT_ON_SCREEN
#endif

#if defined(NARROW_SCREEN) || defined(WATCH_SCREEN)
  #define SINGLE_ELEMENTS_IN_X 1
  #define SINGLE_ELEMENTS_IN_X_MACRO 1
  #define SINGLE_ELEMENTS_IN_Y 1
  #define SINGLE_ELEMENTS_IN_Y_MACRO 1
  #define SINGLE_ELEMENT_ON_SCREEN
#endif

#define SINGLE_ELEMENT_REAL_WIDTH       ((int)(ACTIVE_SCREEN_WIDTH/SINGLE_ELEMENTS_IN_X))
#define SINGLE_ELEMENT_REAL_HEIGHT      ((int)(ACTIVE_SCREEN_HEIGHT/SINGLE_ELEMENTS_IN_Y))

#define PAGES_LIST_POSITION             (SCREEN_HEIGHT-PAGES_LIST_HEIGHT/2)
#define APPS_ON_SINGLE_PAGE             (SINGLE_ELEMENTS_IN_X * SINGLE_ELEMENTS_IN_Y)


// SUBMENUES
#define APP_SETTINGS_SUBMENU_MAIN           0x00
#define APP_SETTINGS_SUBMENU_SET_TIME       0x01
#define APP_SETTINGS_SUBMENU_SET_DATE       0x02
#define APP_SETTINGS_SUBMENU_SCREEN         0x03
#define APP_SETTINGS_SUBMENU_PEDOMETER      0x04
//#define APP_SETTINGS_SUBMENU_POWERSAVE      0x04

// SETTINGS PAGES
#define APP_SETTINGS_PAGE_TOTAL_ELEMENTS_MAIN       4
#define APP_SETTINGS_PAGE_TOTAL_ELEMENTS_SET_TIME   3
#define APP_SETTINGS_PAGE_TOTAL_ELEMENTS_SET_DATE   4
#define APP_SETTINGS_PAGE_TOTAL_ELEMENTS_SCREEN     4
#define APP_SETTINGS_PAGE_TOTAL_ELEMENTS_PEDOMETER  1


// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # //

class appNameClass: public Application{
    public:
        virtual void onLoop() override;
        virtual void onDestroy() override;
        virtual void onEvent(unsigned char event, int val1, int val2, int val3, int val4, int val5) override;

        void onCreate();
        appNameClass(){ fillScreen(0, 0, 0); super_onCreate(); onCreate(); };
        static unsigned const char* getParams(const unsigned char type){
          switch(type){ 
            case PARAM_TYPE_NAME: return (unsigned char*)appName; 
            case PARAM_TYPE_ICON: return icon;
            default: return (unsigned char*)""; 
          }
        };
        const static unsigned char icon[] PROGMEM;
      
    private:
        const unsigned char* getApplicationTitle(unsigned char submenu, unsigned char num);
        const unsigned char* getApplicationIcon(unsigned char submenu, unsigned char num);
        void drawIcons(bool draw);
        void updateActiveAppIndex(int newSelectedAppIndex);
        void drawActiveAppFrame(bool draw);
        unsigned char getTotalPagesInSubMenu(unsigned char submenuType);
        unsigned char getTotalApplicationsInSubMenu(unsigned char subMenu);
        char app_settings_selectedAppIndex = 0;
        const static unsigned char def[]                PROGMEM;
        const static unsigned char icon_pedometer[]       PROGMEM;
        const static unsigned char icon_light[]         PROGMEM;
        const static unsigned char icon_time[]          PROGMEM;
        const static unsigned char icon_date[]          PROGMEM;
        const static unsigned char icon_sleep[]         PROGMEM;
        unsigned char currentSubMenu       = APP_SETTINGS_SUBMENU_MAIN;
        String getApplicationSubTitle(unsigned char submenu, unsigned char num);
        String getApplicationSubTitle(unsigned char submenu, unsigned char num, bool getLast);
        void drawSettingsPageFirstTime();
        void clearWorkSpace();
        void switchToSubMenu(unsigned char newSubMenu);
        void drawSettingTimeArrows(bool draw, int position);
        void drawSettingTimeSelect(bool draw, int position);
        void drawSettingTimeDigits(bool draw);
        void drawSettingTimeDateDigits(bool draw, unsigned char position, int value);
        unsigned char lastSeconds   = 0;
        unsigned char lastMinutes   = 0;
        unsigned char lastHours     = 0;
        void pressPrevious();
        void pressNext();
        void pressSelect();

        String lastTimeString           = "";
        String lastDateString           = "";
        String lastBatteryString        = "";

        String lastTimeString_hours     = "";
        String lastTimeString_minutes   = "";
        String lastTimeString_seconds   = "";
        String lastDateString_year      = "";
        String lastDateString_month     = "";
        String lastDateString_date      = "";
        String lastDateString_weekDay   = "";

        #if (DRIVER_CONTROLS_TOTALBUTTONS == 2 || DRIVER_CONTROLS_TOTALBUTTONS == 1)
            unsigned long stillPressingSelect_time = 0;
        #endif

        char currentSelectedPosition        = 0;
        bool currentPositionIsSelected      = false;
        
        int getPositionBySelectedNumber(unsigned char selectedNumber);

        void draw_element_title(bool draw, int x, int y, const unsigned char* title, String title2);
        void draw_element_icon(bool draw, const unsigned char* icon, int x, int y);
        void draw_settings_item(bool draw, int x, int y, const unsigned char* title, String subTitle, const unsigned char* icon);
        void draw_settings_item_noicon(bool draw, int x, int y, String title, String subTitle);
};

#if defined(USE_XL_MENU_IMAGES)
    #define CORE_VIEWS_SETTINGS_IMAGE_WIDTH         64

    #define APP_SETTINGS_MENU_IMAGE_Y_OFFSET        (-20)
    #define APP_SETTINGS_MENU_IMAGE_X_OFFSET        0
    #define APP_SETTINGS_MENU_TITLE_Y_SIZE          2
    #define APP_SETTINGS_MENU_SUBTITLE_Y_SIZE       2
    #define APP_SETTINGS_MENU_TITLE_Y_OFFSET        20
    #define APP_SETTINGS_MENU_SUBTITLE_Y_OFFSET     45

    #define APP_SETTINGS_TITLE_FONT_SIZE            2
    #define APP_SETTINGS_SUBTITLE_FONT_SIZE         3

    #define APPP_SETTINGS_NO_ICON_ELEMENT_HEIGHT    55
    #define APPP_SETTINGS_NO_ICON_ELEMENT_OFFSET    (8)

#elif defined(USE_L_MENU_IMAGES)
    #define CORE_VIEWS_SETTINGS_IMAGE_WIDTH         48

    #define APP_SETTINGS_MENU_IMAGE_Y_OFFSET        0
    #define APP_SETTINGS_MENU_IMAGE_X_OFFSET        0
    #define APP_SETTINGS_MENU_TITLE_Y_SIZE          1
    #define APP_SETTINGS_MENU_SUBTITLE_Y_SIZE       1
    #define APP_SETTINGS_MENU_TITLE_Y_OFFSET        10
    #define APP_SETTINGS_MENU_SUBTITLE_Y_OFFSET     30

    #define APP_SETTINGS_TITLE_FONT_SIZE            1
    #define APP_SETTINGS_SUBTITLE_FONT_SIZE         2

    #define APPP_SETTINGS_NO_ICON_ELEMENT_HEIGHT    55
    #define APPP_SETTINGS_NO_ICON_ELEMENT_OFFSET    0
#else
    #define CORE_VIEWS_SETTINGS_IMAGE_WIDTH         24
    
    #define APP_SETTINGS_MENU_IMAGE_Y_OFFSET        10
    #define APP_SETTINGS_MENU_IMAGE_X_OFFSET        12
    #define APP_SETTINGS_MENU_TITLE_Y_SIZE          1
    #define APP_SETTINGS_MENU_SUBTITLE_Y_SIZE       1
    #define APP_SETTINGS_MENU_TITLE_Y_OFFSET        10
    #define APP_SETTINGS_MENU_SUBTITLE_Y_OFFSET     30

    #define APP_SETTINGS_TITLE_FONT_SIZE            1
    #define APP_SETTINGS_SUBTITLE_FONT_SIZE         2

    #define APPP_SETTINGS_NO_ICON_ELEMENT_HEIGHT    40
    #define APPP_SETTINGS_NO_ICON_ELEMENT_OFFSET    0

#endif

void appNameClass::draw_settings_item_noicon(bool draw, int x, int y, String title, String subTitle){
    
    if(draw){
        setDrawColor_ContrastColor();

        drawString(
            title,                                                                                              
            x - title.length()*FONT_CHAR_WIDTH/2*APP_SETTINGS_TITLE_FONT_SIZE,                                  
            y - APPP_SETTINGS_NO_ICON_ELEMENT_HEIGHT/2 + APPP_SETTINGS_NO_ICON_ELEMENT_OFFSET,                  
            APP_SETTINGS_TITLE_FONT_SIZE                                                                        
        );

        drawString(
            subTitle,                                                                                           
            x - subTitle.length()*FONT_CHAR_WIDTH/2*APP_SETTINGS_SUBTITLE_FONT_SIZE,                            
            y + APPP_SETTINGS_NO_ICON_ELEMENT_HEIGHT/2 - APP_SETTINGS_SUBTITLE_FONT_SIZE * FONT_CHAR_HEIGHT + APPP_SETTINGS_NO_ICON_ELEMENT_OFFSET,
            APP_SETTINGS_SUBTITLE_FONT_SIZE                                                                     
        );
    }else{
        setDrawColor_BackGroundColor();
        clearString(
            title,                                                                                              
            x - title.length()*FONT_CHAR_WIDTH/2*APP_SETTINGS_TITLE_FONT_SIZE,                                  
            y - APPP_SETTINGS_NO_ICON_ELEMENT_HEIGHT/2 + APPP_SETTINGS_NO_ICON_ELEMENT_OFFSET,                  
            APP_SETTINGS_TITLE_FONT_SIZE                                                                        
        );

        clearString(
            subTitle,                                                                                           
            x - subTitle.length()*FONT_CHAR_WIDTH/2*APP_SETTINGS_SUBTITLE_FONT_SIZE,                            
            y + APPP_SETTINGS_NO_ICON_ELEMENT_HEIGHT/2 - APP_SETTINGS_SUBTITLE_FONT_SIZE * FONT_CHAR_HEIGHT + APPP_SETTINGS_NO_ICON_ELEMENT_OFFSET,
            APP_SETTINGS_SUBTITLE_FONT_SIZE                                                                      
        );
    }

    //setDrawColor_BackGroundColor();
    #ifdef TOUCH_SCREEN_ENABLE
        //40X24 - XL images
        //getIcon_arrow_down();
        //getIcon_arrow_up();
        drawImage(draw, getIcon_arrow_up(), SCREEN_WIDTH/2 - 12, STYLE_STATUSBAR_HEIGHT + 10);
        drawImage(draw, getIcon_arrow_down(), SCREEN_WIDTH/2 - 12, SCREEN_HEIGHT - 24 - 10);
    #endif

}

void appNameClass::draw_element_title(bool draw, int x, int y, const unsigned char* title, String title2){

    uint16_t titleShift = strlen((const char*)title)*APP_SETTINGS_MENU_TITLE_Y_SIZE*FONT_CHAR_WIDTH/2;
    uint16_t subTitleShift = title2.length()*APP_SETTINGS_MENU_SUBTITLE_Y_SIZE*FONT_CHAR_WIDTH/2;

    #if APP_SETTINGS_MENU_SUBTITLE_Y_SIZE == 1
        x+=2;   
    #endif

    if(draw){
        setDrawColor_ContrastColor();
        drawString((char*)title, x - titleShift,  y+APP_SETTINGS_MENU_TITLE_Y_OFFSET, APP_SETTINGS_MENU_TITLE_Y_SIZE);
        drawString(title2, x - subTitleShift,     y+APP_SETTINGS_MENU_SUBTITLE_Y_OFFSET, APP_SETTINGS_MENU_SUBTITLE_Y_SIZE);
    }else{
        setDrawColor_BackGroundColor();
        clearString((char*)title, x - titleShift, y+APP_SETTINGS_MENU_TITLE_Y_OFFSET, APP_SETTINGS_MENU_TITLE_Y_SIZE);
        clearString(title2, x - subTitleShift,    y+APP_SETTINGS_MENU_SUBTITLE_Y_OFFSET, APP_SETTINGS_MENU_SUBTITLE_Y_SIZE);
    }
}

void appNameClass::draw_element_icon(bool draw, const unsigned char* icon, int x, int y){
    drawImage(draw, icon, x - CORE_VIEWS_SETTINGS_IMAGE_WIDTH/2 + APP_SETTINGS_MENU_IMAGE_X_OFFSET + 2, y - CORE_VIEWS_SETTINGS_IMAGE_WIDTH/2 + APP_SETTINGS_MENU_IMAGE_Y_OFFSET);
}

void appNameClass::draw_settings_item(bool draw, int x, int y, const unsigned char* title, String subTitle, const unsigned char* icon){

    #if defined(NARROW_SCREEN) || defined(WATCH_SCREEN)
        this->draw_element_icon(draw, icon, x-CORE_VIEWS_SETTINGS_IMAGE_WIDTH/2, y-30);
        this->draw_element_title(draw, x, y, title, subTitle);
    #else
        // image
        int left_x = x + CORE_VIEWS_SETTINGS_IMAGE_WIDTH;
        setDrawColor(getBackgroundColor_red(), getBackgroundColor_green(), getBackgroundColor_blue());
        this->draw_element_icon(draw, icon, x-CORE_VIEWS_SETTINGS_IMAGE_WIDTH/2, y-CORE_VIEWS_SETTINGS_IMAGE_WIDTH/2);

        // title
        if(draw){
            setDrawColor(255, 255, 255);
            drawString((char*)title, left_x, y-12);
            drawString(subTitle, left_x, y+4);
        }else{    
            clearString((char*)title, left_x, y-12);
            clearString(subTitle, left_x, y+4, 1);
        }
    #endif
    
}

unsigned char appNameClass::getTotalPagesInSubMenu(unsigned char submenuType){
    return (getTotalApplicationsInSubMenu(submenuType)%APPS_ON_SINGLE_PAGE==0?((int)(getTotalApplicationsInSubMenu(submenuType)/APPS_ON_SINGLE_PAGE)):((int)(getTotalApplicationsInSubMenu(submenuType)/APPS_ON_SINGLE_PAGE) + 1));
}

unsigned char appNameClass::getTotalApplicationsInSubMenu(unsigned char submenuType){
    switch (submenuType){
        case APP_SETTINGS_SUBMENU_MAIN:
            return APP_SETTINGS_PAGE_TOTAL_ELEMENTS_MAIN;
        case APP_SETTINGS_SUBMENU_SET_TIME:
            return APP_SETTINGS_PAGE_TOTAL_ELEMENTS_SET_TIME;
        case APP_SETTINGS_SUBMENU_SET_DATE:
            return APP_SETTINGS_PAGE_TOTAL_ELEMENTS_SET_DATE;
        case APP_SETTINGS_SUBMENU_SCREEN:
            return APP_SETTINGS_PAGE_TOTAL_ELEMENTS_SCREEN;
        case APP_SETTINGS_SUBMENU_PEDOMETER:
            return APP_SETTINGS_PAGE_TOTAL_ELEMENTS_PEDOMETER;
        default:
            return APP_SETTINGS_PAGE_TOTAL_ELEMENTS_MAIN;
    }
}

void appNameClass::clearWorkSpace(){
    setDrawColor(getBackgroundColor_red(), getBackgroundColor_green(), getBackgroundColor_blue());
    drawRect(0, STYLE_STATUSBAR_HEIGHT, SCREEN_WIDTH, SCREEN_HEIGHT, true);
}

#define OFFSET_POSITION_ELEMENTS 60
#define TIME_SET_POSITION_1 (SCREEN_WIDTH-OFFSET_POSITION_ELEMENTS)/6*1 + OFFSET_POSITION_ELEMENTS/2
#define TIME_SET_POSITION_2 (SCREEN_WIDTH-OFFSET_POSITION_ELEMENTS)/6*3 + OFFSET_POSITION_ELEMENTS/2
#define TIME_SET_POSITION_3 (SCREEN_WIDTH-OFFSET_POSITION_ELEMENTS)/6*5 + OFFSET_POSITION_ELEMENTS/2

void appNameClass::drawSettingsPageFirstTime(){
    if(currentSubMenu==APP_SETTINGS_SUBMENU_MAIN){
        #ifndef SINGLE_ELEMENT_ON_SCREEN
            core_views_draw_pages_list_simple(true, PAGES_LIST_POSITION, getTotalPagesInSubMenu(APP_SETTINGS_SUBMENU_MAIN));
        #endif
        core_views_draw_active_page(true, PAGES_LIST_POSITION, getTotalPagesInSubMenu(APP_SETTINGS_SUBMENU_MAIN), 0);
        this->updateActiveAppIndex(app_settings_selectedAppIndex);  
        // Drawing icons
        this->drawIcons(true);
        #ifndef TOUCH_SCREEN_ENABLE
            #ifndef SINGLE_ELEMENT_ON_SCREEN
                this->drawActiveAppFrame(true);  
            #endif
        #endif
    }else if(currentSubMenu==APP_SETTINGS_SUBMENU_SET_TIME){

        #if defined(NARROW_SCREEN) || defined(WATCH_SCREEN)
            this->drawIcons(true);
        #else
            int y_position = (SCREEN_HEIGHT - STYLE_STATUSBAR_HEIGHT)/2;

            drawSettingTimeDigits(true);
            drawSettingTimeSelect(true, getPositionBySelectedNumber(currentSelectedPosition));
        #endif

    }else if(currentSubMenu==APP_SETTINGS_SUBMENU_SET_DATE){

        #if defined(NARROW_SCREEN) || defined(WATCH_SCREEN)
            this->drawIcons(true);
        #else
            /*
            TODO
            */
        #endif

    }else if(currentSubMenu==APP_SETTINGS_SUBMENU_SCREEN){

        #if defined(NARROW_SCREEN) || defined(WATCH_SCREEN)
            this->drawIcons(true);
        #else
            /*
            TODO
            */
        #endif

    }else if(currentSubMenu==APP_SETTINGS_SUBMENU_PEDOMETER){

        #if defined(NARROW_SCREEN) || defined(WATCH_SCREEN)
            this->drawIcons(true);
        #else
            /*
            TODO
            */
        #endif

    }        
}

int appNameClass::getPositionBySelectedNumber(unsigned char selectedNumber){
    switch(selectedNumber){
        case 0: return TIME_SET_POSITION_1;
        case 1: return TIME_SET_POSITION_2;
        case 2: return TIME_SET_POSITION_3;
        default: return TIME_SET_POSITION_1;
    }
}

void appNameClass::drawSettingTimeArrows(bool draw, int position){
    //drawRect(x0+delta, y0+delta, x1-delta, y1-delta);  

    //drawImage(draw, icon_arrow_up, position + 3 - 16, SCREEN_HEIGHT/2 - 19 - 15 );
    //drawImage(draw, icon_arrow_down, position + 3 - 16, SCREEN_HEIGHT/2 + 20 + 15);

    drawImage(draw, getIcon_arrow_up(), position + 3 - 16, SCREEN_HEIGHT/2 - 19 - 15 );
    drawImage(draw, getIcon_arrow_down(), position + 3 - 16, SCREEN_HEIGHT/2 + 20 + 15);
}

void appNameClass::drawSettingTimeSelect(bool draw, int position){
    //drawRect(x0+delta, y0+delta, x1-delta, y1-delta);  
    if(draw) setDrawColor(255, 255, 255);
    else setDrawColor(getBackgroundColor_red(), getBackgroundColor_green(), getBackgroundColor_blue());
    drawRect(position - FONT_CHAR_WIDTH*3, SCREEN_HEIGHT/2 + 25, position + FONT_CHAR_WIDTH*3-3, SCREEN_HEIGHT/2 + 28, true);
}

void appNameClass::drawSettingTimeDigits(bool draw){
    if(draw) setDrawColor(255, 255, 255);

    lastSeconds   = core_time_getSeconds_byte();
    lastMinutes   = core_time_getMinutes_byte();
    lastHours     = core_time_getHours_byte();

    drawSettingTimeDateDigits(true, TIME_SET_POSITION_1, lastHours);
    drawSettingTimeDateDigits(true, TIME_SET_POSITION_2, lastMinutes);
    drawSettingTimeDateDigits(true, TIME_SET_POSITION_3, lastSeconds);
}

void appNameClass::drawSettingTimeDateDigits(bool draw, unsigned char position, int value){
    if(draw){
        setDrawColor(255, 255, 255);
        drawString_centered(core_basic_addLeadBullToInt2digits(value), position, SCREEN_HEIGHT/2, 3);   
    }else{
        setDrawColor(getBackgroundColor_red(), getBackgroundColor_green(), getBackgroundColor_blue());
        clearString_centered(core_basic_addLeadBullToInt2digits(value), position, SCREEN_HEIGHT/2, 3); 
    
    }
}

void appNameClass::switchToSubMenu(unsigned char newSubMenu){
    app_settings_selectedAppIndex = 0;
    currentSubMenu = newSubMenu;
    clearWorkSpace();
    drawSettingsPageFirstTime(); 
}

void appNameClass::onCreate(){
    setBackgroundColor(0,0,0);
    setContrastColor(255, 255, 255);
    #ifndef TOUCH_SCREEN_ENABLE
        DRAW_LIMITS_setEnable(true);
        DRAW_LIMIT_reset();
        DRAW_LIMITS_setEnable(STYLE_STATUSBAR_HEIGHT, -1, -1, -1);
    #endif

    this->drawSettingsPageFirstTime();
    this->currentSubMenu = APP_SETTINGS_SUBMENU_MAIN;
}



void appNameClass::updateActiveAppIndex(int newSelectedAppIndex){

  if(newSelectedAppIndex<0) newSelectedAppIndex = getTotalApplicationsInSubMenu(currentSubMenu) - 1;
  if(newSelectedAppIndex>=getTotalApplicationsInSubMenu(currentSubMenu)) newSelectedAppIndex = 0;

  if(app_settings_selectedAppIndex!=newSelectedAppIndex){
    
    #ifndef TOUCH_SCREEN_ENABLE
    #ifndef SINGLE_ELEMENT_ON_SCREEN
        this->drawActiveAppFrame(false);
    #endif
    #endif
    
    //debug("Current submenu: " + String(currentSubMenu));

    if( (int)((app_settings_selectedAppIndex)/APPS_ON_SINGLE_PAGE) != (int)((newSelectedAppIndex)/APPS_ON_SINGLE_PAGE)){
      // update page
      this->drawIcons(false);
      if(
          currentSubMenu!=APP_SETTINGS_SUBMENU_SET_TIME 
          && currentSubMenu!=APP_SETTINGS_SUBMENU_SET_DATE
          && currentSubMenu!=APP_SETTINGS_SUBMENU_SCREEN
          && currentSubMenu!=APP_SETTINGS_SUBMENU_PEDOMETER
          ){
        core_views_draw_active_page(false, PAGES_LIST_POSITION, getTotalPagesInSubMenu(currentSubMenu), (int)(app_settings_selectedAppIndex/APPS_ON_SINGLE_PAGE));
      }
      
      app_settings_selectedAppIndex = newSelectedAppIndex;

      if(
          currentSubMenu!=APP_SETTINGS_SUBMENU_SET_TIME 
          && currentSubMenu!=APP_SETTINGS_SUBMENU_SET_DATE
          && currentSubMenu!=APP_SETTINGS_SUBMENU_SCREEN
          && currentSubMenu!=APP_SETTINGS_SUBMENU_PEDOMETER
          ){
        core_views_draw_active_page(true, PAGES_LIST_POSITION, getTotalPagesInSubMenu(currentSubMenu), (int)(app_settings_selectedAppIndex/APPS_ON_SINGLE_PAGE));
      }
      this->drawIcons(true);
    }else{
      app_settings_selectedAppIndex = newSelectedAppIndex;
    }

    // update selected app frame
    #ifndef TOUCH_SCREEN_ENABLE
    #ifndef SINGLE_ELEMENT_ON_SCREEN
        this->drawActiveAppFrame(true);
    #endif
    #endif
    
  }
}

void appNameClass::drawActiveAppFrame(bool draw){
  unsigned char positionOnScreen     = app_settings_selectedAppIndex%APPS_ON_SINGLE_PAGE;
  unsigned char positionOnScreen_x   = app_settings_selectedAppIndex%SINGLE_ELEMENTS_IN_X;
  unsigned char positionOnScreen_y   = positionOnScreen/SINGLE_ELEMENTS_IN_X;

  int x0 = positionOnScreen_x*SINGLE_ELEMENT_REAL_WIDTH;
  int y0 = positionOnScreen_y*SINGLE_ELEMENT_REAL_HEIGHT + STYLE_STATUSBAR_HEIGHT+1;
  int x1 = x0+SINGLE_ELEMENT_REAL_WIDTH;
  int y1 = y0+SINGLE_ELEMENT_REAL_HEIGHT;

  if(draw) setDrawColor(196, 196, 196);
  else setDrawColor(getBackgroundColor_red(), getBackgroundColor_green(), getBackgroundColor_blue());

  for(unsigned char i=0; i<4; i++){
    unsigned char delta = 5+i;
    drawRect(x0+delta, y0+delta, x1-delta, y1-delta);  
  }
  
}

void appNameClass::drawIcons(bool draw){
    #if defined(NARROW_SCREEN) || defined(WATCH_SCREEN)
        int app_num = app_settings_selectedAppIndex;
        
        #ifdef SMOOTH_ANIMATION
            if(this->scroll_x!=0){
                this->preventInAppSleep=true;
                if(this->scroll_x<0 || this->scroll_x>0){

                    char elementsToPreDraw = this->scroll_x/SCREEN_WIDTH + 1;
                    elementsToPreDraw = elementsToPreDraw%getTotalPagesInSubMenu(currentSubMenu);
                    for(unsigned char elementDraw = 0; elementDraw<=elementsToPreDraw; elementDraw++){
                        int appElementDraw;
                        if(this->scroll_x>0) appElementDraw = app_num - elementDraw;
                        else appElementDraw = app_num;

                        while(appElementDraw<0) appElementDraw+=getTotalPagesInSubMenu(currentSubMenu);
                        appElementDraw = appElementDraw%getTotalPagesInSubMenu(currentSubMenu);

                        int element_offset;
                        if(this->scroll_x>0) element_offset = this->scroll_x + SCREEN_WIDTH/2 - elementDraw*SCREEN_WIDTH;
                        else element_offset = this->scroll_x + SCREEN_WIDTH*1 + SCREEN_WIDTH/2 - elementDraw*SCREEN_WIDTH;

                        if(currentSubMenu==APP_SETTINGS_SUBMENU_MAIN){
                            #ifdef WATCH_SCREEN
                                // special animation for smartwatch
                                //this->draw_element_icon(draw, this->getApplicationIcon(currentSubMenu, appElementDraw), element_offset, SCREEN_HEIGHT/2);
                                this->draw_element_icon(draw, this->getApplicationIcon(currentSubMenu, app_num), SCREEN_WIDTH/2, SCREEN_HEIGHT/2);
                                this->draw_element_title(draw, element_offset, SCREEN_HEIGHT/2, (const unsigned char*)this->getApplicationTitle(APP_SETTINGS_SUBMENU_MAIN, appElementDraw), this->getApplicationSubTitle(currentSubMenu, appElementDraw, !draw));
                            #else
                                draw_settings_item(
                                    draw, 
                                    element_offset,
                                    SCREEN_HEIGHT/2, 
                                    (const unsigned char*)this->getApplicationTitle(APP_SETTINGS_SUBMENU_MAIN, appElementDraw), 
                                    this->getApplicationSubTitle(currentSubMenu, appElementDraw, !draw), 
                                    this->getApplicationIcon(currentSubMenu, appElementDraw)
                                );
                            #endif
                        }else if(
                                    currentSubMenu==APP_SETTINGS_SUBMENU_SET_TIME 
                                    || currentSubMenu==APP_SETTINGS_SUBMENU_SET_DATE 
                                    || currentSubMenu==APP_SETTINGS_SUBMENU_SCREEN
                                    || currentSubMenu==APP_SETTINGS_SUBMENU_PEDOMETER
                                ){

                            String stringTitle = reinterpret_cast<const char*>(this->getApplicationTitle(currentSubMenu, appElementDraw));

                            draw_settings_item_noicon(
                                draw, 
                                element_offset, 
                                SCREEN_HEIGHT/2, 
                                stringTitle, 
                                this->getApplicationSubTitle(currentSubMenu, appElementDraw, !draw) 
                            );
                        }
                        
                    }
                }
            }else{
                if(draw) this->preventInAppSleep=false;
                
                if(currentSubMenu==APP_SETTINGS_SUBMENU_MAIN){
                    #ifdef WATCH_SCREEN
                        // special animation for smartwatch
                        this->draw_element_icon(draw, this->getApplicationIcon(currentSubMenu, app_num), SCREEN_WIDTH/2, SCREEN_HEIGHT/2);
                        this->draw_element_title(draw, SCREEN_WIDTH/2, SCREEN_HEIGHT/2, (const unsigned char*)this->getApplicationTitle(APP_SETTINGS_SUBMENU_MAIN, app_num), this->getApplicationSubTitle(currentSubMenu, app_num, !draw));
                    #else
                        draw_settings_item(
                            draw, 
                            this->scroll_x + SCREEN_WIDTH/2,
                            SCREEN_HEIGHT/2, 
                            (const unsigned char*)this->getApplicationTitle(APP_SETTINGS_SUBMENU_MAIN, app_num), 
                            this->getApplicationSubTitle(currentSubMenu, app_num, !draw), 
                            this->getApplicationIcon(currentSubMenu, app_num)
                        );
                    #endif
                }else if(
                            currentSubMenu==APP_SETTINGS_SUBMENU_SET_TIME 
                            || currentSubMenu==APP_SETTINGS_SUBMENU_SET_DATE
                            || currentSubMenu==APP_SETTINGS_SUBMENU_SCREEN
                            || currentSubMenu==APP_SETTINGS_SUBMENU_PEDOMETER
                        ){
                    String stringTitle = reinterpret_cast<const char*>(this->getApplicationTitle(currentSubMenu, app_num));
                    draw_settings_item_noicon(
                        draw, 
                        this->scroll_x + SCREEN_WIDTH/2, 
                        SCREEN_HEIGHT/2, 
                        stringTitle, 
                        this->getApplicationSubTitle(currentSubMenu, app_num, !draw) 
                    );
                }
            }
        #else
            if(currentSubMenu==APP_SETTINGS_SUBMENU_MAIN){
                draw_settings_item(
                    draw, 
                    SCREEN_WIDTH/2,
                    SCREEN_HEIGHT/2, 
                    (const unsigned char*)this->getApplicationTitle(APP_SETTINGS_SUBMENU_MAIN, app_num), 
                    this->getApplicationSubTitle(currentSubMenu, app_num, !draw), 
                    this->getApplicationIcon(currentSubMenu, app_num)
                );
            }else if(currentSubMenu==APP_SETTINGS_SUBMENU_SET_TIME){
                // TODO
            }else if(currentSubMenu==APP_SETTINGS_SUBMENU_SET_DATE){
                // TODO
            }else if(currentSubMenu==APP_SETTINGS_SUBMENU_SCREEN){
                // TODO
            }else if(currentSubMenu==APP_SETTINGS_SUBMENU_PEDOMETER){
                // TODO
            }
        #endif


    #else
        #ifndef TOUCH_SCREEN_ENABLE
            for(unsigned char currentDrawPage=0; currentDrawPage<getTotalPagesInSubMenu(APP_SETTINGS_SUBMENU_MAIN); currentDrawPage++){
        #endif
            
            for (unsigned char y_position=0; y_position<SINGLE_ELEMENTS_IN_Y; y_position++){
                for (unsigned char x_position=0; x_position<SINGLE_ELEMENTS_IN_X; x_position++){
                    int x0 = x_position*SINGLE_ELEMENT_REAL_WIDTH;
                    int y0 = y_position*SINGLE_ELEMENT_REAL_HEIGHT + STYLE_STATUSBAR_HEIGHT+1;
                    int x1 = x0+SINGLE_ELEMENT_REAL_WIDTH;
                    int y1 = y0+SINGLE_ELEMENT_REAL_HEIGHT;

                    int x_center = (x0+x1)/2;
                    int y_center = (y0+y1)/2;

                    #ifndef TOUCH_SCREEN_ENABLE
                        int app_num = y_position*(SINGLE_ELEMENTS_IN_X) + x_position + currentDrawPage*APPS_ON_SINGLE_PAGE;
                    #else
                        int app_num = y_position*(SINGLE_ELEMENTS_IN_X) + x_position + APPS_ON_SINGLE_PAGE*(int)(app_settings_selectedAppIndex/APPS_ON_SINGLE_PAGE);
                    #endif
                    
                    if(app_num<getTotalApplicationsInSubMenu(APP_SETTINGS_SUBMENU_MAIN)){
                        #ifdef ESP8266
                            ESP.wdtDisable();
                        #endif

                        
                        draw_settings_item(
                            draw, 
                            #ifndef TOUCH_SCREEN_ENABLE
                                currentDrawPage*SCREEN_WIDTH - this->scroll_x + x0+35, 
                            #else
                                -this->scroll_x + x0+35, 
                            #endif
                            y_center, 
                            (const unsigned char*)this->getApplicationTitle(APP_SETTINGS_SUBMENU_MAIN, app_num), 
                            this->getApplicationSubTitle(0, app_num), 
                            this->getApplicationIcon(0, app_num)
                        );
                    }
                }
            }

        #ifndef TOUCH_SCREEN_ENABLE
        }
        #endif
    #endif
}

void appNameClass::onLoop(){
    #ifdef SMOOTH_ANIMATION
        if(this->scroll_x!=0){
            this->drawIcons(false);
            this->preventInAppSleep = true;

            int dx = abs(scroll_x)/SMOOTH_ANIMATION_COEFFICIENT + 1;
            if(scroll_x>scroll_to_x) dx *= -1;
            scroll_x+=dx;

            setDrawColor(0,0,0);
            drawLine(0, STYLE_STATUSBAR_HEIGHT+1, SCREEN_WIDTH, STYLE_STATUSBAR_HEIGHT+1);
            drawLine(0, SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_WIDTH);
            
            if (abs(dx)<=1){    
                this->scroll_x=0;
            }
            this->drawIcons(true);
        }else{
            
            this->preventInAppSleep = false;
        }
    #endif

    #ifndef TOUCH_SCREEN_ENABLE
        if(currentSubMenu==APP_SETTINGS_SUBMENU_SET_TIME){
            #if (DRIVER_CONTROLS_TOTALBUTTONS == 2 || DRIVER_CONTROLS_TOTALBUTTONS == 1)
                if(stillPressingSelect_time!=0 && millis()-this->stillPressingSelect_time>=DRIVER_CONTROLS_DELAY_BEFORE_MULTY_PRESS){
                    stillPressingSelect_time = millis();
                    switch(app_settings_selectedAppIndex){
                        case 0:
                            // Add hours
                            core_time_setHours(core_time_getHours_byte() + 1);
                            break;
                        case 1:
                            // Add minutes
                            core_time_setMinutes(core_time_getMinutes_byte() + 1);
                            break;
                        case 2:
                            // Reset seconds
                            core_time_setSeconds(0);
                            break;
                    } 
                    this->drawIcons(false);
                    this->drawIcons(true);
                }
            #endif
        }else if(currentSubMenu==APP_SETTINGS_SUBMENU_SET_DATE){
            #if (DRIVER_CONTROLS_TOTALBUTTONS == 2 || DRIVER_CONTROLS_TOTALBUTTONS == 1)
                if(stillPressingSelect_time!=0 && millis()-this->stillPressingSelect_time>=DRIVER_CONTROLS_DELAY_BEFORE_MULTY_PRESS){
                    stillPressingSelect_time = millis();
                    switch(app_settings_selectedAppIndex){
                        case 0:
                            // Add year
                            core_time_setYear(core_time_getYear() + 1);
                            break;
                        case 1:
                            // Add month
                            core_time_setMonth(core_time_getMonth() + 1);
                            break;
                        case 2:
                            // Add date
                            core_time_setDate(core_time_getDate() + 1);
                            break;
                        case 3:
                            // Set week day
                            core_time_setWeekDay(core_time_getWeekDay() + 1);
                            break;
                    } 
                    this->drawIcons(false);
                    this->drawIcons(true);
                }
            #endif
        }else if(currentSubMenu==APP_SETTINGS_SUBMENU_SCREEN){
            #if (DRIVER_CONTROLS_TOTALBUTTONS == 2 || DRIVER_CONTROLS_TOTALBUTTONS == 1)
                if(stillPressingSelect_time!=0 && millis()-this->stillPressingSelect_time>=DRIVER_CONTROLS_DELAY_BEFORE_MULTY_PRESS){
                    stillPressingSelect_time = millis();
                    int value = 0;

                    this->drawIcons(false);
                    switch(app_settings_selectedAppIndex){
                        case 0:
                            #ifdef DISPLAY_BACKLIGHT_CONTROL_ENABLE
                                // Change display brightness
                                value = get_core_display_brightness();
                                if(value>=100) value = 0;
                                else value+=5;
                                if(value==0) value = 1;
                                if(value==6) value = 5;
                                set_core_display_brightness(value);
                            #endif
                            break;
                        case 1:
                            #ifdef DISPLAY_BACKLIGHT_FADE_CONTROL_ENABLE
                                // Change display fade brightness
                                value = get_core_display_brightness_fade();
                                if(value>=100) value = 0;
                                else value+=5;
                                if(value==0) value = 1;
                                if(value==6) value = 5;
                                set_core_display_brightness_fade(value);
                            #endif
                            break;
                        case 2:
                            #ifdef DISPLAY_BACKLIGHT_FADE_CONTROL_ENABLE
                                // Change time delay to fade
                                value = get_core_display_time_delay_to_fade();
                                if(value>=240) value = 0;
                                else{
                                    if(value<4)         value+=1;
                                    else if(value<10)   value+=2;
                                    else if(value<30)   value+=5;
                                    else if(value<100)  value+=10;
                                    else value+=20;
                                }
                                set_core_display_time_delay_to_fade(value);
                                break;
                            #endif
                        case 3:
                            // Change time delay to poweroff
                            value = get_core_display_time_delay_to_poweroff();
                            if(value>=240) value = 1;
                            else{
                                if(value<4)         value+=1;
                                else if(value<10)   value+=2;
                                else if(value<30)   value+=5;
                                else if(value<100)  value+=10;
                                else value+=20;
                            }
                            set_core_display_time_delay_to_poweroff(value);
                            break;
                    } 
                    this->drawIcons(true);
                }
            #endif
        }else if(currentSubMenu==APP_SETTINGS_SUBMENU_PEDOMETER){
            #if (DRIVER_CONTROLS_TOTALBUTTONS == 2 || DRIVER_CONTROLS_TOTALBUTTONS == 1)
                if(stillPressingSelect_time!=0 && millis()-this->stillPressingSelect_time>=DRIVER_CONTROLS_DELAY_BEFORE_MULTY_PRESS){
                    stillPressingSelect_time = millis();
                    int value = 0;

                    this->drawIcons(false);
                    switch(app_settings_selectedAppIndex){
                        case 0:
                            #if defined(PEDOMETER_ENABLE) || defined(PEDOMETER_EMULATOR)
                                core_pedometer_setEnable(!core_pedometer_getEnable());
                            #endif
                            break;
                    }
                    this->drawIcons(true);
                }
            #endif
        }
    #endif
    
}

void appNameClass::onDestroy(){
}

void appNameClass::pressPrevious(){
    this->drawIcons(false);
    #ifdef SMOOTH_ANIMATION
        this->scroll_x -= SCREEN_WIDTH;
    #endif
    
    if(
            currentSubMenu==APP_SETTINGS_SUBMENU_SET_TIME || 
            currentSubMenu==APP_SETTINGS_SUBMENU_SET_DATE || 
            currentSubMenu==APP_SETTINGS_SUBMENU_SCREEN   ||
            currentSubMenu==APP_SETTINGS_SUBMENU_PEDOMETER
      ){
        if(app_settings_selectedAppIndex==0){
            this->scroll_x = 0;
            switchToSubMenu(APP_SETTINGS_SUBMENU_MAIN);
            return;
        }
    }

    this->updateActiveAppIndex(this->app_settings_selectedAppIndex-1);
}

void appNameClass::pressNext(){
    //if(currentSubMenu==APP_SETTINGS_SUBMENU_MAIN){
    this->drawIcons(false);
    #ifdef SMOOTH_ANIMATION
        this->scroll_x += SCREEN_WIDTH;
    #endif
    
    if(
            currentSubMenu==APP_SETTINGS_SUBMENU_SET_TIME || 
            currentSubMenu==APP_SETTINGS_SUBMENU_SET_DATE || 
            currentSubMenu==APP_SETTINGS_SUBMENU_SCREEN   ||
            currentSubMenu==APP_SETTINGS_SUBMENU_PEDOMETER
      ){
        if(app_settings_selectedAppIndex>=this->getTotalApplicationsInSubMenu(currentSubMenu)-1){
            this->scroll_x = 0;
            switchToSubMenu(APP_SETTINGS_SUBMENU_MAIN);
            return;
        }
    }

    this->updateActiveAppIndex(this->app_settings_selectedAppIndex+1);

    #if defined(WATCH_SCREEN)
        //#ifdef APP_SETTINGS_DEBUG
            //debug("APP_SETTINGS_DEBUG: THIS MOMENT");
        //#endif
        if(currentSubMenu==APP_SETTINGS_SUBMENU_MAIN){
            this->draw_element_icon(true, this->getApplicationIcon(currentSubMenu, this->app_settings_selectedAppIndex), SCREEN_WIDTH/2, SCREEN_HEIGHT/2);
        }
    #endif
}

void appNameClass::pressSelect(){

}


void appNameClass::onEvent(unsigned char event, int val1, int val2, int val3, int val4, int val5){
    #ifdef TOUCH_SCREEN_ENABLE

        if(event==EVENT_ON_TOUCH_QUICK_SWIPE_TO_LEFT){
            pressNext();
        }else if(event==EVENT_ON_TOUCH_QUICK_SWIPE_TO_RIGHT){
            pressPrevious();
        }else if(event==EVENT_ON_TOUCH_QUICK_SWIPE_TO_TOP || event==EVENT_ON_TOUCH_QUICK_SWIPE_TO_BOTTOM){
            if(currentSubMenu==APP_SETTINGS_SUBMENU_MAIN){
                startApp(-1);
            }
        }else if(event==EVENT_ON_TOUCH_CLICK){
            if(currentSubMenu==APP_SETTINGS_SUBMENU_MAIN){
                switch(app_settings_selectedAppIndex){
                    case 0:
                        switchToSubMenu(APP_SETTINGS_SUBMENU_SET_TIME);
                        break;
                    case 1:
                        switchToSubMenu(APP_SETTINGS_SUBMENU_SET_DATE);
                        break;
                    case 2:
                        switchToSubMenu(APP_SETTINGS_SUBMENU_SCREEN);
                        break;
                    case 3:
                        switchToSubMenu(APP_SETTINGS_SUBMENU_PEDOMETER);
                        break;
                }
            }
        }

        if(event==EVENT_ON_TOUCH_QUICK_SWIPE_TO_TOP || event==EVENT_ON_TOUCH_QUICK_SWIPE_TO_BOTTOM){
            if(currentSubMenu==APP_SETTINGS_SUBMENU_SET_TIME){
                switch(app_settings_selectedAppIndex){
                    case 0:
                        // Add hours
                        if(event==EVENT_ON_TOUCH_QUICK_SWIPE_TO_TOP) core_time_setHours(core_time_getHours_byte() + 1);
                        if(event==EVENT_ON_TOUCH_QUICK_SWIPE_TO_BOTTOM) core_time_setHours(core_time_getHours_byte() - 1);
                        break;
                    case 1:
                        // Add minutes
                        if(event==EVENT_ON_TOUCH_QUICK_SWIPE_TO_TOP) core_time_setMinutes(core_time_getMinutes_byte() + 1);
                        if(event==EVENT_ON_TOUCH_QUICK_SWIPE_TO_BOTTOM) core_time_setMinutes(core_time_getMinutes_byte() - 1);
                        break;
                    case 2:
                        // Reset seconds
                        core_time_setSeconds(0);
                        break;
                } 
                this->drawIcons(false);
                this->drawIcons(true);
            }else if(currentSubMenu==APP_SETTINGS_SUBMENU_SET_DATE){
                switch(app_settings_selectedAppIndex){
                    case 0:
                        // Add year
                        if(event==EVENT_ON_TOUCH_QUICK_SWIPE_TO_TOP) core_time_setYear(core_time_getYear() + 1);
                        if(event==EVENT_ON_TOUCH_QUICK_SWIPE_TO_BOTTOM) core_time_setYear(core_time_getYear() - 1);
                        break;
                    case 1:
                        // Add month
                        if(event==EVENT_ON_TOUCH_QUICK_SWIPE_TO_TOP) core_time_setMonth(core_time_getMonth() + 1);
                        if(event==EVENT_ON_TOUCH_QUICK_SWIPE_TO_BOTTOM) core_time_setMonth(core_time_getMonth() - 1);
                        break;
                    case 2:
                        // Add date
                        if(event==EVENT_ON_TOUCH_QUICK_SWIPE_TO_TOP) core_time_setDate(core_time_getDate() + 1);
                        if(event==EVENT_ON_TOUCH_QUICK_SWIPE_TO_BOTTOM) core_time_setDate(core_time_getDate() - 1);
                        break;
                    case 3:
                        // Set week day
                        if(event==EVENT_ON_TOUCH_QUICK_SWIPE_TO_TOP) core_time_setWeekDay(core_time_getWeekDay() + 1);
                        if(event==EVENT_ON_TOUCH_QUICK_SWIPE_TO_BOTTOM) core_time_setWeekDay(core_time_getWeekDay() - 1);
                        break;
                } 
                this->drawIcons(false);
                this->drawIcons(true);
            }else if(currentSubMenu==APP_SETTINGS_SUBMENU_SCREEN){

                int value = 0;

                this->drawIcons(false);
                switch(app_settings_selectedAppIndex){
                    case 0:
                        #ifdef DISPLAY_BACKLIGHT_CONTROL_ENABLE
                            // Change display brightness
                            value = get_core_display_brightness();
                            if(event==EVENT_ON_TOUCH_QUICK_SWIPE_TO_TOP) value += 5;
                            if(event==EVENT_ON_TOUCH_QUICK_SWIPE_TO_BOTTOM) value -= 5;
                            if(value>=100) value = 100;
                            if(value==0) value = 1;
                            if(value==6) value = 5;
                            set_core_display_brightness(value);
                        #endif
                        break;
                    case 1:
                        #ifdef DISPLAY_BACKLIGHT_FADE_CONTROL_ENABLE
                            // Change display fade brightness
                            value = get_core_display_brightness_fade();
                            if(event==EVENT_ON_TOUCH_QUICK_SWIPE_TO_TOP) value += 5;
                            if(event==EVENT_ON_TOUCH_QUICK_SWIPE_TO_BOTTOM) value -= 5;
                            if(value>=100) value = 100;
                            if(value==0) value = 1;
                            if(value==6) value = 5;
                            set_core_display_brightness_fade(value);
                        #endif
                        break;
                    case 2:
                        #ifdef DISPLAY_BACKLIGHT_FADE_CONTROL_ENABLE
                            // Change time delay to fade
                            value = get_core_display_time_delay_to_fade();

                            if(event==EVENT_ON_TOUCH_QUICK_SWIPE_TO_TOP){
                                if(value<4)         value+=1;
                                else if(value<10)   value+=2;
                                else if(value<30)   value+=5;
                                else if(value<100)  value+=10;
                                else value+=20;
                            }else if(event==EVENT_ON_TOUCH_QUICK_SWIPE_TO_BOTTOM){
                                if(value<4)         value-=1;
                                else if(value<10)   value-=2;
                                else if(value<30)   value-=5;
                                else if(value<100)  value-=10;
                                else value-=20;
                            }

                            if(value>=240) value = 240;
                            if(value<=0) value = 0;
                            
                            set_core_display_time_delay_to_fade(value);
                            break;
                        #endif
                    case 3:
                        // Change time delay to poweroff
                        value = get_core_display_time_delay_to_poweroff();
                    
                        if(event==EVENT_ON_TOUCH_QUICK_SWIPE_TO_TOP){
                            if(value<4)         value+=1;
                            else if(value<10)   value+=2;
                            else if(value<30)   value+=5;
                            else if(value<100)  value+=10;
                            else value+=20;
                        }else if(event==EVENT_ON_TOUCH_QUICK_SWIPE_TO_BOTTOM){
                            if(value<4)         value-=1;
                            else if(value<10)   value-=2;
                            else if(value<30)   value-=5;
                            else if(value<100)  value-=10;
                            else value-=20;
                        }

                        if(value>=240) value = 240;
                        if(value<=0) value = 0;
                    
                        set_core_display_time_delay_to_poweroff(value);
                        break;
                } 
                this->drawIcons(true);
            }else if(currentSubMenu==APP_SETTINGS_SUBMENU_PEDOMETER){

                this->drawIcons(false);
                switch(app_settings_selectedAppIndex){
                    case 0:
                        #if defined(PEDOMETER_ENABLE) || defined(PEDOMETER_EMULATOR)
                            core_pedometer_setEnable(!core_pedometer_getEnable());
                        #endif
                        break;
                } 
                this->drawIcons(true);
            }
        }

    #endif

    /**/
    #if (DRIVER_CONTROLS_TOTALBUTTONS == 2 || DRIVER_CONTROLS_TOTALBUTTONS == 1)
        
        if(event==EVENT_BUTTON_PRESSED){
            if(
                currentSubMenu==APP_SETTINGS_SUBMENU_SET_TIME 
                || currentSubMenu==APP_SETTINGS_SUBMENU_SET_DATE
                || currentSubMenu==APP_SETTINGS_SUBMENU_SCREEN
                || currentSubMenu==APP_SETTINGS_SUBMENU_PEDOMETER
                ){
                if(this->stillPressingSelect_time==0) this->stillPressingSelect_time = millis();
            }  
            
        }else if(event==EVENT_BUTTON_RELEASED){
            if(
                currentSubMenu==APP_SETTINGS_SUBMENU_SET_TIME 
                || currentSubMenu==APP_SETTINGS_SUBMENU_SET_DATE
                || currentSubMenu==APP_SETTINGS_SUBMENU_SCREEN
                || currentSubMenu==APP_SETTINGS_SUBMENU_PEDOMETER
                ){
                this->stillPressingSelect_time = 0;
            }
        }else if(event==EVENT_BUTTON_LONG_PRESS){
            //debug("EVENT_BUTTON_LONG_PRESS");
            if(val1==BUTTON_SELECT){
                if(currentSubMenu==APP_SETTINGS_SUBMENU_MAIN){
                    switch(app_settings_selectedAppIndex){
                        case 0:
                            switchToSubMenu(APP_SETTINGS_SUBMENU_SET_TIME);
                            break;
                        case 1:
                            switchToSubMenu(APP_SETTINGS_SUBMENU_SET_DATE);
                            break;
                        case 2:
                            switchToSubMenu(APP_SETTINGS_SUBMENU_SCREEN);
                            break;
                        case 3:
                            switchToSubMenu(APP_SETTINGS_SUBMENU_PEDOMETER);
                            break;
                    }
                }
            }else if(val1==BUTTON_BACK){
                #ifdef APP_SETTINGS_DEBUG
                    debug("APP_SETTINGS_DEBUG: Exit app 2");
                #endif
                startApp(-1);
            }    
        }else if(event==EVENT_BUTTON_SHORT_PRESS){
            //debug("EVENT_BUTTON_SHORT_PRESS");
        }else if(event==EVENT_BUTTON_SHORT_SINGLE_PRESS){
            //debug("EVENT_BUTTON_SHORT_SINGLE_PRESS");
            if(val1==BUTTON_SELECT){
                this->pressNext();
            }else if(val1==BUTTON_BACK){
                #ifdef APP_SETTINGS_DEBUG
                    debug("APP_SETTINGS_DEBUG: Exit app 3");
                #endif
                startApp(-1);
            }
        }else if(event==EVENT_BUTTON_DOUBLE_PRESS){
            //debug("EVENT_BUTTON_DOUBLE_PRESS");
            if(val1==BUTTON_SELECT){
                if(
                    currentSubMenu==APP_SETTINGS_SUBMENU_SET_TIME 
                    || currentSubMenu==APP_SETTINGS_SUBMENU_SET_DATE
                    || currentSubMenu==APP_SETTINGS_SUBMENU_SCREEN
                    || currentSubMenu==APP_SETTINGS_SUBMENU_PEDOMETER
                    ){
                    this->pressNext();
                } else {
                    #ifdef APP_SETTINGS_DEBUG
                        debug("APP_SETTINGS_DEBUG: Exit app 4");
                    #endif
                    startApp(-1);
                }
            }
        }
        
    #else
        if(event==EVENT_BUTTON_PRESSED){
            
            if(currentSubMenu==APP_SETTINGS_SUBMENU_MAIN){
                switch(val1){
                    case BUTTON_UP:
                        this->pressPrevious();
                        break;
                    case BUTTON_BACK:
                    #ifdef APP_SETTINGS_DEBUG
                        debug("APP_SETTINGS_DEBUG: Exit app 5");
                    #endif
                        startApp(-1);
                        break;
                    case BUTTON_DOWN:
                        this->pressNext();   
                        break;
                    case BUTTON_SELECT:
                        if(currentSubMenu==APP_SETTINGS_SUBMENU_MAIN){
                            switch (app_settings_selectedAppIndex){
                            case 0:
                                switchToSubMenu(APP_SETTINGS_SUBMENU_SET_TIME);    
                                break;
                            case 1:
                                switchToSubMenu(APP_SETTINGS_SUBMENU_SET_DATE);    
                                break;
                            case 2:
                                switchToSubMenu(APP_SETTINGS_SUBMENU_SCREEN);    
                                break;
                            case 3:
                                switchToSubMenu(APP_SETTINGS_SUBMENU_PEDOMETER);    
                                break;
                            }
                        }
                        break;
                }
            }else if(currentSubMenu==APP_SETTINGS_SUBMENU_SET_TIME){
                
                switch(val1){
                    case BUTTON_UP:
                    case BUTTON_DOWN:
                        if(currentPositionIsSelected==false){
                            drawSettingTimeSelect(false, getPositionBySelectedNumber(currentSelectedPosition));
                            if(val1==BUTTON_DOWN)currentSelectedPosition++; else currentSelectedPosition--;
                            if(currentSelectedPosition>=3)currentSelectedPosition=0;
                            if(currentSelectedPosition<0)currentSelectedPosition=2;
                            drawSettingTimeSelect(true, getPositionBySelectedNumber(currentSelectedPosition));
                        }else{
                            
                            // time changing
                        }
                        break;
                    case BUTTON_BACK:
                        switchToSubMenu(APP_SETTINGS_SUBMENU_MAIN);            
                        break;
                    
                    case BUTTON_SELECT:
                        currentPositionIsSelected = !currentPositionIsSelected;
                        if(currentPositionIsSelected){
                            drawSettingTimeSelect(false, getPositionBySelectedNumber(currentSelectedPosition));
                            drawSettingTimeArrows(true, getPositionBySelectedNumber(currentSelectedPosition));
                        }else{
                            drawSettingTimeArrows(false, getPositionBySelectedNumber(currentSelectedPosition));
                            drawSettingTimeSelect(true, getPositionBySelectedNumber(currentSelectedPosition));
                        }
                        break;
                }

            }else if(currentSubMenu==APP_SETTINGS_SUBMENU_SET_DATE){
                // TODO
            }else if(currentSubMenu==APP_SETTINGS_SUBMENU_SCREEN){
                // TODO
            }else if(currentSubMenu==APP_SETTINGS_SUBMENU_PEDOMETER){
                // TODO
            }
        
        }else if(event==EVENT_BUTTON_RELEASED){

        }else if(event==EVENT_BUTTON_LONG_PRESS){

        }
    #endif



    else if(event==EVENT_ON_TIME_CHANGED){

        #ifdef SINGLE_ELEMENT_ON_SCREEN
            /*
            String lastTimeString;
            String lastDateString;
            String lastBatteryString;
            */
    
            if(currentSubMenu==APP_SETTINGS_SUBMENU_MAIN && app_settings_selectedAppIndex==0 && app_settings_selectedAppIndex==0){
                this->drawIcons(false);
                this->drawIcons(true);
            }else if(currentSubMenu==APP_SETTINGS_SUBMENU_SET_TIME || currentSubMenu==APP_SETTINGS_SUBMENU_SET_DATE){
                this->drawIcons(false);
                this->drawIcons(true);
            }
        #else
        if(currentSubMenu==APP_SETTINGS_SUBMENU_MAIN){
            if((int)((app_settings_selectedAppIndex)/APPS_ON_SINGLE_PAGE)==0){
                int x_position = 0;
                int y_position = 0;
                int x0 = x_position*SINGLE_ELEMENT_REAL_WIDTH;
                int y0 = y_position*SINGLE_ELEMENT_REAL_HEIGHT + STYLE_STATUSBAR_HEIGHT+1;
                int x1 = x0+SINGLE_ELEMENT_REAL_WIDTH;
                int y1 = y0+SINGLE_ELEMENT_REAL_HEIGHT;

                int x_center = (x0+x1)/2;
                int y_center = (y0+y1)/2;
                int y = y_center;

                int x = x0+35;
                int left_x = x + CORE_VIEWS_SETTINGS_IMAGE_WIDTH;
                String currentTime = core_time_getHourMinuteSecondsTime();
                setDrawColor(0, 0, 0);
                clearString(currentTime, left_x, y+4, 1);
                setDrawColor(255, 255, 255);
                drawString(currentTime, left_x, y+4, 1);
            }
        }else if(currentSubMenu==APP_SETTINGS_SUBMENU_SET_TIME){
            unsigned char lastSeconds_new   = core_time_getSeconds_byte();
            unsigned char lastMinutes_new   = core_time_getMinutes_byte();
            unsigned char lastHours_new     = core_time_getHours_byte();
            
            if(lastSeconds_new!=lastSeconds){
                drawSettingTimeDateDigits(false, TIME_SET_POSITION_3, lastSeconds);
                drawSettingTimeDateDigits(true, TIME_SET_POSITION_3, lastSeconds_new);
                lastSeconds = lastSeconds_new;
            }
            if(lastMinutes_new!=lastMinutes){
                drawSettingTimeDateDigits(false, TIME_SET_POSITION_2, lastMinutes);
                drawSettingTimeDateDigits(true, TIME_SET_POSITION_2, lastMinutes_new);
                lastMinutes = lastMinutes_new;
            }
            if(lastHours_new!=lastHours){
                drawSettingTimeDateDigits(false, TIME_SET_POSITION_1, lastHours);
                drawSettingTimeDateDigits(true, TIME_SET_POSITION_1, lastHours_new);
                lastHours = lastHours_new;
            }
            
        }
        #endif
    }

}

const unsigned char* appNameClass::getApplicationTitle(unsigned char submenu, unsigned char num){
    switch(submenu){
        case APP_SETTINGS_SUBMENU_MAIN:
            switch (num){
                case 0:
                    return (const unsigned char*)"Time";
                case 1:
                    return (const unsigned char*)"Date";
                case 2:
                    return (const unsigned char*)"Screen";
                case 3:
                    return (const unsigned char*)"Pedometer";               
                default:
                    return (const unsigned char*)"-";
                    break;
            }
            break;
        case APP_SETTINGS_SUBMENU_SET_TIME:
            switch (num){
                case 0:
                    return (const unsigned char*)"Hours";
                case 1:
                    return (const unsigned char*)"Minutes";
                case 2:
                    return (const unsigned char*)"Seconds";          
                default:
                    return (const unsigned char*)"-";
                    break;
            }
            break;
        case APP_SETTINGS_SUBMENU_SET_DATE:
            switch (num){
                case 0:
                    return (const unsigned char*)"Year";
                case 1:
                    return (const unsigned char*)"Month";
                case 2:
                    return (const unsigned char*)"Day";          
                case 3:
                    return (const unsigned char*)"Day"; 
                default:
                    return (const unsigned char*)"-";
                    break;
            }
            break;
        case APP_SETTINGS_SUBMENU_SCREEN:
            switch (num){
                case 0:
                    return (const unsigned char*)"Brightness";
                case 1:
                    return (const unsigned char*)"Fade bright.";
                case 2:
                    return (const unsigned char*)"Fade after";          
                case 3:
                    return (const unsigned char*)"Sleep after"; 
                default:
                    return (const unsigned char*)"-";
                    break;
            }
            break;
        case APP_SETTINGS_SUBMENU_PEDOMETER:
            switch (num){
                case 0:
                    return (const unsigned char*)"Pedometer"; 
                default:
                    return (const unsigned char*)"-";
                    break;
            }
            break;
        default:
            return (const unsigned char*)"-";
    }
}

String appNameClass::getApplicationSubTitle(unsigned char submenu, unsigned char num){
    return this->getApplicationSubTitle(submenu, num, false);
}

String appNameClass::getApplicationSubTitle(unsigned char submenu, unsigned char num, bool getLast){    

    switch(submenu){
        case APP_SETTINGS_SUBMENU_MAIN:
            switch (num){
                case 0:
                    if(getLast) return this->lastTimeString;
                    else{
                        this->lastTimeString = core_time_getHourMinuteSecondsTime();
                        return this->lastTimeString;
                    }
                case 1:
                    if(getLast) return this->lastDateString;
                    else{
                        this->lastDateString = core_time_getDateFull();
                        return this->lastDateString;
                    }
                case 2:
                    return String(get_core_display_brightness()) + "%";
                case 3:
                    #if defined(PEDOMETER_ENABLE) || defined(PEDOMETER_EMULATOR)
                        return core_pedometer_getEnable_String();
                    #else
                        return "-";
                    #endif
                case 4:
                    return "Calibrate";
                default:
                    return "Reset maximum";
                    break;
            }
            break;
        case APP_SETTINGS_SUBMENU_SET_TIME:
            switch (num){
                case 0:
                    if(getLast) return this->lastTimeString_hours;
                    else{
                        this->lastTimeString_hours = core_time_getHours_String();
                        return this->lastTimeString_hours;
                    }
                case 1:
                    if(getLast) return this->lastTimeString_minutes;
                    else{
                        this->lastTimeString_minutes = core_time_getMinutes_String();
                        return this->lastTimeString_minutes;
                    }
                case 2:
                    if(getLast) return this->lastTimeString_seconds;
                    else{
                        this->lastTimeString_seconds = core_time_getSeconds_String();
                        return this->lastTimeString_seconds;
                    }      
                default:
                    return "-";
                    break;
            }
            break;
        case APP_SETTINGS_SUBMENU_SET_DATE:
            switch (num){
                case 0:
                    if(getLast) return this->lastDateString_year;
                    else{
                        this->lastDateString_year = String(core_time_getYear());
                        return this->lastDateString_year;
                    }   
                case 1:
                    if(getLast) return this->lastDateString_month;
                    else{
                        this->lastDateString_month = core_time_getMonth_stringShort();
                        return this->lastDateString_month;
                    }   
                case 2:
                    if(getLast) return this->lastDateString_date;
                    else{
                        this->lastDateString_date = String(core_time_getDate());
                        return this->lastDateString_date;
                    }   
                case 3:
                    if(getLast) return this->lastDateString_weekDay;
                    else{
                        this->lastDateString_weekDay = core_time_getWeekDay_stringShort();
                        return this->lastDateString_weekDay;
                    }   
                    
                default:
                    return "-";
                    break;
            }
            break;
        case APP_SETTINGS_SUBMENU_SCREEN:
            switch (num){
                case 0:
                    #ifdef DISPLAY_BACKLIGHT_CONTROL_ENABLE 
                        return String(get_core_display_brightness()) + " %";
                    #else
                        return "-";
                    #endif
                case 1:
                    #ifdef DISPLAY_BACKLIGHT_FADE_CONTROL_ENABLE
                        return String(get_core_display_brightness_fade()) + " %"; 
                    #else
                        return "-";
                    #endif
                case 2:
                    #ifdef DISPLAY_BACKLIGHT_FADE_CONTROL_ENABLE
                        return String(get_core_display_time_delay_to_fade()) + " s";  
                    #else
                        return "-";
                    #endif
                case 3:
                    return String(get_core_display_time_delay_to_poweroff()) + " s";  
                default:
                    return "-";
            }
            break;
            case APP_SETTINGS_SUBMENU_PEDOMETER:
                switch (num){
                    case 0:
                        #if defined(PEDOMETER_ENABLE) || defined(PEDOMETER_EMULATOR)
                            return core_pedometer_getEnable_String();
                        #else
                            return "-";
                        #endif
                    default:
                        return "-";
                }
            break;
        default:
            return "-";
    }
}

const unsigned char* appNameClass::getApplicationIcon(unsigned char submenu, unsigned char num){
    switch(APP_SETTINGS_SUBMENU_MAIN){
        case APP_SETTINGS_SUBMENU_MAIN:
            switch (num){
                case 0:
                    return this->icon_time;
                case 1:
                    return this->icon_date;
                case 2:
                    return this->icon_sleep;
                case 3:
                    return this->icon_pedometer;
                case 4:
                    return this->icon_pedometer;

                
                default:
                    return this->def;
                    break;
            }
            break;
        default:
            return this->def;
    }
}


#if defined(USE_L_MENU_IMAGES)
    const unsigned char appNameClass::def[]             PROGMEM = {
        0x02,0x01,0x02,0x08,0x02,0x08,0x04,0xff,0xff,0xff,0x80,0xE0,0xF8,0xFF,0xFF,0xF8,0xE0,0x80,};
    const unsigned char appNameClass::icon_pedometer[]    PROGMEM = {
        0x02,0x01,0x02,0x18,0x02,0x18,0x04,0xFF,0xFF,0xFF,0x0E,0x00,0x00,0x1F,0x00,0x00,0x1F,0x80,0x00,0x3F,0x80,0xF8,0x3F,0x81,0xF8,0x3F,0x81,0xFC,0x3F,0x81,0xFC,0x3F,0x81,0xFC,0x3F,0x81,0xFC,0x3F,0x81,0xFC,0x3F,0x81,0xFC,0x1F,0x01,0xFC,0x1F,0x01,0xFC,0x18,0x01,0xF8,0x00,0x00,0xF8,0x01,0x80,0xF8,0x1F,0x80,0x18,0x0F,0x80,0x00,0x0F,0x81,0xC0,0x0F,0x81,0xF8,0x07,0x81,0xF0,0x00,0x01,0xF0,0x00,0x01,0xE0,0x00,0x01,0xC0,0x04,0x55,0x55,0x55,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x40,0x00,0x00,0x40,0x00,0x00,0x40,0x00,0x02,0x40,0x00,0x02,0x40,0x00,0x02,0x40,0x40,0x02,0x00,0x00,0x02,0x00,0x00,0x02,0x00,0x80,0x02,0x20,0x00,0x00,0x18,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0x24,0x10,0x01,0x80,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x10,0x00,0x00,0x20,0x04,0xAA,0xAA,0xAA,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x70,0x00,0x40,0x00,0x00,0x40,0x04,0x00,0x40,0x00,0x00,0x42,0x00,0x00,0x42,0x00,0x00,0x42,0x00,0x00,0x02,0x00,0x00,0x02,0x00,0x20,0x82,0x00,0x20,0x00,0x00,0x07,0x00,0x04,0x00,0x00,0x04,0x02,0x00,0x04,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x40,0x38,0x00,0x40,0x00,0x00,0x42,0x00,0x03,0x02,0x00,0x00,0x02,0x00,0x00,0x00,0x00,};
    const unsigned char appNameClass::icon_light[]      PROGMEM = {
        0x02,0x01,0x02,0x10,0x02,0x10,0x04,0xff,0xd9,0x00,0x03,0xC0,0x0F,0x30,0x1F,0x08,0x3F,0x04,0x7F,0x02,0x7F,0x02,0xFF,0x01,0xFF,0x01,0xFF,0x01,0xFF,0x01,0x7F,0x02,0x7F,0x02,0x3F,0x04,0x1F,0x08,0x0F,0x30,0x03,0xC0,};
    const unsigned char appNameClass::icon_time[]       PROGMEM = {
        0x02,0x01,0x02,0x18,0x02,0x18,0x04,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x41,0x20,0x02,0x41,0x20,0x06,0xC3,0x60,0x02,0x59,0x20,0x02,0x41,0x20,0x02,0x59,0x20,0x02,0x41,0x20,0x02,0x41,0x20,0x02,0x41,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xd8,0xd8,0xd8,0x3E,0x00,0x7C,0x22,0x00,0x44,0x21,0xFF,0xC4,0x20,0x00,0x04,0x40,0x00,0x02,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x40,0x00,0x02,0x20,0x00,0x04,0x13,0xFF,0xC8,0x12,0x00,0x48,0x1E,0x00,0x78,0x04,0x8f,0x8f,0x8f,0x00,0x00,0x00,0x1C,0x00,0x38,0x1C,0x00,0x38,0x1F,0xFF,0xF8,0x3F,0xFF,0xFC,0x78,0x00,0x0E,0x70,0x00,0x06,0x60,0x00,0x02,0x60,0x00,0x02,0x60,0x00,0x02,0x60,0x00,0x02,0x60,0x00,0x02,0x60,0x00,0x02,0x60,0x00,0x02,0x60,0x00,0x02,0x60,0x00,0x02,0x60,0x00,0x02,0x70,0x00,0x06,0x78,0x00,0x0E,0x3F,0xFF,0xFC,0x1F,0xFF,0xF8,0x0C,0x00,0x30,0x0C,0x00,0x30,0x00,0x00,0x00,};
    const unsigned char appNameClass::icon_date[]       PROGMEM = {
        0x02,0x01,0x02,0x18,0x02,0x18,0x04,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x00,0x00,0x78,0x00,0x00,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x00,0x00,0x78,0x00,0x00,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xff,0xff,0xff,0xFF,0xFF,0xFF,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0xFF,0xFF,0xFF,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0xFF,0xFF,0xFF,0x04,0xd8,0xd8,0xd8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x3C,0x00,0x1E,0x3C,0x00,0x1E,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x3C,0x00,0x1E,0x3C,0x00,0x1E,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x3C,0x00,0x1E,0x3C,0x00,0x1E,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
    const unsigned char appNameClass::icon_sleep[]      PROGMEM = {
        0x02,0x01,0x02,0x18,0x02,0x18,0x04,0xff,0xd9,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xC0,0x00,0x1F,0xF0,0x00,0x3E,0x08,0x00,0x78,0x00,0x00,0x70,0x00,0x00,0xF0,0x00,0x00,0xE0,0x00,0x00,0xE0,0x00,0x00,0xE0,0x00,0x00,0xF0,0x00,0x00,0x70,0x00,0x00,0x78,0x00,0x00,0x3E,0x08,0x00,0x1F,0xF0,0x00,0x07,0xC0,0x00,0x04,0xff,0xff,0xff,0x00,0x00,0x07,0x00,0x00,0x01,0x00,0x0F,0xC2,0x00,0x00,0xC4,0x00,0x01,0x87,0x00,0x03,0x00,0x00,0x06,0x00,0x00,0x0C,0x00,0x00,0x0F,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,};
#elif defined(USE_XL_MENU_IMAGES)
    const unsigned char appNameClass::def[] PROGMEM = {
    };

    const unsigned char appNameClass::icon_pedometer[] PROGMEM = {
        0x02,0x01,0x02,0x38,0x02,0x38,0x04,0x55,0x55,0x55,0x00,0x00,0x01,0xFF,0x80,0x00,0x00,0x00,0x00,0x1F,0xFF,0xF8,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x01,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x07,0xFF,0x83,0xFF,0xFF,0xFF,0xE0,0x07,0xFF,0x00,0xFF,0xFF,0xFF,0xE0,0x0F,0xFF,0x00,0xFF,0xFF,0xFF,0xF0,0x0F,0xFE,0x00,0x7F,0xFF,0xFF,0xF0,0x1F,0xFE,0x00,0x7F,0xC0,0xFF,0xF8,0x3F,0xFE,0x00,0x7F,0x80,0x7F,0xFC,0x3F,0xFC,0x00,0x7F,0x80,0x3F,0xFC,0x3F,0xFC,0x00,0x7F,0x00,0x3F,0xFC,0x7F,0xFC,0x00,0x7F,0x00,0x3F,0xFE,0x7F,0xFC,0x00,0x7F,0x00,0x1F,0xFE,0x7F,0xFC,0x00,0x3E,0x00,0x1F,0xFE,0x7F,0xFC,0x00,0x7E,0x00,0x1F,0xFE,0xFF,0xFC,0x00,0x7E,0x00,0x1F,0xFF,0xFF,0xFC,0x00,0x7E,0x00,0x1F,0xFF,0xFF,0xFE,0x00,0x7E,0x00,0x1F,0xFF,0xFF,0xFE,0x00,0xFE,0x00,0x1F,0xFF,0xFF,0xFE,0x00,0xFF,0x00,0x1F,0xFF,0xFF,0xFE,0x00,0xFF,0x00,0x1F,0xFF,0xFF,0xFF,0x00,0xFF,0x00,0x3F,0xFF,0xFF,0xFF,0x01,0xFF,0x80,0x3F,0xFF,0xFF,0xFF,0x1F,0xFF,0x80,0x3F,0xFF,0xFF,0xFF,0xFE,0xFF,0x80,0x3F,0xFF,0x7F,0xFF,0xC0,0x7F,0xC0,0x3F,0xFE,0x7F,0xFF,0x80,0x7F,0xE0,0x7F,0xFE,0x7F,0xFF,0x80,0x7F,0xFF,0x7F,0xFE,0x7F,0xFF,0x80,0x7F,0x87,0xFF,0xFE,0x3F,0xFF,0x80,0x7F,0x00,0xFF,0xFC,0x3F,0xFF,0x80,0x7F,0x00,0xFF,0xFC,0x3F,0xFF,0xC0,0x7F,0x00,0xFF,0xFC,0x1F,0xFF,0xC0,0x7F,0x00,0xFF,0xF8,0x0F,0xFF,0xF1,0xFE,0x00,0xFF,0xF0,0x0F,0xFF,0xFF,0xFF,0x01,0xFF,0xF0,0x07,0xFF,0xFF,0xFF,0x01,0xFF,0xE0,0x07,0xFF,0xFF,0xFF,0x03,0xFF,0xE0,0x03,0xFF,0xFF,0xFF,0xEF,0xFF,0xC0,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x01,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x1F,0xFF,0xF8,0x00,0x00,0x00,0x00,0x01,0xFF,0x80,0x00,0x00,0x04,0xAA,0xAA,0xAA,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x81,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x02,0x00,0x01,0x00,0x00,0x00,0x00,0x02,0x00,0x81,0x00,0x00,0x00,0x00,0x00,0x00,0x81,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x20,0x00,0x00,0x01,0x01,0x00,0x80,0x20,0x00,0x00,0x00,0x01,0x00,0x80,0x00,0x00,0x00,0x00,0x02,0x00,0x40,0x00,0x00,0x00,0x00,0x60,0x00,0x40,0x00,0x00,0x00,0x00,0x01,0x00,0x40,0x00,0x00,0x00,0x00,0x3C,0x80,0x20,0x40,0x00,0x00,0x00,0x00,0x80,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x78,0x00,0x00,0x00,0x00,0x40,0x00,0x87,0x00,0x00,0x00,0x00,0x40,0x00,0x80,0x00,0x00,0x00,0x00,0x20,0x00,0x80,0x00,0x00,0x00,0x00,0x20,0x80,0x00,0x00,0x00,0x00,0x00,0x0A,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x82,0x00,0x00,0x00,0x00,0x00,0x00,0x84,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0x00,0x1F,0x00,0x00,0x00,0x01,0xFF,0x80,0x3F,0x80,0x00,0x00,0x01,0xFF,0x80,0x7F,0x80,0x00,0x00,0x03,0xFF,0x80,0x7F,0xC0,0x00,0x00,0x03,0xFF,0x80,0x7F,0xC0,0x00,0x00,0x03,0xFF,0x80,0xFF,0xC0,0x00,0x00,0x03,0xFF,0x80,0xFF,0xE0,0x00,0x00,0x03,0xFF,0x80,0xFF,0xE0,0x00,0x00,0x01,0xFF,0x80,0xFF,0xE0,0x00,0x00,0x01,0xFF,0x00,0xFF,0xE0,0x00,0x00,0x01,0xFF,0x00,0xFF,0xE0,0x00,0x00,0x01,0xFF,0x00,0xFF,0xE0,0x00,0x00,0x01,0xFE,0x00,0xFF,0xC0,0x00,0x00,0x00,0xFE,0x00,0x7F,0xC0,0x00,0x00,0x00,0xFE,0x00,0x7F,0xC0,0x00,0x00,0x00,0xFC,0x00,0x3F,0xC0,0x00,0x00,0x00,0x80,0x00,0x3F,0xC0,0x00,0x00,0x00,0x00,0x00,0x3F,0xC0,0x00,0x00,0x00,0x03,0x00,0x1F,0x80,0x00,0x00,0x00,0x7F,0x00,0x00,0x80,0x00,0x00,0x00,0x7F,0x80,0x00,0x00,0x00,0x00,0x00,0x3F,0x80,0x00,0x00,0x00,0x00,0x00,0x3F,0x80,0x78,0x00,0x00,0x00,0x00,0x3F,0x80,0x7F,0x00,0x00,0x00,0x00,0x1F,0x80,0x7F,0x00,0x00,0x00,0x00,0x1F,0x00,0xFF,0x00,0x00,0x00,0x00,0x04,0x00,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    };

    const unsigned char appNameClass::icon_light[] PROGMEM = {
        0x02,0x01,0x02,0x38,0x02,0x38,0x04,0x40,0x40,0x00,0x00,0x00,0x00,0x24,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x42,0x00,0x00,0x00,0x00,0x00,0x00,0x42,0x00,0x00,0x00,0x00,0x00,0x00,0x42,0x00,0x00,0x00,0x00,0x00,0x00,0x42,0x00,0x00,0x00,0x00,0x00,0x00,0x42,0x00,0x00,0x00,0x00,0x60,0x00,0x42,0x00,0x06,0x00,0x00,0x00,0x00,0x42,0x00,0x00,0x00,0x01,0x00,0x00,0x42,0x00,0x00,0x80,0x01,0x00,0x00,0x42,0x00,0x00,0x80,0x00,0x00,0x00,0x42,0x00,0x00,0x00,0x00,0x00,0x00,0x42,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x80,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x09,0x0C,0x00,0x00,0x00,0x00,0x00,0x08,0x04,0x00,0x00,0x00,0x00,0x00,0x08,0x10,0x00,0x00,0x00,0x00,0x40,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x80,0x08,0x05,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x3F,0xF0,0x00,0x08,0x00,0x0F,0xFC,0x80,0x00,0x00,0x08,0x02,0x80,0x01,0x00,0x01,0x00,0x08,0x02,0x80,0x00,0x00,0x01,0x00,0x08,0x02,0xC0,0x00,0x80,0x01,0x00,0x08,0x02,0x80,0x01,0x3F,0xF8,0x00,0x08,0x00,0x1F,0xFC,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x80,0x08,0x04,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x00,0x00,0x00,0x00,0x00,0x08,0x10,0x00,0x00,0x00,0x00,0x20,0x08,0x04,0x00,0x00,0x00,0x00,0x30,0x08,0x8C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x42,0x00,0x00,0x00,0x00,0x00,0x00,0x42,0x00,0x00,0x00,0x01,0x00,0x00,0x42,0x00,0x00,0x80,0x01,0x00,0x00,0x42,0x00,0x00,0x80,0x00,0x00,0x00,0x42,0x00,0x00,0x80,0x00,0x60,0x00,0x42,0x00,0x07,0x00,0x00,0x00,0x00,0x42,0x00,0x00,0x00,0x00,0x00,0x00,0x42,0x00,0x00,0x00,0x00,0x00,0x00,0x42,0x00,0x00,0x00,0x00,0x00,0x00,0x42,0x00,0x00,0x00,0x00,0x00,0x00,0x42,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x24,0x00,0x00,0x00,0x04,0xC0,0xC0,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00,0x60,0x00,0x3C,0x00,0x06,0x00,0x00,0xF0,0x00,0x3C,0x00,0x0F,0x00,0x00,0xF8,0x00,0x3C,0x00,0x1F,0x00,0x00,0x7C,0x00,0x3C,0x00,0x3E,0x00,0x00,0x3E,0x00,0x3C,0x00,0x7C,0x00,0x00,0x1F,0x00,0x18,0x00,0xF8,0x00,0x00,0x0F,0x80,0x00,0x01,0xF0,0x00,0x00,0x07,0xC0,0x00,0x03,0xE0,0x00,0x00,0x03,0xC0,0x7E,0x03,0xC0,0x00,0x00,0x01,0xC3,0xFB,0xC3,0x80,0x00,0x00,0x00,0x87,0xF0,0x61,0x00,0x00,0x00,0x00,0x0F,0xF0,0x10,0x00,0x00,0x00,0x00,0x1F,0xF0,0x08,0x00,0x00,0x00,0x00,0x3F,0xF0,0x04,0x00,0x00,0x00,0x00,0x7F,0xF0,0x02,0x00,0x00,0x00,0x00,0x7F,0xF0,0x02,0x00,0x00,0x00,0x00,0x7F,0xF0,0x01,0x00,0x00,0x00,0x00,0xFF,0xF0,0x01,0x00,0x00,0x7F,0xF8,0xFF,0xF0,0x01,0x1F,0xFE,0xFF,0xFC,0xFF,0xF0,0x01,0x3F,0xFF,0xFF,0xFC,0xFF,0xF0,0x01,0x3F,0xFF,0x7F,0xF8,0xFF,0xF0,0x01,0x1F,0xFE,0x00,0x00,0xFF,0xF0,0x01,0x00,0x00,0x00,0x00,0xFF,0xF0,0x01,0x00,0x00,0x00,0x00,0x7F,0xF0,0x02,0x00,0x00,0x00,0x00,0x7F,0xF0,0x02,0x00,0x00,0x00,0x00,0x3F,0xF0,0x04,0x00,0x00,0x00,0x00,0x1F,0xF0,0x08,0x00,0x00,0x00,0x00,0x0F,0xF0,0x10,0x00,0x00,0x00,0x00,0x07,0xF0,0x20,0x00,0x00,0x00,0x01,0xC3,0xF9,0xC3,0x80,0x00,0x00,0x03,0xC0,0xFF,0x03,0xC0,0x00,0x00,0x07,0xC0,0x00,0x03,0xE0,0x00,0x00,0x0F,0x80,0x00,0x01,0xF0,0x00,0x00,0x1F,0x00,0x18,0x00,0xF8,0x00,0x00,0x3E,0x00,0x3C,0x00,0x7C,0x00,0x00,0x7C,0x00,0x3C,0x00,0x3E,0x00,0x00,0xF8,0x00,0x3C,0x00,0x1F,0x00,0x00,0xF0,0x00,0x3C,0x00,0x0F,0x00,0x00,0x60,0x00,0x3C,0x00,0x06,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x04,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x90,0x00,0x00,0x00,0x09,0x00,0x00,0x08,0x00,0x00,0x00,0x10,0x00,0x00,0x04,0x00,0x00,0x00,0x20,0x00,0x00,0x82,0x00,0x00,0x00,0x41,0x00,0x00,0x41,0x00,0x00,0x00,0x82,0x00,0x00,0x20,0x80,0x24,0x01,0x04,0x00,0x00,0x10,0x40,0x00,0x02,0x00,0x00,0x00,0x08,0x20,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x80,0x04,0x00,0x00,0x00,0x02,0x20,0x04,0x04,0x40,0x00,0x00,0x01,0x48,0x00,0x92,0x80,0x00,0x00,0x00,0x10,0x00,0x28,0x00,0x00,0x00,0x00,0x20,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x0A,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x20,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC8,0x00,0x53,0x80,0x00,0x00,0x02,0x20,0x04,0x24,0x40,0x00,0x00,0x04,0x00,0x00,0x84,0x20,0x00,0x00,0x08,0x20,0x00,0x04,0x10,0x00,0x00,0x10,0x40,0x00,0x02,0x08,0x00,0x00,0x20,0x00,0x24,0x01,0x04,0x00,0x00,0x40,0x00,0x00,0x00,0x82,0x00,0x00,0x80,0x00,0x00,0x00,0x41,0x00,0x00,0x04,0x00,0x00,0x00,0x20,0x00,0x00,0x08,0x00,0x00,0x00,0x10,0x00,0x00,0x90,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x20,0x01,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x80,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    };

    const unsigned char appNameClass::icon_time[] PROGMEM = {
        0x02,0x01,0x02,0x38,0x02,0x38,0x04,0x55,0x55,0x55,0x00,0x00,0x02,0x00,0x40,0x00,0x00,0x00,0x00,0x20,0x00,0x04,0x00,0x00,0x00,0x00,0x80,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x02,0x00,0x40,0x00,0x00,0x00,0x00,0x10,0x00,0x08,0x00,0x00,0x00,0x00,0x40,0x00,0x02,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x01,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x84,0x00,0x00,0x00,0x01,0x00,0x21,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x02,0x00,0x81,0x00,0x00,0x00,0x00,0x40,0x02,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x42,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x84,0x00,0x00,0x00,0x00,0x00,0x21,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x40,0x40,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x08,0x00,0x00,0x00,0x00,0x02,0x00,0x40,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x04,0x00,0x00,0x00,0x00,0x04,0x00,0x20,0x00,0x00,0x04,0xAA,0xAA,0xAA,0x00,0x00,0x01,0x81,0x80,0x00,0x00,0x00,0x00,0x10,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x04,0x00,0x20,0x08,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x10,0x00,0x04,0x10,0x00,0x00,0x00,0x08,0x20,0x00,0x20,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x40,0x40,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x04,0x00,0x01,0x80,0x04,0x10,0x00,0x10,0x00,0x00,0x00,0x01,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x24,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x84,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x04,0x00,0x04,0x10,0x00,0x00,0x00,0x00,0x20,0x00,0x08,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x01,0x00,0x00,0x00,0x00,0x20,0x00,0x04,0x00,0x00,0x00,0x10,0x04,0x00,0x20,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x80,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0xC0,0x00,0x00,0x04,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x0F,0xFF,0xF0,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFE,0x00,0x00,0x00,0x01,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x0F,0xF8,0x18,0x1F,0xF0,0x00,0x00,0x3F,0xE0,0x18,0x03,0xFC,0x00,0x00,0x7F,0x80,0x18,0x01,0xFE,0x00,0x00,0xFE,0x00,0x18,0x00,0x7F,0x00,0x01,0xFC,0x00,0x18,0x00,0x3F,0x80,0x03,0xF0,0x00,0x00,0x00,0x0F,0xC0,0x03,0xE0,0x00,0x00,0x00,0x07,0xC0,0x07,0xC0,0x00,0x00,0x00,0x03,0xE0,0x0F,0xC0,0x00,0x00,0x00,0x03,0xF0,0x0F,0x80,0x00,0x00,0x00,0x01,0xF0,0x1F,0x00,0x00,0x00,0x00,0x00,0xF8,0x1F,0x00,0x00,0x00,0x00,0x00,0xF8,0x3E,0x00,0x00,0x00,0x00,0x00,0x7C,0x3C,0x00,0x00,0x00,0x00,0x00,0x3C,0x3C,0x00,0x00,0x00,0x00,0x00,0x3C,0x7C,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x00,0x00,0x00,0x00,0x00,0x1E,0x78,0x00,0x00,0x00,0x00,0xE0,0x1E,0x78,0x07,0x80,0x00,0x03,0xE0,0x1E,0x78,0x03,0xE0,0x00,0x0F,0x80,0x1F,0xF8,0x00,0xFC,0x00,0x3E,0x00,0x1F,0xF8,0x00,0x3F,0x01,0xF8,0x00,0x1F,0xFF,0xC0,0x07,0xFF,0xC0,0x03,0xFF,0xFF,0xC0,0x01,0xFF,0x00,0x03,0xFF,0xF8,0x00,0x00,0x3C,0x00,0x00,0x1F,0xF8,0x00,0x00,0x18,0x00,0x00,0x1F,0xF8,0x00,0x00,0x00,0x00,0x00,0x1F,0x78,0x00,0x00,0x00,0x00,0x00,0x1E,0x78,0x00,0x00,0x00,0x00,0x00,0x1E,0x78,0x00,0x00,0x00,0x00,0x00,0x1E,0x7C,0x00,0x00,0x00,0x00,0x00,0x3E,0x3C,0x00,0x00,0x00,0x00,0x00,0x3C,0x3C,0x00,0x00,0x00,0x00,0x00,0x3C,0x3E,0x00,0x00,0x00,0x00,0x00,0x7C,0x1F,0x00,0x00,0x00,0x00,0x00,0x78,0x1F,0x00,0x00,0x00,0x00,0x00,0xF8,0x0F,0x80,0x00,0x00,0x00,0x01,0xF0,0x0F,0xC0,0x00,0x00,0x00,0x03,0xF0,0x07,0xC0,0x00,0x00,0x00,0x03,0xE0,0x03,0xE0,0x00,0x00,0x00,0x07,0xC0,0x03,0xF0,0x00,0x00,0x00,0x0F,0xC0,0x01,0xFC,0x00,0x18,0x00,0x3F,0x80,0x00,0xFE,0x00,0x18,0x00,0x7F,0x00,0x00,0x7F,0x00,0x18,0x00,0xFE,0x00,0x00,0x3F,0xC0,0x18,0x03,0xFC,0x00,0x00,0x0F,0xF8,0x18,0x1F,0xF0,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x01,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x7F,0xFF,0xFE,0x00,0x00,0x00,0x00,0x1F,0xFF,0xF8,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,
    };

    const unsigned char appNameClass::icon_date[] PROGMEM = {
        0x02,0x01,0x02,0x38,0x02,0x38,0x04,0xAA,0xAA,0xAA,0x00,0x05,0x00,0x00,0x00,0x28,0x00,0x00,0x00,0x80,0x00,0x00,0x04,0x00,0x00,0x08,0x80,0x00,0x00,0x04,0x00,0x00,0x08,0x80,0x00,0x00,0x04,0x00,0x02,0x08,0x80,0x80,0x40,0x04,0xC0,0x00,0x08,0x80,0x00,0x40,0x04,0x00,0x00,0x08,0x80,0x00,0x40,0x04,0x04,0x00,0x08,0x80,0x00,0x40,0x04,0x00,0x00,0x00,0x00,0x00,0x40,0x04,0x00,0x80,0x27,0x20,0x0C,0x01,0x39,0x01,0x00,0x00,0x00,0x40,0x80,0x00,0x00,0x00,0x08,0x80,0x01,0x00,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x42,0x08,0x82,0x00,0x00,0x00,0x00,0x24,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x24,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x08,0x82,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x63,0x08,0x42,0x10,0xC6,0x00,0x00,0x00,0x00,0x24,0x00,0x01,0x00,0x00,0x80,0x80,0x00,0x01,0x01,0x00,0x00,0x80,0x80,0x00,0x01,0x01,0x00,0x00,0x80,0x00,0x24,0x00,0x01,0x00,0x00,0x41,0x08,0x42,0x10,0x82,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x24,0x00,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x24,0x00,0x00,0x00,0x00,0x41,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x20,0x04,0xFF,0xFF,0xFF,0x00,0x02,0x00,0x0C,0x00,0x10,0x00,0x00,0x07,0x00,0x1E,0x00,0x38,0x00,0x00,0x07,0x00,0x1E,0x00,0x38,0x00,0x00,0x07,0x00,0x1E,0x00,0x38,0x00,0x01,0xC7,0x1F,0x1E,0x3E,0x38,0x00,0x0F,0xC7,0x1F,0x9E,0x3E,0x38,0xF0,0x1F,0xC7,0x1F,0x9E,0x3E,0x38,0xF8,0x3F,0xC7,0x1F,0x9E,0x3E,0x38,0xFC,0x7F,0xC7,0x1F,0x9E,0x3E,0x38,0xFE,0x7F,0xC0,0x1F,0x80,0x7E,0x00,0xFE,0xFF,0xE0,0x3F,0x80,0x7F,0x01,0xFF,0xFF,0xF0,0x7F,0xE0,0xFF,0x83,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,0x0F,0xF0,0x00,0x00,0x00,0x00,0x00,0x0F,0xF0,0x00,0x00,0x00,0x00,0x00,0x0F,0xF0,0x00,0x00,0x00,0x00,0x00,0x0F,0xF0,0x00,0x0F,0x81,0xF0,0x7C,0x0F,0xF0,0x00,0x1F,0xC3,0xF8,0xFE,0x0F,0xF0,0x00,0x1F,0xE7,0xF8,0xFE,0x0F,0xF0,0x00,0x1F,0xE7,0xF8,0xFE,0x0F,0xF0,0x00,0x1F,0xC3,0xF8,0xFE,0x0F,0xF0,0x00,0x0F,0xC3,0xF0,0x7C,0x0F,0xF0,0x00,0x00,0x00,0x00,0x00,0x0F,0xF0,0x00,0x00,0x00,0x00,0x00,0x0F,0xF0,0x1C,0x07,0x81,0xE0,0x38,0x0F,0xF0,0x7F,0x1F,0xC3,0xF8,0xFE,0x0F,0xF0,0x7F,0x1F,0xE7,0xF8,0xFE,0x0F,0xF0,0x7F,0x1F,0xE7,0xF8,0xFE,0x0F,0xF0,0x7F,0x1F,0xC3,0xF8,0xFE,0x0F,0xF0,0x3E,0x07,0x81,0xE0,0x7C,0x0F,0xF0,0x00,0x00,0x00,0x00,0x00,0x0F,0xF0,0x00,0x00,0x00,0x00,0x00,0x0F,0xF0,0x3E,0x0F,0xC3,0xF0,0x00,0x0F,0xF0,0x7F,0x1F,0xC3,0xF8,0x00,0x0F,0xF0,0x7F,0x1F,0xE7,0xF8,0x00,0x0F,0xF0,0x7F,0x1F,0xE7,0xF8,0x00,0x0F,0xF0,0x7F,0x1F,0xC3,0xF8,0x00,0x0F,0xF0,0x3E,0x0F,0xC3,0xF0,0x00,0x0F,0xF0,0x00,0x00,0x00,0x00,0x00,0x0F,0xF0,0x00,0x00,0x00,0x00,0x00,0x0F,0xF0,0x00,0x00,0x00,0x00,0x00,0x0F,0x70,0x00,0x00,0x00,0x00,0x00,0x0F,0x78,0x00,0x00,0x00,0x00,0x00,0x0E,0x7C,0x00,0x00,0x00,0x00,0x00,0x1E,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x04,0x55,0x55,0x55,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x04,0x20,0x20,0x00,0x01,0x41,0x20,0x10,0x20,0x20,0x00,0x01,0x41,0x08,0x20,0x20,0x20,0x00,0x01,0x41,0x00,0x40,0x20,0x20,0x00,0x01,0x41,0x02,0x00,0x28,0xA0,0x00,0x01,0x41,0x00,0x00,0x00,0x00,0x12,0x80,0x00,0x00,0x00,0x10,0x40,0x00,0x00,0x82,0x00,0x00,0x04,0x00,0x12,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x10,0x08,0x00,0x00,0x00,0x00,0x00,0x10,0x08,0x00,0x00,0x00,0x00,0x00,0x10,0x08,0x00,0x00,0x00,0x00,0x00,0x10,0x08,0x00,0x10,0x20,0x00,0x00,0x10,0x08,0x00,0x20,0x00,0x05,0x00,0x10,0x08,0x00,0x20,0x00,0x04,0x00,0x10,0x08,0x00,0x20,0x00,0x04,0x00,0x10,0x08,0x00,0x20,0x00,0x05,0x00,0x10,0x08,0x00,0x10,0x20,0x00,0x00,0x10,0x08,0x00,0x00,0x00,0x00,0x00,0x10,0x08,0x00,0x00,0x00,0x00,0x00,0x10,0x08,0x00,0x10,0x20,0x08,0x00,0x10,0x08,0x80,0x80,0x00,0x05,0x00,0x10,0x08,0x00,0x20,0x00,0x04,0x00,0x10,0x08,0x00,0x20,0x00,0x04,0x00,0x10,0x08,0x00,0xA0,0x00,0x05,0x00,0x10,0x08,0x00,0x10,0x24,0x08,0x00,0x10,0x08,0x00,0x00,0x00,0x00,0x00,0x10,0x08,0x00,0x00,0x00,0x00,0x00,0x10,0x08,0x00,0x10,0x00,0x08,0x00,0x10,0x08,0x00,0xA0,0x00,0x04,0x00,0x10,0x08,0x00,0x20,0x00,0x04,0x00,0x10,0x08,0x00,0x20,0x00,0x04,0x00,0x10,0x08,0x00,0x20,0x00,0x04,0x00,0x10,0x08,0x00,0x10,0x24,0x00,0x00,0x10,0x08,0x00,0x00,0x00,0x00,0x00,0x10,0x08,0x00,0x00,0x00,0x00,0x00,0x10,0x08,0x00,0x00,0x00,0x00,0x00,0x10,0x08,0x00,0x00,0x00,0x00,0x00,0x10,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x40,0x40,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    };

    const unsigned char appNameClass::icon_sleep[] PROGMEM = {
        0x02,0x01,0x02,0x38,0x02,0x38,0x04,0x55,0x55,0x55,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0xE0,0x00,0x00,0x00,0x00,0x02,0x00,0x02,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x02,0x00,0x3F,0xE0,0x00,0x00,0x00,0x04,0x01,0x00,0x04,0x01,0x00,0x00,0x00,0x08,0x00,0x01,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x40,0x40,0x00,0x20,0x40,0x00,0x00,0x00,0x20,0x00,0x40,0x80,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x08,0x01,0x04,0x00,0x3F,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x04,0x02,0x00,0x00,0x40,0x02,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x40,0x04,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x20,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x10,0x00,0x21,0x10,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x04,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x20,0x10,0x00,0x00,0x00,0x40,0x00,0x21,0x08,0x60,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x40,0x00,0x00,0x80,0x00,0x00,0x00,0x08,0x00,0x01,0x04,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x01,0x00,0x00,0x08,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x40,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x04,0x01,0x00,0x00,0x00,0x00,0x00,0xE0,0x02,0x00,0x00,0x00,0x00,0x02,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x02,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xAA,0xAA,0xAA,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x04,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x20,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0xC0,0x10,0x04,0x00,0x00,0x00,0x02,0x00,0x02,0x02,0x00,0x00,0x08,0x00,0x00,0x00,0x80,0x00,0x00,0x10,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x40,0x00,0x00,0x00,0x00,0x10,0x00,0x80,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x08,0x01,0x08,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x02,0x10,0x00,0x40,0x04,0x00,0x40,0x02,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x20,0x00,0x00,0x08,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x20,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x20,0x00,0x80,0x20,0x00,0x01,0x20,0x10,0x00,0x80,0x00,0x00,0x10,0x40,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x02,0x00,0x10,0x80,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x01,0x00,0x00,0x00,0x10,0x00,0x00,0x01,0x00,0x00,0x00,0x10,0x10,0x60,0x00,0x00,0x10,0x00,0x10,0x10,0x60,0x00,0x00,0x20,0x00,0x10,0x10,0x60,0x01,0x00,0x40,0x00,0x01,0x08,0x60,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x22,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x08,0x00,0x00,0x00,0xA0,0x00,0x02,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x10,0x00,0x00,0x00,0x80,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x20,0x00,0x00,0x00,0x00,0x02,0x00,0x80,0x00,0x00,0x00,0x00,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xF8,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xF0,0x00,0x00,0x00,0xFF,0x00,0x0F,0xF8,0x00,0x00,0x03,0xFC,0x00,0x01,0xFC,0x00,0x00,0x07,0xF0,0x00,0x00,0x7F,0x00,0x00,0x0F,0xC0,0x00,0x00,0x3F,0x80,0x00,0x1F,0x80,0x00,0x00,0x0F,0xC0,0x00,0x3F,0x00,0x00,0x00,0x07,0xC0,0x00,0x3E,0x00,0x00,0x00,0x03,0xE0,0x00,0x7C,0x00,0x00,0x00,0x01,0xF0,0x00,0xF8,0x00,0x00,0x00,0x00,0xF0,0x00,0xF0,0x00,0x3F,0xFC,0x00,0xF8,0x01,0xF0,0x00,0x3F,0xFC,0x00,0x78,0x01,0xE0,0x00,0x3F,0xF8,0x00,0x3C,0x01,0xE0,0x00,0x3F,0xF8,0x00,0x3C,0x03,0xC0,0x00,0x7F,0xF0,0x00,0x3E,0x03,0xC0,0x00,0x7F,0xF0,0x00,0x1E,0x03,0xC0,0x00,0x7F,0xE0,0x00,0x1E,0x07,0xC0,0x00,0x7F,0xC0,0x00,0x1E,0x1F,0xE0,0x00,0x7F,0xC0,0x00,0x0F,0x3F,0xF8,0x00,0xFF,0xFE,0x00,0x0F,0x7F,0xF8,0x00,0xFF,0xFC,0x00,0x0F,0x7F,0xFC,0x00,0xFF,0xFC,0x00,0x0F,0xFF,0xFC,0x00,0xFF,0xF8,0x00,0x0F,0xFF,0xFC,0x00,0xFF,0xF0,0x00,0x0F,0x08,0x00,0x01,0xFF,0xE0,0x00,0x0F,0x08,0x00,0x01,0xFF,0xC0,0x00,0x0F,0x08,0x00,0x00,0xFF,0x80,0x00,0x1E,0x00,0x00,0x00,0x0F,0x80,0x00,0x1E,0x00,0x00,0x00,0x1F,0x00,0x00,0x1E,0x00,0x00,0x00,0x1E,0x00,0x00,0x3E,0x00,0x00,0x00,0x1C,0x00,0x00,0x3C,0x00,0x00,0x00,0x3C,0x00,0x00,0x3C,0x00,0x00,0x00,0x38,0x00,0x00,0x78,0x00,0x00,0x00,0x70,0x00,0x00,0xF8,0x00,0x00,0x00,0x60,0x00,0x00,0xF0,0x00,0x00,0x00,0x40,0x00,0x01,0xF0,0x00,0x00,0x00,0x00,0x00,0x03,0xE0,0x00,0x00,0x00,0x00,0x00,0x07,0xC0,0x00,0x00,0x00,0x00,0x00,0x0F,0xC0,0x00,0x00,0x00,0x00,0x00,0x1F,0x80,0x00,0x00,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0x00,0x00,0x01,0xFE,0x00,0x00,0x00,0x00,0x00,0x07,0xF8,0x00,0x00,0x00,0x00,0x01,0xFF,0xF0,0x00,0x00,0x00,0x00,0x01,0xFF,0xC0,0x00,0x00,0x00,0x00,0x01,0xFF,0x00,0x00,0x00,0x00,0x00,0x01,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    };

#else
    const unsigned char appNameClass::def[] PROGMEM = {
        0x02,0x01,0x02,0x08,0x02,0x08,0x04,0xff,0xff,0xff,0x80,0xE0,0xF8,0xFF,0xFF,0xF8,0xE0,0x80,
    };

    const unsigned char appNameClass::icon_pedometer[] PROGMEM = {
        0x02,0x01,0x02,0x18,0x02,0x18,0x04,0xFF,0xFF,0xFF,0x0E,0x00,0x00,0x1F,0x00,0x00,0x1F,0x80,0x00,0x3F,0x80,0xF8,0x3F,0x81,0xF8,0x3F,0x81,0xFC,0x3F,0x81,0xFC,0x3F,0x81,0xFC,0x3F,0x81,0xFC,0x3F,0x81,0xFC,0x3F,0x81,0xFC,0x1F,0x01,0xFC,0x1F,0x01,0xFC,0x18,0x01,0xF8,0x00,0x00,0xF8,0x01,0x80,0xF8,0x1F,0x80,0x18,0x0F,0x80,0x00,0x0F,0x81,0xC0,0x0F,0x81,0xF8,0x07,0x81,0xF0,0x00,0x01,0xF0,0x00,0x01,0xE0,0x00,0x01,0xC0,0x04,0x55,0x55,0x55,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x40,0x00,0x00,0x40,0x00,0x00,0x40,0x00,0x02,0x40,0x00,0x02,0x40,0x00,0x02,0x40,0x40,0x02,0x00,0x00,0x02,0x00,0x00,0x02,0x00,0x80,0x02,0x20,0x00,0x00,0x18,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0x24,0x10,0x01,0x80,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x10,0x00,0x00,0x20,0x04,0xAA,0xAA,0xAA,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x70,0x00,0x40,0x00,0x00,0x40,0x04,0x00,0x40,0x00,0x00,0x42,0x00,0x00,0x42,0x00,0x00,0x42,0x00,0x00,0x02,0x00,0x00,0x02,0x00,0x20,0x82,0x00,0x20,0x00,0x00,0x07,0x00,0x04,0x00,0x00,0x04,0x02,0x00,0x04,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x40,0x38,0x00,0x40,0x00,0x00,0x42,0x00,0x03,0x02,0x00,0x00,0x02,0x00,0x00,0x00,0x00,
    };

    const unsigned char appNameClass::icon_light[] PROGMEM = {
        0x02,0x01,0x02,0x10,0x02,0x10,0x04,0xff,0xd9,0x00,0x03,0xC0,0x0F,0x30,0x1F,0x08,0x3F,0x04,0x7F,0x02,0x7F,
        0x02,0xFF,0x01,0xFF,0x01,0xFF,0x01,0xFF,0x01,0x7F,0x02,0x7F,0x02,0x3F,0x04,0x1F,0x08,0x0F,0x30,0x03,0xC0,
    };

    const unsigned char appNameClass::icon_time[] PROGMEM = {
        0x02,0x01,0x02,0x18,0x02,0x18,0x04,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x41,0x20,0x02,0x41,0x20,0x06,0xC3,0x60,0x02,0x59,0x20,0x02,0x41,0x20,0x02,0x59,0x20,0x02,0x41,0x20,0x02,0x41,0x20,0x02,0x41,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xd8,0xd8,0xd8,0x3E,0x00,0x7C,0x22,0x00,0x44,0x21,0xFF,0xC4,0x20,0x00,0x04,0x40,0x00,0x02,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x40,0x00,0x02,0x20,0x00,0x04,0x13,0xFF,0xC8,0x12,0x00,0x48,0x1E,0x00,0x78,0x04,0x8f,0x8f,0x8f,0x00,0x00,0x00,0x1C,0x00,0x38,0x1C,0x00,0x38,0x1F,0xFF,0xF8,0x3F,0xFF,0xFC,0x78,0x00,0x0E,0x70,0x00,0x06,0x60,0x00,0x02,0x60,0x00,0x02,0x60,0x00,0x02,0x60,0x00,0x02,0x60,0x00,0x02,0x60,0x00,0x02,0x60,0x00,0x02,0x60,0x00,0x02,0x60,0x00,0x02,0x60,0x00,0x02,0x70,0x00,0x06,0x78,0x00,0x0E,0x3F,0xFF,0xFC,0x1F,0xFF,0xF8,0x0C,0x00,0x30,0x0C,0x00,0x30,0x00,0x00,0x00,
    };

    const unsigned char appNameClass::icon_date[] PROGMEM = {
        0x02,0x01,0x02,0x18,0x02,0x18,0x04,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x00,0x00,0x78,0x00,0x00,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x00,0x00,0x78,0x00,0x00,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xff,0xff,0xff,0xFF,0xFF,0xFF,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0xFF,0xFF,0xFF,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0xFF,0xFF,0xFF,0x04,0xd8,0xd8,0xd8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x3C,0x00,0x1E,0x3C,0x00,0x1E,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x3C,0x00,0x1E,0x3C,0x00,0x1E,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x3C,0x00,0x1E,0x3C,0x00,0x1E,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    };

    const unsigned char appNameClass::icon_sleep[] PROGMEM = {
        0x02,0x01,0x02,0x18,0x02,0x18,0x04,0xff,0xd9,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x07,0xC0,0x00,0x1F,0xF0,0x00,0x3E,0x08,0x00,0x78,0x00,0x00,0x70,0x00,0x00,0xF0,0x00,0x00,0xE0,0x00,0x00,0xE0,0x00,0x00,0xE0,0x00,0x00,0xF0,0x00,0x00,0x70,0x00,0x00,0x78,0x00,0x00,0x3E,0x08,0x00,0x1F,0xF0,0x00,0x07,0xC0,0x00,0x04,0xff,0xff,0xff,0x00,0x00,0x07,0x00,0x00,0x01,0x00,0x0F,0xC2,0x00,0x00,0xC4,0x00,0x01,0x87,0x00,0x03,0x00,0x00,0x06,0x00,0x00,0x0C,0x00,0x00,0x0F,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    };
#endif

const unsigned char appNameClass::icon[] PROGMEM = {
    
	/*            PUT YOUR ICON HERE            */

    #ifdef USE_L_MENU_IMAGES
    #elif defined(USE_XL_MENU_IMAGES)
        #ifdef COLOR_GRAY_16
            0x02,0x01,0x02,0x50,0x02,0x50,0x04,0x7E,0x7E,0x7E,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x18,0x02,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x00,0x04,0x00,0x40,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x80,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x00,0x00,0xC0,0x00,0x00,0x20,0x00,0x80,0x04,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x08,0x00,0x00,0x04,0x20,0x00,0x00,0x00,0x00,0x40,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x00,0x80,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x02,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x20,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x0C,0x00,0x00,0x80,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x01,0x00,0x00,0x48,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x40,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x80,0x00,0x00,0x22,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x88,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0A,0x02,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x80,0x00,0x00,0x00,0x00,0x04,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x04,0x3E,0x3E,0x3E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x11,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x01,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x32,0x10,0x00,0x04,0x00,0x00,0x00,0x00,0x02,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x00,0x20,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x02,0x02,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x22,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x01,0x04,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x24,0x20,0x00,0x00,0x00,0x00,0x80,0x01,0x10,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x14,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x22,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x41,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x01,0xE0,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x80,0x00,0x08,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x08,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x00,0x00,0x41,0x08,0x00,0x00,0x00,0x00,0x00,0x18,0x06,0x30,0x00,0x06,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x10,0x00,0x04,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x08,0x40,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x40,0x40,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x04,0x20,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x7F,0xFF,0xE7,0xF8,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0xFF,0xFF,0x83,0xF8,0x3F,0xFF,0xFF,0xFF,0x00,0x01,0xFF,0xFF,0x01,0xF0,0x3F,0xFF,0xFF,0xFF,0x80,0x01,0xFF,0xFF,0x01,0xF0,0x3F,0xFF,0xFF,0xFF,0x80,0x03,0xFF,0xFF,0x80,0x00,0x3F,0xFF,0xFF,0xFF,0xC0,0x03,0xFF,0xFF,0x80,0x00,0x3F,0xFF,0xFF,0xFF,0xC0,0x07,0xFF,0xFF,0x80,0x00,0x7F,0xFF,0xFF,0xFF,0xE0,0x07,0xFF,0xFF,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xE0,0x0F,0xFF,0xCE,0x00,0x00,0x1E,0x7F,0xFF,0xFF,0xF0,0x0F,0xFF,0x80,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xF0,0x1F,0xFF,0x00,0x00,0x00,0x00,0x3F,0x3F,0xFF,0xF8,0x1F,0xFF,0x00,0x01,0xF0,0x00,0x3E,0x3F,0xFF,0xF8,0x1F,0xFF,0x00,0x07,0xFC,0x00,0x00,0x03,0xFF,0xF8,0x3F,0xFF,0x80,0x0F,0xFC,0x00,0x20,0x03,0xFF,0xFC,0x3F,0xFF,0xC0,0x1F,0xFE,0x00,0xF0,0x03,0xFF,0xFC,0x3F,0xFF,0xF0,0x1F,0xFE,0x01,0xF1,0xC3,0xFF,0xFC,0x3F,0xFF,0xF0,0x1F,0xFF,0x01,0xC1,0xE0,0xFF,0xFC,0x7F,0xFF,0xF0,0x1F,0xFF,0x01,0x83,0xE0,0xFF,0xFE,0x7F,0xFF,0xF0,0x1F,0xFF,0x01,0xC1,0xE0,0xFF,0xFE,0x7F,0xFF,0xF0,0x1F,0xFE,0x01,0xF0,0xC3,0xFF,0xFE,0x7F,0xFF,0xC0,0x0F,0xFE,0x00,0x70,0x03,0xFF,0xFE,0x7F,0xFF,0x00,0x0F,0xFC,0x00,0x00,0x01,0xFF,0xFE,0x7F,0xFF,0x00,0x07,0xF8,0x00,0x12,0x13,0xFF,0xFE,0x7F,0xFF,0x00,0x00,0xE0,0x00,0x3E,0x3F,0xFF,0xFE,0x7F,0xFF,0x80,0x00,0x00,0x00,0x3F,0x3F,0xFF,0xFE,0x7F,0xFF,0x80,0x00,0x00,0x08,0x63,0xFF,0xFF,0xFE,0x7F,0xFF,0xDF,0x00,0x00,0x1F,0xC3,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0x80,0x00,0x3B,0xC1,0xCF,0xFF,0xFE,0x7F,0xFF,0xFF,0x80,0x00,0x70,0x80,0x87,0xFF,0xFE,0x7F,0xFF,0xFF,0x80,0x00,0x20,0x00,0x03,0xFF,0xFE,0x7F,0xFF,0xFF,0x80,0x00,0x30,0x00,0x07,0xFF,0xFE,0x3F,0xFF,0xFF,0x01,0xF0,0x30,0x00,0x0F,0xFF,0xFC,0x3F,0xFF,0xFF,0x03,0xF0,0x38,0x18,0x0F,0xFF,0xFC,0x3F,0xFF,0xFF,0x83,0xF8,0x70,0x3E,0x07,0xFF,0xFC,0x3F,0xFF,0xFF,0xE7,0xF9,0xC0,0x7F,0x01,0xFF,0xFC,0x1F,0xFF,0xFF,0xFF,0xFF,0x80,0xFF,0x00,0xFF,0xF8,0x1F,0xFF,0xFF,0xFF,0xFF,0x80,0xFF,0x00,0xFF,0xF8,0x1F,0xFF,0xFF,0xFF,0xFF,0x80,0xFF,0x00,0xFF,0xF8,0x0F,0xFF,0xFF,0xFF,0xFF,0xE0,0x7F,0x03,0xFF,0xF0,0x0F,0xFF,0xFF,0xFF,0xFF,0xF0,0x3E,0x0F,0xFF,0xF0,0x07,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x0F,0xFF,0xE0,0x07,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x0F,0xFF,0xE0,0x03,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x07,0xFF,0xC0,0x03,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x03,0xFF,0xC0,0x01,0xFF,0xFF,0xFF,0xFF,0xF1,0x81,0x87,0xFF,0x80,0x01,0xFF,0xFF,0xFF,0xFF,0xFB,0xC3,0xEF,0xFF,0x80,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xC3,0xFF,0xFF,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xE3,0xFF,0xFE,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x68,0x68,0x68,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x94,0x94,0x94,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x14,0x14,0x14,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x54,0x54,0x54,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x28,0x28,0x28,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        #else
            0x02,0x01,0x02,0x50,0x02,0x50,0x04,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xC0,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x01,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x03,0xFF,0xFF,0xFF,0xFF,0x04,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x38,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x3C,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0xA0,0x00,0x00,0x00,0x00,0x07,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0xFF,0xFF,0xE7,0xF8,0xFF,0xFF,0xFF,0xFF,0x00,0x01,0xFF,0xFF,0x83,0xF8,0x3F,0xFF,0xFF,0xFF,0x80,0x01,0xFF,0xFF,0x03,0xF0,0x3F,0xFF,0xFF,0xFF,0x80,0x03,0xFF,0xFF,0x01,0xF0,0x3F,0xFF,0xFF,0xFF,0xC0,0x07,0xFF,0xFF,0x80,0x00,0x3F,0xFF,0xFF,0xFF,0xE0,0x07,0xFF,0xFF,0x80,0x00,0x3F,0xFF,0xFF,0xFF,0xE0,0x0F,0xFF,0xFF,0x80,0x00,0x7F,0xFF,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xF0,0x1F,0xFF,0xCE,0x00,0x00,0x1E,0x7F,0xFF,0xFF,0xF8,0x1F,0xFF,0x80,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xF8,0x1F,0xFF,0x80,0x00,0x00,0x00,0x3F,0x3F,0xFF,0xF8,0x3F,0xFF,0x00,0x03,0xF0,0x00,0x3E,0x3F,0xFF,0xFC,0x3F,0xFF,0x00,0x07,0xFC,0x00,0x00,0x03,0xFF,0xFC,0x3F,0xFF,0x80,0x0F,0xFE,0x00,0x20,0x03,0xFF,0xFC,0x7F,0xFF,0xC0,0x1F,0xFE,0x00,0xF0,0x03,0xFF,0xFE,0x7F,0xFF,0xF0,0x1F,0xFE,0x01,0xF1,0xC3,0xFF,0xFE,0x7F,0xFF,0xF0,0x1F,0xFF,0x01,0xC1,0xE0,0xFF,0xFE,0x7F,0xFF,0xF0,0x1F,0xFF,0x01,0x83,0xE0,0xFF,0xFE,0x7F,0xFF,0xF0,0x1F,0xFF,0x01,0xC1,0xE0,0xFF,0xFE,0x7F,0xFF,0xF0,0x1F,0xFE,0x01,0xF0,0xC3,0xFF,0xFE,0x7F,0xFF,0xC0,0x0F,0xFE,0x00,0x70,0x03,0xFF,0xFE,0xFF,0xFF,0x00,0x0F,0xFC,0x00,0x20,0x01,0xFF,0xFE,0xFF,0xFF,0x00,0x07,0xF8,0x00,0x12,0x13,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0xE0,0x00,0x3E,0x3F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x3F,0x3F,0xFF,0xFF,0xFF,0xFF,0x82,0x00,0x00,0x08,0x63,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x1F,0xC3,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0x80,0x00,0x3B,0xC1,0xEF,0xFF,0xFE,0x7F,0xFF,0xFF,0x80,0x00,0x71,0x80,0x87,0xFF,0xFE,0x7F,0xFF,0xFF,0x80,0x00,0x20,0x00,0x03,0xFF,0xFE,0x7F,0xFF,0xFF,0x80,0x00,0x30,0x00,0x07,0xFF,0xFE,0x7F,0xFF,0xFF,0x01,0xF0,0x30,0x00,0x0F,0xFF,0xFE,0x7F,0xFF,0xFF,0x03,0xF0,0x38,0x18,0x0F,0xFF,0xFE,0x7F,0xFF,0xFF,0x83,0xF8,0x70,0x7E,0x07,0xFF,0xFE,0x3F,0xFF,0xFF,0xF7,0xF9,0xC0,0x7F,0x01,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFF,0x80,0xFF,0x00,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFF,0x80,0xFF,0x00,0xFF,0xFC,0x1F,0xFF,0xFF,0xFF,0xFF,0x80,0xFF,0x00,0xFF,0xF8,0x1F,0xFF,0xFF,0xFF,0xFF,0xE0,0x7F,0x07,0xFF,0xF8,0x1F,0xFF,0xFF,0xFF,0xFF,0xF0,0x3E,0x0F,0xFF,0xF8,0x0F,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x0F,0xFF,0xF0,0x0F,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x0F,0xFF,0xF0,0x07,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x07,0xFF,0xE0,0x07,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x07,0xFF,0xE0,0x03,0xFF,0xFF,0xFF,0xFF,0xF1,0x81,0xC7,0xFF,0xC0,0x01,0xFF,0xFF,0xFF,0xFF,0xFB,0xC3,0xEF,0xFF,0x80,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xC3,0xFF,0xFF,0x80,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xE3,0xFF,0xFF,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xC0,0x00,0x00,0x00,0x00,0x04,0x70,0x70,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xE0,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x00,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xE0,0x00,0x40,0xC0,0x00,0x00,0x00,0x00,0x80,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x08,0x00,0x00,0x05,0x28,0x00,0x00,0x00,0x00,0x40,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x01,0x01,0x08,0xC0,0x00,0x00,0x00,0x00,0x08,0x20,0x00,0x00,0x02,0x04,0x00,0x00,0x00,0x00,0x08,0x20,0x00,0x00,0x20,0x13,0x00,0x00,0x00,0x00,0x08,0x20,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x08,0x20,0x00,0x00,0x12,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x20,0x00,0x00,0x00,0x00,0x20,0x00,0x01,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x09,0x0C,0x00,0x00,0x00,0x00,0x00,0x02,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x49,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x08,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x40,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x22,0x10,0x00,0x00,0x00,0x00,0x00,0x20,0x04,0x88,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x88,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x88,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x22,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0A,0x22,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x70,0x70,0xA0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x32,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x20,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x01,0x04,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0x10,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x14,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x41,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x01,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x08,0x02,0x30,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xE0,0xE0,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x07,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x07,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x0F,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x1F,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x39,0xFF,0xFF,0xE3,0x80,0x00,0x00,0x00,0x00,0x00,0x7F,0xFE,0x1F,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x07,0xFF,0xC0,0xC0,0x00,0x00,0x00,0x00,0x7F,0xF0,0x03,0xFF,0xC8,0xC4,0x00,0x00,0x00,0x00,0x3F,0xE0,0x01,0xFF,0x8F,0xFC,0x00,0x00,0x00,0x00,0x0F,0xE0,0x00,0xFE,0x07,0x38,0x00,0x00,0x00,0x00,0x07,0xC0,0x00,0xFC,0x0C,0x18,0x00,0x00,0x00,0x00,0x07,0xC0,0x00,0xFC,0x1C,0x0C,0x00,0x00,0x00,0x00,0x07,0xC0,0x00,0xFC,0x3C,0x0F,0x00,0x00,0x00,0x00,0x07,0xC0,0x00,0xFC,0x0C,0x0C,0x00,0x00,0x00,0x00,0x0F,0xE0,0x00,0xFC,0x0E,0x18,0x00,0x00,0x00,0x00,0x1F,0xE0,0x00,0xFF,0x0F,0xF8,0x00,0x00,0x00,0x00,0x7F,0xF0,0x01,0xFF,0x8F,0xFC,0x00,0x00,0x00,0x00,0x7F,0xF8,0x03,0xFF,0xC0,0xC0,0x00,0x00,0x00,0x00,0x7F,0xFC,0x07,0xFF,0xC0,0xC0,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x30,0xFF,0xFF,0xE1,0x9C,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xC0,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0x80,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0x8E,0x3C,0x30,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0x8F,0xFF,0xF8,0x00,0x00,0x00,0x00,0x00,0x7E,0x0F,0x8F,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,0x7C,0x0F,0xC7,0xFF,0xE0,0x00,0x00,0x00,0x00,0x00,0x7C,0x07,0xC7,0xC1,0xE0,0x00,0x00,0x00,0x00,0x00,0x18,0x03,0x07,0x80,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x80,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xC1,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x7F,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x1C,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x70,0xE0,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x70,0xA0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        #endif
    #else
        // small image
        0x02,0x01,0x02,0x20,0x02,0x20,0x04,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xC0,0x00,0x00,0x07,
        0xE0,0x00,0x00,0x0F,0xF0,0x00,0x00,0x0F,0xF0,0x00,0x00,0x0F,0xF0,0x00,0x00,0x0F,
        0xF0,0x00,0x00,0x07,0xE0,0x00,0x00,0x03,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xb4,0xb4,0xb4,0x00,0x0F,
        0xF0,0x00,0x00,0x0F,0xF0,0x00,0x00,0x0F,0xF0,0x00,0x00,0x0F,0xF0,0x00,0x08,0x0F,
        0xF0,0x10,0x1C,0x3F,0xFC,0x38,0x3E,0x7F,0xFE,0x7C,0x7F,0xF8,0x1F,0xFE,0xFF,0xE0,
        0x07,0xFF,0xFF,0xC0,0x03,0xFF,0x7F,0x80,0x01,0xFE,0x3F,0x00,0x00,0xFC,0x1F,0x00,
        0x00,0xF8,0x0E,0x00,0x00,0x70,0x0E,0x00,0x00,0x70,0x0E,0x00,0x00,0x70,0x0E,0x00,
        0x00,0x70,0x0E,0x00,0x00,0x70,0x0E,0x00,0x00,0x70,0x1F,0x00,0x00,0xF8,0x3F,0x00,
        0x00,0xFC,0x7F,0x80,0x01,0xFE,0xFF,0xC0,0x03,0xFF,0xFF,0xE0,0x07,0xFF,0x7F,0xF8,
        0x1F,0xFE,0x3E,0x7F,0xFE,0x7C,0x1C,0x3F,0xFC,0x38,0x08,0x0F,0xF0,0x10,0x00,0x0F,
        0xF0,0x00,0x00,0x0F,0xF0,0x00,0x00,0x0F,0xF0,0x00,0x00,0x0F,0xF0,0x00,0x04,0x47,
        0x47,0x47,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
        0xE0,0x00,0x00,0x1F,0xF8,0x00,0x00,0x3F,0xFC,0x00,0x00,0x7F,0xFE,0x00,0x00,0xFF,
        0xFF,0x00,0x00,0xFC,0x3F,0x00,0x01,0xF8,0x1F,0x80,0x01,0xF0,0x0F,0x80,0x01,0xF0,
        0x0F,0x80,0x01,0xF0,0x0F,0x80,0x01,0xF0,0x0F,0x80,0x01,0xF8,0x1F,0x80,0x00,0xFC,
        0x3F,0x00,0x00,0xFF,0xFF,0x00,0x00,0x7F,0xFE,0x00,0x00,0x3F,0xFC,0x00,0x00,0x1F,
        0xF8,0x00,0x00,0x07,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,
    #endif
};

#define appNameClass    TestApplicationApp         // App name without spaces
#define appName         "Test app"              // App name with spaces 

class appNameClass: public Application{
    public:
        virtual void onLoop() override;
        virtual void onDestroy() override;
        virtual void onEvent(unsigned char event, int val1, int val2, int val3, int val4, int val5) override;

        void onCreate();
        appNameClass(){ 
            fillScreen(0, 0, 0);  // filling background
            super_onCreate();           // Drawind statusbar and etc if needed
            onCreate(); 
        };

        static unsigned const char* getParams(const unsigned char type){
            switch(type){ 
              case PARAM_TYPE_NAME: return (unsigned char*)appName; 
              case PARAM_TYPE_ICON: return icon;
              default: return (unsigned char*)""; }
        };
        const static unsigned char icon[] PROGMEM;
      
};

void appNameClass::onCreate(){
    this->preventSleep         = true;
    this->preventInAppSleep    = true;

    DRAW_LIMITS_setEnable(true);
    DRAW_LIMIT_reset();
    DRAW_LIMITS_setEnable(STYLE_STATUSBAR_HEIGHT, -1, -1, -1);

    setDrawColor(255,255,255);
    //drawString(appName, 5, STYLE_STATUSBAR_HEIGHT + 10, 1);

/*
    set_pedometer_hours_steps(0, 30);
    set_pedometer_hours_steps(1, 156);
    set_pedometer_hours_steps(2, 201);
    set_pedometer_hours_steps(3, 89);
    set_pedometer_hours_steps(4, 122);
    set_pedometer_hours_steps(5, 12);
    set_pedometer_hours_steps(6, 214);
    set_pedometer_hours_steps(7, 34);
    set_pedometer_hours_steps(8, 64);
    set_pedometer_hours_steps(9, 230);
    set_pedometer_hours_steps(10, 20);
    set_pedometer_hours_steps(11, 0);
    set_pedometer_hours_steps(12, 0);
    set_pedometer_hours_steps(13, 0);
    set_pedometer_hours_steps(14, 0);
    set_pedometer_hours_steps(15, 0);
    set_pedometer_hours_steps(16, 0);
    set_pedometer_hours_steps(17, 0);
    set_pedometer_hours_steps(18, 0);
    set_pedometer_hours_steps(19, 0);
    set_pedometer_hours_steps(20, 10);
    set_pedometer_hours_steps(21, 120);
    set_pedometer_hours_steps(22, 215);
    set_pedometer_hours_steps(23, 200);

    set_pedometer_hours_sleep(0, 0);
    set_pedometer_hours_sleep(1, 0);
    set_pedometer_hours_sleep(2, 0);
    set_pedometer_hours_sleep(3, 0);
    set_pedometer_hours_sleep(4, 0);
    set_pedometer_hours_sleep(5, 0);
    set_pedometer_hours_sleep(6, 0);
    set_pedometer_hours_sleep(7, 0);
    set_pedometer_hours_sleep(8, 0);
    set_pedometer_hours_sleep(9, 0);
    set_pedometer_hours_sleep(10, 10);
    set_pedometer_hours_sleep(11, 60);
    set_pedometer_hours_sleep(12, 60);
    set_pedometer_hours_sleep(13, 60);
    set_pedometer_hours_sleep(14, 60);
    set_pedometer_hours_sleep(15, 60);
    set_pedometer_hours_sleep(16, 60);
    set_pedometer_hours_sleep(17, 60);
    set_pedometer_hours_sleep(18, 60);
    set_pedometer_hours_sleep(19, 30);
    set_pedometer_hours_sleep(20, 5);
    set_pedometer_hours_sleep(21, 0);
    set_pedometer_hours_sleep(22, 0);
    set_pedometer_hours_sleep(23, 0);
    */
    
    /*
    core_time_setYear(0);
    core_time_setMonth(0);
    core_time_setDate(0);
    core_time_setHours(0);
    core_time_setMinutes(0);
    core_time_setSeconds(0);
    core_time_setWeekDay(0);
    */

    /*
    set_pedometer_hours_steps(0, 0*2);
    set_pedometer_hours_steps(1, 1*2);
    set_pedometer_hours_steps(2, 2*2);
    set_pedometer_hours_steps(3, 3*2);
    set_pedometer_hours_steps(4, 4*2);
    set_pedometer_hours_steps(5, 5*2);
    set_pedometer_hours_steps(6, 6*2);
    set_pedometer_hours_steps(7, 7*2);
    set_pedometer_hours_steps(8, 8*2);
    set_pedometer_hours_steps(9, 9*2);
    set_pedometer_hours_steps(10, 10*2);
    set_pedometer_hours_steps(11, 11*2);
    set_pedometer_hours_steps(12, 12*2);
    set_pedometer_hours_steps(13, 13*2);
    set_pedometer_hours_steps(14, 14*2);
    set_pedometer_hours_steps(15, 15*2);
    set_pedometer_hours_steps(16, 16*2);
    set_pedometer_hours_steps(17, 17*2);
    set_pedometer_hours_steps(18, 18*2);
    set_pedometer_hours_steps(19, 19*2);
    set_pedometer_hours_steps(20, 20*2);
    set_pedometer_hours_steps(21, 21*2);
    set_pedometer_hours_steps(22, 22*2);
    set_pedometer_hours_steps(23, 23*2);

    set_pedometer_hours_steps_lastDay(0, 24*2);
    set_pedometer_hours_steps_lastDay(1, 25*2);
    set_pedometer_hours_steps_lastDay(2, 26*2);
    set_pedometer_hours_steps_lastDay(3, 27*2);
    set_pedometer_hours_steps_lastDay(4, 28*2);
    set_pedometer_hours_steps_lastDay(5, 29*2);
    set_pedometer_hours_steps_lastDay(6, 30*2);
    set_pedometer_hours_steps_lastDay(7, 31*2);
    set_pedometer_hours_steps_lastDay(8, 32*2);
    set_pedometer_hours_steps_lastDay(9, 33*2);
    set_pedometer_hours_steps_lastDay(10, 34*2);
    set_pedometer_hours_steps_lastDay(11, 35*2);
    set_pedometer_hours_steps_lastDay(12, 36*2);
    set_pedometer_hours_steps_lastDay(13, 37*2);
    set_pedometer_hours_steps_lastDay(14, 38*2);
    set_pedometer_hours_steps_lastDay(15, 39*2);
    set_pedometer_hours_steps_lastDay(16, 40*2);
    set_pedometer_hours_steps_lastDay(17, 41*2);
    set_pedometer_hours_steps_lastDay(18, 42*2);
    set_pedometer_hours_steps_lastDay(19, 43*2);
    set_pedometer_hours_steps_lastDay(20, 44*2);
    set_pedometer_hours_steps_lastDay(21, 45*2);
    set_pedometer_hours_steps_lastDay(22, 46*2);
    set_pedometer_hours_steps_lastDay(23, 47*2);

    set_pedometer_hours_sleep(0, 0*2+1);
    set_pedometer_hours_sleep(1, 1*2+1);
    set_pedometer_hours_sleep(2, 2*2+1);
    set_pedometer_hours_sleep(3, 3*2+1);
    set_pedometer_hours_sleep(4, 4*2+1);
    set_pedometer_hours_sleep(5, 5*2+1);
    set_pedometer_hours_sleep(6, 6*2+1);
    set_pedometer_hours_sleep(7, 7*2+1);
    set_pedometer_hours_sleep(8, 8*2+1);
    set_pedometer_hours_sleep(9, 9*2+1);
    set_pedometer_hours_sleep(10, 10*2+1);
    set_pedometer_hours_sleep(11, 11*2+1);
    set_pedometer_hours_sleep(12, 12*2+1);
    set_pedometer_hours_sleep(13, 13*2+1);
    set_pedometer_hours_sleep(14, 14*2+1);
    set_pedometer_hours_sleep(15, 15*2+1);
    set_pedometer_hours_sleep(16, 16*2+1);
    set_pedometer_hours_sleep(17, 17*2+1);
    set_pedometer_hours_sleep(18, 18*2+1);
    set_pedometer_hours_sleep(19, 19*2+1);
    set_pedometer_hours_sleep(20, 20*2+1);
    set_pedometer_hours_sleep(21, 21*2+1);
    set_pedometer_hours_sleep(22, 22*2+1);
    set_pedometer_hours_sleep(23, 23*2+1);

    set_pedometer_hours_sleep_lastDay(0, 24*2 + 1);
    set_pedometer_hours_sleep_lastDay(1, 25*2 + 1);
    set_pedometer_hours_sleep_lastDay(2, 26*2 + 1);
    set_pedometer_hours_sleep_lastDay(3, 27*2 + 1);
    set_pedometer_hours_sleep_lastDay(4, 28*2 + 1);
    set_pedometer_hours_sleep_lastDay(5, 29*2 + 1);
    set_pedometer_hours_sleep_lastDay(6, 30*2 + 1);
    set_pedometer_hours_sleep_lastDay(7, 31*2 + 1);
    set_pedometer_hours_sleep_lastDay(8, 32*2 + 1);
    set_pedometer_hours_sleep_lastDay(9, 33*2 + 1);
    set_pedometer_hours_sleep_lastDay(10, 34*2 + 1);
    set_pedometer_hours_sleep_lastDay(11, 35*2 + 1);
    set_pedometer_hours_sleep_lastDay(12, 36*2 + 1);
    set_pedometer_hours_sleep_lastDay(13, 37*2 + 1);
    set_pedometer_hours_sleep_lastDay(14, 38*2 + 1);
    set_pedometer_hours_sleep_lastDay(15, 39*2 + 1);
    set_pedometer_hours_sleep_lastDay(16, 40*2 + 1);
    set_pedometer_hours_sleep_lastDay(17, 41*2 + 1);
    set_pedometer_hours_sleep_lastDay(18, 42*2 + 1);
    set_pedometer_hours_sleep_lastDay(19, 43*2 + 1);
    set_pedometer_hours_sleep_lastDay(20, 44*2 + 1);
    set_pedometer_hours_sleep_lastDay(21, 45*2 + 1);
    set_pedometer_hours_sleep_lastDay(22, 46*2 + 1);
    set_pedometer_hours_sleep_lastDay(23, 47*2 + 1);
    */



    //set_pedometer_days_steps(0, 3500);
    /*
    set_pedometer_days_steps(1, 200);
    set_pedometer_days_steps(2, 300);
    set_pedometer_days_steps(3, 400);
    set_pedometer_days_steps(4, 500);
    set_pedometer_days_steps(5, 600);
    set_pedometer_days_steps(6, 700);*/

    //set_pedometer_days_sleep(0, 6*60);
    /*
    set_pedometer_days_sleep(1, 50);
    set_pedometer_days_sleep(2, 75);
    set_pedometer_days_sleep(3, 125);
    set_pedometer_days_sleep(4, 150);
    set_pedometer_days_sleep(5, 175);
    set_pedometer_days_sleep(6, 225);*/

    /*
    set_pedometer_days_steps(0, 7654);
    set_pedometer_days_steps(1, 6543);
    set_pedometer_days_steps(2, 4356);
    set_pedometer_days_steps(3, 8065);
    set_pedometer_days_steps(4, 12433);
    set_pedometer_days_steps(5, 10242);
    set_pedometer_days_steps(6, 6980);

    set_pedometer_days_sleep(0, 8*60-108);
    set_pedometer_days_sleep(1, 8*60-43);
    set_pedometer_days_sleep(2, 8*60-34);
    set_pedometer_days_sleep(3, 8*60+54);
    set_pedometer_days_sleep(4, 8*60-24);
    set_pedometer_days_sleep(5, 8*60-15);
    set_pedometer_days_sleep(6, 8*60-45);
    */

    drawString("Pedometer", 5, STYLE_STATUSBAR_HEIGHT + 10, 1);
    drawString("data setted", 5, STYLE_STATUSBAR_HEIGHT + 10*2, 1);

    //startApp(-1);
    /* * /
    long time_finish;
    long time_start;

    setDrawColor(255, 255, 255);
    drawLine(40,30, SCREEN_WIDTH, 30);

    const unsigned char testIcon[] = {
        0x02,0x01,0x02,0x18,0x02,0x18,0x04,0xff,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xC0,0x0F,0xFF,0xF0,0x1F,0xFF,0xF8,
        0x3F,0xFF,0xFC,0x3F,0xFF,0xFC,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,
        0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x3F,0xFF,
        0xFC,0x3F,0xFF,0xFC,0x1F,0xFF,0xF8,0x0F,0xFF,0xF0,0x03,0xFF,0xC0,0x00,0x00,0x00,0x04,0xff,0xff,0xff,0x03,0xFF,
        0xC0,0x0C,0x00,0x30,0x10,0x00,0x08,0x20,0x00,0x04,0x40,0x00,0x02,0x40,0x00,0x02,0x80,0x00,0x01,0x80,0x00,0x01,
        0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,
        0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x40,0x00,0x02,0x40,0x00,0x02,0x20,0x00,0x04,0x10,0x00,0x08,0x0C,0x00,
        0x30,0x03,0xFF,0xC0,
    };

    drawImage(true, testIcon, 70, 70); 
    // */

    /* * /
    fillScreen(0, 0, 0);
    setDrawColor(255, 255, 255);
    delay(10);
    time_start = millis();
    drawString("Rect test", 5, STYLE_STATUSBAR_HEIGHT + 10 + 16*0, 2);
    
    for(unsigned char i=0; i<61; i++){
        drawRect(1+i, 120+i, 240-i, 240-i);      
    }

    time_finish = millis()-time_start;
    drawString("Finish at " + String(time_finish), 5, STYLE_STATUSBAR_HEIGHT + 10 + 16*1, 2);

    //  Results:
    // 13.02.2021 - 3442 ms
    // 13.02.2021 - 259 ms    - hardware acceleration for drawing lines

    delay(2000);
    // */

    /* * /
    const unsigned char testIcon[] = {
        0x02,0x01,0x02,0x18,0x02,0x18,0x04,0xff,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xC0,0x0F,0xFF,0xF0,0x1F,0xFF,0xF8,
        0x3F,0xFF,0xFC,0x3F,0xFF,0xFC,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,
        0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x3F,0xFF,
        0xFC,0x3F,0xFF,0xFC,0x1F,0xFF,0xF8,0x0F,0xFF,0xF0,0x03,0xFF,0xC0,0x00,0x00,0x00,0x04,0xff,0xff,0xff,0x03,0xFF,
        0xC0,0x0C,0x00,0x30,0x10,0x00,0x08,0x20,0x00,0x04,0x40,0x00,0x02,0x40,0x00,0x02,0x80,0x00,0x01,0x80,0x00,0x01,
        0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,
        0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x40,0x00,0x02,0x40,0x00,0x02,0x20,0x00,0x04,0x10,0x00,0x08,0x0C,0x00,
        0x30,0x03,0xFF,0xC0,
    };
   
    fillScreen(0, 0, 0);
    core_views_statusBar_draw();
    setDrawColor(255, 255, 255);
    delay(10);
    time_start = millis();
    drawString("Icon test", 5, STYLE_STATUSBAR_HEIGHT + 10 + 16*0, 2);
    
    for(unsigned char i=0; i<30; i++){
        drawImage(true, testIcon, 120, 120);      
        drawImage(false, testIcon, 120, 120);      
    }

    setDrawColor(255, 255, 255);
    time_finish = millis()-time_start;
    drawString("Finish at " + String(time_finish), 5, STYLE_STATUSBAR_HEIGHT + 10 + 16*1, 2);

    //  Results:
    // 13.02.2021 - 3581 ms
    // 13.02.2021 - 2480 ms    - Hardware acceleration for drawing lines
    // 13.02.2021 - 2476 ms    - I down`t know why, just a surprise for me
    // 13.02.2021 - 1377 ms    - Double pixels changed to fast lines
    // 13.02.2021 - 911 ms     - Clear icon with rect
    // 13.02.2021 - 833 ms     - Hardware acceleration for filling rect
    // 13.02.2021 - 828 ms     - Draw a line if more 2 pixels in raw

    delay(2000);
    // */

    /* * /
    const unsigned char testIcon[] = {
        0x02,0x01,0x02,0x18,0x02,0x18,0x04,0xff,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xC0,0x0F,0xFF,0xF0,0x1F,0xFF,0xF8,
        0x3F,0xFF,0xFC,0x3F,0xFF,0xFC,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,
        0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x3F,0xFF,
        0xFC,0x3F,0xFF,0xFC,0x1F,0xFF,0xF8,0x0F,0xFF,0xF0,0x03,0xFF,0xC0,0x00,0x00,0x00,0x04,0xff,0xff,0xff,0x03,0xFF,
        0xC0,0x0C,0x00,0x30,0x10,0x00,0x08,0x20,0x00,0x04,0x40,0x00,0x02,0x40,0x00,0x02,0x80,0x00,0x01,0x80,0x00,0x01,
        0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,
        0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x40,0x00,0x02,0x40,0x00,0x02,0x20,0x00,0x04,0x10,0x00,0x08,0x0C,0x00,
        0x30,0x03,0xFF,0xC0,
    };

    fillScreen(0, 0, 0);
    core_views_statusBar_draw();
    setDrawColor(255, 255, 255);
    delay(10);
    time_start = millis();
    drawString("String test", 5, STYLE_STATUSBAR_HEIGHT + 10 + 16*0, 2);
    
    for(unsigned char ii=0; ii<10; ii++){
        #ifdef ESP8266
            ESP.wdtDisable();
        #endif
        for(unsigned char i=0; i<10; i++){
            setDrawColor(255, 255, 255);
            drawString("Blink string", 5, STYLE_STATUSBAR_HEIGHT + 10 + 16*5, 1);
            setDrawColor(0, 0, 0);
            //drawString("Blink string", 5, STYLE_STATUSBAR_HEIGHT + 10 + 16*5, 1);    
            clearString("Blink string", 5, STYLE_STATUSBAR_HEIGHT + 10 + 16*5, 1);    
        }
    }

    setDrawColor(255, 255, 255);
    time_finish = millis()-time_start;
    drawString("Finish at " + String(time_finish), 5, STYLE_STATUSBAR_HEIGHT + 10 + 16*1, 2);

    //  Results:
    // 13.02.2021 3170ms
    // 13.02.2021 1935ms - Hardware acceleration for drawing lines
    // 14.02.2021 1933ms - Some optimization
    // 14.02.2021 1418ms - Added function clearString

    delay(2000);
    // */
    
    /* * /
    const unsigned char testIcon[] = {
        0x02,0x01,0x02,0x18,0x02,0x18,0x04,0xff,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xC0,0x0F,0xFF,0xF0,0x1F,0xFF,0xF8,
        0x3F,0xFF,0xFC,0x3F,0xFF,0xFC,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,
        0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x7F,0xFF,0xFE,0x3F,0xFF,
        0xFC,0x3F,0xFF,0xFC,0x1F,0xFF,0xF8,0x0F,0xFF,0xF0,0x03,0xFF,0xC0,0x00,0x00,0x00,0x04,0xff,0xff,0xff,0x03,0xFF,
        0xC0,0x0C,0x00,0x30,0x10,0x00,0x08,0x20,0x00,0x04,0x40,0x00,0x02,0x40,0x00,0x02,0x80,0x00,0x01,0x80,0x00,0x01,
        0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x80,
        0x00,0x01,0x80,0x00,0x01,0x80,0x00,0x01,0x40,0x00,0x02,0x40,0x00,0x02,0x20,0x00,0x04,0x10,0x00,0x08,0x0C,0x00,
        0x30,0x03,0xFF,0xC0,
    };

    fillScreen(0, 0, 0);
    core_views_statusBar_draw();
    setDrawColor(255, 255, 255);
    delay(10);
    time_start = millis();
    drawString("String test", 5, STYLE_STATUSBAR_HEIGHT + 10 + 16*0, 2);
    
    for(unsigned char ii=0; ii<5; ii++){
        #ifdef ESP8266
            ESP.wdtDisable();
        #endif

        setDrawColor(255, 255, 255);
        drawString("Blink", 5, STYLE_STATUSBAR_HEIGHT + 10 + 16*5, 7);
        setDrawColor(0, 0, 0);
        clearString("Blink", 5, STYLE_STATUSBAR_HEIGHT + 10 + 16*5, 7);    

    }

    setDrawColor(255, 255, 255);
    time_finish = millis()-time_start;
    drawString("Finish at " + String(time_finish), 5, STYLE_STATUSBAR_HEIGHT + 10 + 16*1, 2);

    //  Results:
    // 13.02.2021 3620 ms
    // 14.02.2021 2215 ms    - Added function clearString
    // 14.02.2021 525 ms     - Draw optimization
    // 14.02.2021 504 ms     - Drawing pixels in raw with fontsize>1

    delay(2000);
    
    // */
    
}

void appNameClass::onLoop(){
    /*
        Write you code onLoop here
    */

    driver_display_setBrightness(millis()/1000%255);
}

void appNameClass::onDestroy(){
    /*
        Write you code onDestroy here
    */
}

void appNameClass::onEvent(unsigned char event, int val1, int val2, int val3, int val4, int val5){
    
    if(event==EVENT_BUTTON_PRESSED){
        // Write you code on [val1] button pressed here
        #if DRIVER_CONTROLS_TOTALBUTTONS > 3
            if(val1==BUTTON_BACK){
                startApp(-1);
            }
        #endif
        if(val1==BUTTON_POWER){
            startApp(-1);
        }
        
    }else if(event==EVENT_BUTTON_RELEASED){
        // Write you code on [val1] button released here
    }else if(event==EVENT_BUTTON_LONG_PRESS){
        // Write you code on [val1] button long press here
        if(val1==BUTTON_SELECT){

            #if DRIVER_CONTROLS_TOTALBUTTONS == 1
                startApp(-1);
            #elif DRIVER_CONTROLS_TOTALBUTTONS == 2
                startApp(-1);
            #else
            #endif
        }
    }else if(event==EVENT_ON_TIME_CHANGED){
    }else if(event==EVENT_ON_GOING_TO_SLEEP){
    }else if(event==EVENT_ON_WAKE_UP){
    }else if(event==EVENT_BUTTON_DOUBLE_PRESS){
        #if (DRIVER_CONTROLS_TOTALBUTTONS == 1)
            if(val1==BUTTON_SELECT){
                startApp(-1);
            }
        #else
        #endif
    }
    
}

const unsigned char appNameClass::icon[] PROGMEM = {
    
    #ifdef USE_L_MENU_IMAGES
    #elif defined(USE_XL_MENU_IMAGES)
        #ifdef COLOR_GRAY_16
            0x02,0x01,0x02,0x50,0x02,0x50,0x04,0x7E,0x7E,0x7E,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x20,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x21,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x48,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x20,0x00,0x00,0x20,0x00,0x00,0x00,0x04,0x00,0x00,0x20,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x04,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x28,0x20,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x80,0x00,0x20,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x20,0x00,0x40,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x40,0x04,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x80,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x08,0x01,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x82,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x04,0x3E,0x3E,0x3E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x02,0x20,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x10,0x00,0x80,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x20,0x00,0x00,0x10,0x00,0x00,0x00,0x02,0x00,0x01,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x08,0x16,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x02,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x10,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x92,0x40,0x20,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x48,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x40,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x40,0x08,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x80,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x29,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x20,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x03,0xFF,0xFF,0xFF,0xFF,0xFC,0x1F,0xFF,0xFF,0xC0,0x03,0xFF,0xFF,0xFF,0xFF,0xF0,0x3F,0xFF,0xFF,0xC0,0x07,0xFF,0xFF,0xFF,0xFF,0xE0,0x7F,0xFF,0xFF,0xE0,0x07,0xFF,0xFF,0xFF,0xE3,0xC0,0x7F,0xBF,0xFF,0xE0,0x0F,0xFF,0xFF,0xFF,0xE2,0xC0,0xFF,0x1F,0xFF,0xF0,0x0F,0xFF,0xFF,0xFF,0xE4,0x31,0xFE,0x1F,0xFF,0xF0,0x1F,0xFF,0xFF,0xFF,0xE4,0x09,0xFE,0x1F,0xFF,0xF8,0x1F,0xFF,0xFF,0xFF,0xF8,0x03,0xFC,0x1F,0xFF,0xF8,0x1F,0xFF,0xFF,0xFF,0xF8,0x00,0xFC,0x1F,0xFF,0xF8,0x3F,0xFF,0xFF,0xFF,0xF8,0x20,0x38,0x1F,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xF8,0x78,0x00,0x1F,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xF8,0x4E,0x00,0x1F,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xF8,0x49,0x80,0x1F,0xFF,0xFC,0x7F,0xFF,0xFF,0xFF,0xF8,0x32,0x40,0x3F,0xFF,0xFE,0x7F,0xFF,0xFF,0xFF,0xF0,0x0E,0x40,0x3F,0xFF,0xFE,0x7F,0xFF,0xFF,0xFF,0xF0,0x02,0x80,0x3F,0xFF,0xFE,0x7F,0xFF,0xFF,0xFF,0xF0,0x00,0x80,0x7F,0xFF,0xFE,0x7F,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0xFF,0xE0,0x00,0x03,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0xFF,0xC0,0x00,0x1F,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0xFF,0x80,0x01,0xFF,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0xFF,0x00,0x0F,0xFF,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0xFE,0x00,0x3F,0xFF,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0xFC,0x00,0xFF,0xFF,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0xF8,0x01,0xFF,0xFF,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0xF0,0x03,0xFF,0xFF,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0xC0,0x07,0xFF,0xFF,0xFF,0xFF,0xFE,0x3F,0xFF,0xFF,0x80,0x07,0xFF,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFE,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFC,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFC,0x1F,0xFF,0xF8,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xF8,0x1F,0xFF,0xF0,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x1F,0xFF,0xE3,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x0F,0xFF,0xC4,0x83,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x0F,0xFF,0xC8,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x07,0xFF,0xC8,0x8F,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x07,0xFF,0xE7,0x9F,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x03,0xFF,0xE0,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x03,0xFF,0xF0,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        #else
            0x02,0x01,0x02,0x50,0x02,0x50,0x04,0x00,0x33,0x00,0x00,0x00,0x00,0x00,0x70,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x0E,0x00,0x00,0x00,0x00,0x04,0x00,0x66,0x00,0x00,0x00,0x00,0x00,0x0F,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x07,0xFF,0xFF,0xFF,0xFF,0xFC,0x1F,0xFF,0xFF,0xE0,0x07,0xFF,0xFF,0xFF,0xFF,0xF0,0x3F,0xFF,0xFF,0xE0,0x0F,0xFF,0xFF,0xFF,0xFF,0xE0,0x7F,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0xFF,0xE3,0xC0,0x7F,0xBF,0xFF,0xF0,0x1F,0xFF,0xFF,0xFF,0xE2,0xC0,0xFF,0x1F,0xFF,0xF8,0x1F,0xFF,0xFF,0xFF,0xE0,0x30,0xFE,0x1F,0xFF,0xF8,0x1F,0xFF,0xFF,0xFF,0xE4,0x09,0xFE,0x1F,0xFF,0xF8,0x3F,0xFF,0xFF,0xFF,0xF8,0x03,0xFC,0x1F,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xF8,0x00,0xFC,0x1F,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xF8,0x20,0x38,0x1F,0xFF,0xFC,0x7F,0xFF,0xFF,0xFF,0xF8,0x08,0x00,0x1F,0xFF,0xFE,0x7F,0xFF,0xFF,0xFF,0xF8,0x4E,0x00,0x1F,0xFF,0xFE,0x7F,0xFF,0xFF,0xFF,0xF8,0x41,0x80,0x1F,0xFF,0xFE,0x7F,0xFF,0xFF,0xFF,0xF8,0x32,0x40,0x1F,0xFF,0xFE,0x7F,0xFF,0xFF,0xFF,0xF0,0x0E,0x40,0x3F,0xFF,0xFE,0x7F,0xFF,0xFF,0xFF,0xF0,0x02,0x00,0x3F,0xFF,0xFE,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x80,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x7F,0xFF,0xFF,0xF8,0x01,0xFF,0xFF,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0xE0,0x03,0xFF,0xFF,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0xC0,0x03,0xFF,0xFF,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0x80,0x07,0xFF,0xFF,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xFE,0x7F,0xFF,0xFE,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xFE,0x3F,0xFF,0xFC,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xF8,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xF0,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x1F,0xFF,0xE3,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x1F,0xFF,0xC0,0x83,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x1F,0xFF,0xC8,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x0F,0xFF,0xC0,0x8F,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x0F,0xFF,0xC7,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x07,0xFF,0xE0,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x07,0xFF,0xF0,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xF0,0x00,0x00,0x00,0x00,0x04,0x55,0x99,0x55,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x12,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x02,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x24,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x1F,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x19,0x86,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xE0,0x01,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xF8,0x01,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFE,0x03,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x8F,0x83,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x83,0xC7,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xB0,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x24,0x3F,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x84,0x9F,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xE1,0xBF,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xF8,0x3F,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xFE,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x7C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x17,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x99,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x74,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x98,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x80,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x90,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x2A,0x99,0x2A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x55,0xCC,0x55,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x28,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x80,0xCC,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        #endif
    #else
        // small image
        /*            PUT YOUR ICON HERE            */
        0x02,0x01,0x02,0x20,0x02,0x20,0x04,0x6f,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x1E,0x00,
        0x00,0x00,0x7E,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x78,
        0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x04,0xFF,0xFF,0xFF,0x1F,0xFF,0xFF,0xF8,0x3F,0xFF,0xFF,0xFC,0x7F,0xFF,0xFF,0xFE,0xFF,0xFE,0x7F,0xFF,0xFF,0xF9,0x9F,0xFF,
        0xFF,0xE7,0xE7,0xFF,0xFF,0x9F,0xF9,0xFF,0xFF,0x7F,0xFE,0xFF,0xFF,0x1F,0xF8,0xFF,0xFF,0x67,0xE0,0xFF,0xFF,0x79,0x80,0xFF,0xFF,0x7E,0x00,
        0xFF,0xFF,0x7F,0x00,0xFF,0xFF,0x7F,0x00,0xFF,0xFF,0x7F,0x00,0xFF,0xFF,0x7F,0x00,0xFF,0xFF,0x7F,0x00,0xFF,0xFF,0x9F,0x01,0xFF,0xFF,0xE7,
        0x07,0xFF,0xFF,0xF9,0x1F,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xDF,0x7F,0xFF,0xFF,0xDF,0xFF,0xFF,0xFF,
        0xC7,0x6B,0xFF,0xFF,0xDB,0x65,0xFF,0xFF,0xDB,0x6D,0xFF,0xFF,0xC7,0x6D,0xFF,0x7F,0xFF,0xFF,0xFE,0x3F,0xFF,0xFF,0xFC,0x1F,0xFF,0xFF,0xF8,
        0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x06,0x60,0x00,0x00,0x18,0x18,
        0x00,0x00,0x60,0x06,0x00,0x00,0x80,0x01,0x00,0x00,0xE0,0x07,0x00,0x00,0x98,0x19,0x00,0x00,0x86,0x61,0x00,0x00,0x81,0x81,0x00,0x00,0x80,
        0x81,0x00,0x00,0x80,0x81,0x00,0x00,0x80,0x81,0x00,0x00,0x80,0x81,0x00,0x00,0x80,0x81,0x00,0x00,0x60,0x86,0x00,0x00,0x18,0x98,0x00,0x00,
        0x06,0xE0,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x80,0x00,0x00,0x20,0x00,0x00,0x00,0x38,0x94,0x00,
        0x00,0x24,0x9A,0x00,0x00,0x24,0x92,0x00,0x00,0x38,0x92,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    #endif
    
	
};

#define appNameClass    BarometerApp          // App name without spaces
#define appName         "Barometer"              // App name with spaces 

class appNameClass: public Application{
    public:
        virtual void onLoop() override;
        virtual void onDestroy() override;
        virtual void onEvent(unsigned char event, int val1, int val2, int val3, int val4, int val5) override;

        void onCreate();
        appNameClass(){ fillScreen(0, 0, 0); super_onCreate(); onCreate(); };
        static unsigned const char* getParams(const unsigned char type){
            switch(type){ 
              case PARAM_TYPE_NAME: return (unsigned char*)appName; 
              case PARAM_TYPE_ICON: return icon;
              default: return (unsigned char*)""; }
        };
        const static unsigned char icon[] PROGMEM;
      
};

void appNameClass::onCreate(){
    /*
        Write you code onCreate here
    */
    setDrawColor(255, 255, 255);
    drawString(appName, 5, STYLE_STATUSBAR_HEIGHT + 10, 2);
}

void appNameClass::onLoop(){
    /*
        Write you code onLoop here
    */
}

void appNameClass::onDestroy(){
    /*
        Write you code onDestroy here
    */
}

void appNameClass::onEvent(unsigned char event, int val1, int val2, int val3, int val4, int val5){
    
    if(event==EVENT_BUTTON_PRESSED){
        // Write you code on [val1] button pressed here
        if(val1==BUTTON_BACK){
            startApp(-1);
        }
    }else if(event==EVENT_BUTTON_RELEASED){
        // Write you code on [val1] button released here
    }else if(event==EVENT_BUTTON_LONG_PRESS){
        // Write you code on [val1] button long press here
    }else if(event==EVENT_ON_TIME_CHANGED){
        // Write you code on system time changed
    }
    
}

const unsigned char appNameClass::icon[] PROGMEM = {
    
	/*            PUT YOUR ICON HERE            */
    0x02,0x01,0x02,0x20,0x02,0x20,0x04,0xff,0xd9,0x00,0x00,0x00,0x81,0x00,0x00,0x00,0x82,0x01,0x00,0x00,0x82,0x02,0x00,0x00,0x84,0x04,
    0x00,0x07,0xE4,0x08,0x00,0x1F,0xF8,0x10,0x00,0x7F,0xFE,0x20,0x00,0xFF,0xFF,0x40,0x01,0xC1,0xFF,0x81,0x03,0x00,0xFF,0xC6,0x02,0x00,
    0xFF,0xD8,0x04,0x00,0xFF,0xE0,0x04,0x00,0xFF,0xE0,0x00,0x00,0xFF,0xF0,0x00,0x00,0xFF,0xF0,0x00,0x00,0xFF,0xF0,0x00,0x00,0xFF,0xFF,
    0x00,0x00,0xFF,0xF0,0x00,0x00,0xFF,0xF0,0x00,0x00,0xFF,0xE0,0x00,0x00,0xFF,0xE0,0x00,0x00,0xFF,0xD8,0x00,0x00,0xFF,0xC6,0x00,0x00,
    0xFF,0x81,0x00,0x00,0xFF,0x40,0x00,0x00,0xFE,0x20,0x00,0x00,0xFC,0x10,0x00,0x00,0xE4,0x08,0x00,0x00,0x82,0x04,0x00,0x00,0x82,0x02,
    0x00,0x00,0x81,0x01,0x00,0x00,0x81,0x00,0x04,0x00,0x66,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x40,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x44,0x00,0x00,0x00,0x88,0x00,0x00,0x00,0x11,0x11,
    0x00,0x00,0x22,0x22,0x00,0x00,0x44,0x44,0x00,0x00,0x04,0xd8,0xd8,0xd8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,
    0x00,0x00,0x00,0xFF,0x00,0x00,0x01,0xFF,0x00,0x00,0x01,0xFF,0x00,0x00,0x03,0xFF,0x00,0x00,0x03,0xFF,0x00,0x00,0x03,0xFF,0x00,0x00,
    0x0D,0xFF,0x00,0x00,0x3F,0xFF,0x00,0x00,0x7F,0xFF,0x00,0x00,0x7F,0xFF,0x00,0x00,0x7F,0xFF,0x00,0x00,0x7F,0xFF,0x00,0x00,0x37,0xFF,
    0x00,0x00,0x07,0xFF,0x00,0x00,0x07,0xFF,0x00,0x00,0x07,0xFF,0x00,0x00,0x03,0xFF,0x00,0x00,0x00,0xF3,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x8f,0x8f,0x8f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x00,0x00,
    0x00,0xC1,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x0C,0x00,
    0x00,0x00,0x32,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x80,0x00,0x00,0x00,
    0x48,0x00,0x00,0x00,0x38,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x03,0x0C,0x00,0x00,0x00,0xF3,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};


#define appNameClass    ClockApp          // App name without spaces
#define appName         "Clock"              // App name with spaces 

#define APP_CLOCK_BIG_SCREEN_CIRCLE_RING_OFFSET 20
#define APP_CLOCK_CIRCLE_COLOR 48
#define APP_CLOCK_BIG_SCREEN_FADE_SIZE 23 // temporary not used

class appNameClass: public Application{
    public:
        bool isfullScreen         = true;
        virtual void onLoop() override;
        virtual void onDestroy() override;
        virtual void onEvent(unsigned char event, int val1, int val2, int val3, int val4, int val5) override;

        void onCreate();
        appNameClass(){ 
            fillScreen(0, 0, 0); 
            this->showStatusBar = false;
            super_onCreate(); 
            onCreate(); 
        };
        static unsigned const char* getParams(const unsigned char type){
            switch(type){ 
              case PARAM_TYPE_NAME: return (unsigned char*)appName; 
              case PARAM_TYPE_ICON: return icon;
              default: return (unsigned char*)""; }
        };
        const static unsigned char icon[] PROGMEM;

        void draw_current_time(bool draw);
        String timeString;

        unsigned char last_seconds  = 0;
        String last_hours           = "";
        String last_minutes         = "";

        String last_date            = "";
        String sleep_time           = "";

        #ifdef BATTERY_ENABLE
            unsigned char last_battery  = 0;
            bool last_battery_charging  = "";
        #endif

        #if defined(PEDOMETER_ENABLE) || defined(PEDOMETER_EMULATOR)
            unsigned int last_pedometer   = 0;
        #endif

        void drawSecondsCircle(bool draw, unsigned char second);
        #if defined(PEDOMETER_ENABLE) || defined(PEDOMETER_EMULATOR)
            void drawStepsCircle(bool draw);
        #endif
      
};

#define BATTERY_LABEL_Y_POSITION (STYLE_STATUSBAR_HEIGHT/2 + 2)

#ifdef NARROW_SCREEN
    // For small screens as sport wristbands
    #define SECONDS_CIRCLE_X        (SCREEN_WIDTH/2)
    #define SECONDS_CIRCLE_Y        (SCREEN_HEIGHT/2 - 20)
    #define SECONDS_CIRCLE_RADIUS   (SCREEN_WIDTH/2-2)
#else
    // Big screens as 240x240 
    #define SECONDS_CIRCLE_X        (SCREEN_WIDTH/2)
    #define SECONDS_CIRCLE_Y        (SCREEN_HEIGHT/2)
    #define SECONDS_CIRCLE_RADIUS   (SCREEN_WIDTH/2-30)
#endif 


#if defined(PEDOMETER_ENABLE) || defined(PEDOMETER_EMULATOR)
    void appNameClass::drawStepsCircle(bool draw){
        if(draw){
            
            //#ifdef PEDOMETER_EMULATOR
            //    int grad_i = 260;
            //#else
            int grad_i;
            if(get_pedometer_days_steps_min_limit()!=0) grad_i = (long)360 * (long)get_pedometer_days_steps() / (long)get_pedometer_days_steps_min_limit();
            else grad_i = 0;
            //#endif

            if(grad_i>360) grad_i = 360;
            for(int grad=0; grad<=grad_i; grad++){
                
                setGradientColor(46, 255, 0, 255, 85, 0, 360, grad);
                drawArc(SECONDS_CIRCLE_X, SECONDS_CIRCLE_Y, SECONDS_CIRCLE_RADIUS-4, -90 + grad, -90 + grad + 2, 8, true);
            }
        }else{
            setDrawColor_BackGroundColor();
            int grad = 360;
            drawArc(SECONDS_CIRCLE_X, SECONDS_CIRCLE_Y, SECONDS_CIRCLE_RADIUS-4, -90 + 0, -90 + grad + 8, 8, true);
        }
    }
#endif

void appNameClass::onCreate(){

    DRAW_LIMITS_setEnable(true);
    DRAW_LIMIT_reset();
    
    setBackgroundColor(0,0,0);
    setContrastColor(255, 255, 255);

    setDrawColor(APP_CLOCK_CIRCLE_COLOR, APP_CLOCK_CIRCLE_COLOR, APP_CLOCK_CIRCLE_COLOR);
    #ifdef NARROW_SCREEN
        // For small screens as sport wristbands
        drawCircle(SECONDS_CIRCLE_X, SECONDS_CIRCLE_Y, SECONDS_CIRCLE_RADIUS-2, true);
    #else
        // Big screens as 240x240 
        drawCircle(SECONDS_CIRCLE_X, SECONDS_CIRCLE_Y, SECONDS_CIRCLE_RADIUS-2, true);

        /*
        for(unsigned char i=0; i<APP_CLOCK_BIG_SCREEN_FADE_SIZE; i++){
            unsigned char fade_color = (int)APP_CLOCK_CIRCLE_COLOR*(APP_CLOCK_BIG_SCREEN_FADE_SIZE-i)/APP_CLOCK_BIG_SCREEN_FADE_SIZE;
            //debug(String(fade_color));
            setDrawColor(fade_color, fade_color, fade_color);
            drawCircle(SECONDS_CIRCLE_X, SECONDS_CIRCLE_Y, SECONDS_CIRCLE_RADIUS-APP_CLOCK_BIG_SCREEN_CIRCLE_RING_OFFSET - i, true);    
        }*/

        setDrawColor(0, 0, 0);
        drawCircle(SECONDS_CIRCLE_X, SECONDS_CIRCLE_Y, SECONDS_CIRCLE_RADIUS-APP_CLOCK_BIG_SCREEN_CIRCLE_RING_OFFSET, true);
    #endif 
    

    this->last_seconds = core_time_getSeconds_byte();
    for(unsigned char isecond=0; isecond<=this->last_seconds; isecond++) this->drawSecondsCircle(true, isecond);
    this->draw_current_time(true);

    #if defined(PEDOMETER_ENABLE) || defined(PEDOMETER_EMULATOR)
        this->drawStepsCircle(true);
    #endif

    this->sleep_device_after = get_core_display_time_delay_to_poweroff_clock_app();

}

void appNameClass::onLoop(){
    /*
        Write you code onLoop here
    */
}

void appNameClass::onDestroy(){
    /*
        Write you code onDestroy here
    */
}

void appNameClass::onEvent(unsigned char event, int val1, int val2, int val3, int val4, int val5){
    #ifdef TOUCH_SCREEN_ENABLE
        if(event==EVENT_ON_TOUCH_QUICK_SWIPE_TO_TOP){
            startApp(-1);
        }else if(event==EVENT_ON_TOUCH_QUICK_SWIPE_TO_BOTTOM){
            startApp(-1);
        }
    #endif
    
    if(event==EVENT_BUTTON_PRESSED){
        // Write you code on [val1] button pressed here
        #if DRIVER_CONTROLS_TOTALBUTTONS > 3
            if(val1==BUTTON_BACK){
                startApp(-1);
            }
        #else 
            if(val1==BUTTON_POWER){
                startApp(-1);
            }    
        #endif
        
    }else if(event==EVENT_BUTTON_RELEASED){
        // Write you code on [val1] button released here
    }else if(event==EVENT_BUTTON_LONG_PRESS){
        // Write you code on [val1] button long press here
        if(val1==BUTTON_SELECT){

            #if DRIVER_CONTROLS_TOTALBUTTONS == 1
                startApp(-1);
            #elif DRIVER_CONTROLS_TOTALBUTTONS == 2
                startApp(-1);
            #else
            #endif
        }
    }else if(event==EVENT_ON_TIME_CHANGED){
        // Write you code on system time changed
        this->draw_current_time(false);
        this->draw_current_time(true);
    }else if(event==EVENT_ON_GOING_TO_SLEEP){
        this->draw_current_time(false);
    }else if(event==EVENT_ON_WAKE_UP){
        //this->draw_current_time(true);
        fillScreen(0, 0, 0); 
        this->onCreate();
    }else if(event==EVENT_BUTTON_DOUBLE_PRESS){
        if(val1==BUTTON_SELECT){
            startApp(-1);
        }
    }
    
}

void appNameClass::drawSecondsCircle(bool draw, unsigned char second){
    if(draw) setDrawColor(0, 0, 255);
    else setDrawColor_BackGroundColor();

    int grad = 6*second;
 
    drawArc(SECONDS_CIRCLE_X, SECONDS_CIRCLE_Y, SECONDS_CIRCLE_RADIUS, -90 + grad, -90 + grad + 6, 4, true);
}

void appNameClass::draw_current_time(bool draw){
    #ifdef NARROW_SCREEN
        // For small screens as sport wristbands
        #define CLOCK_FONT        2
        #define CLOCK_MARGIN      3
        #define STRINGS_OFFSET_Y  2
    #else
        // Big screens as 240x240 
        #define CLOCK_FONT        4
        #define CLOCK_MARGIN      3
        #define STRINGS_OFFSET_Y  (-10)
    #endif 

    //this->preventSleep         = true;
    //this->preventInAppSleep    = true;

    // Draw
    if(draw){
        // SECONDS CIRCLE
        this->timeString = core_time_getHourMinuteSecondsTime();
        unsigned char seconds_draw;
        if(core_time_getSeconds_byte()>this->last_seconds) seconds_draw = core_time_getSeconds_byte() - this->last_seconds;
        else seconds_draw = 1;
        
        this->last_seconds = core_time_getSeconds_byte();
        for(char i_predrawSeconds=0; i_predrawSeconds<seconds_draw; i_predrawSeconds++){
            this->drawSecondsCircle(draw, this->last_seconds-i_predrawSeconds);
        }

        setDrawColor_ContrastColor();

        this->last_hours    = core_time_getHours_String();
        this->last_minutes  = core_time_getMinutes_String();

        drawString_centered(core_time_getHours_String(), SCREEN_WIDTH/2, STRINGS_OFFSET_Y + SECONDS_CIRCLE_Y-CLOCK_FONT*FONT_CHAR_HEIGHT - CLOCK_MARGIN, CLOCK_FONT);
        setDrawColor(0, 168, 0);
        drawString_centered(core_time_getMinutes_String(), SCREEN_WIDTH/2, STRINGS_OFFSET_Y + SECONDS_CIRCLE_Y + CLOCK_MARGIN, CLOCK_FONT);
        
        setDrawColor_ContrastColor();
        #ifdef NARROW_SCREEN
            // For small screens as sport wristbands
        #else
            // Big screens as 240x240 
            drawString_centered(core_time_getWeekDay_string(), SCREEN_WIDTH/2, STRINGS_OFFSET_Y + SECONDS_CIRCLE_Y + CLOCK_MARGIN + 35, FONT_SIZE_DEFAULT);
        #endif 
    }else{
        if(this->last_seconds>core_time_getSeconds_byte()){
            // if munutes changed, clearing secongs circle
            setDrawColor_BackGroundColor();  
            for(int isecond=0; isecond<60; isecond++){
                drawSecondsCircle(draw, isecond);
            }

            setDrawColor(APP_CLOCK_CIRCLE_COLOR, APP_CLOCK_CIRCLE_COLOR, APP_CLOCK_CIRCLE_COLOR);
            #ifdef NARROW_SCREEN
                // For small screens as sport wristbands
                drawCircle(SECONDS_CIRCLE_X, SECONDS_CIRCLE_Y, SECONDS_CIRCLE_RADIUS-2, true);
            #else
                // Big screens as 240x240 
                drawCircle(SECONDS_CIRCLE_X, SECONDS_CIRCLE_Y, SECONDS_CIRCLE_RADIUS-2, true);

                /*
                for(unsigned char i=0; i<APP_CLOCK_BIG_SCREEN_FADE_SIZE; i++){
                    unsigned char fade_color = (int)APP_CLOCK_CIRCLE_COLOR*(APP_CLOCK_BIG_SCREEN_FADE_SIZE-i)/APP_CLOCK_BIG_SCREEN_FADE_SIZE;
                    //debug(String(fade_color));
                    setDrawColor(fade_color, fade_color, fade_color);
                    drawCircle(SECONDS_CIRCLE_X, SECONDS_CIRCLE_Y, SECONDS_CIRCLE_RADIUS-APP_CLOCK_BIG_SCREEN_CIRCLE_RING_OFFSET - i, true);    
                }*/

                setDrawColor(0, 0, 0);
                drawCircle(SECONDS_CIRCLE_X, SECONDS_CIRCLE_Y, SECONDS_CIRCLE_RADIUS-APP_CLOCK_BIG_SCREEN_CIRCLE_RING_OFFSET, true);
            #endif 
            
            clearString_centered(last_hours, SCREEN_WIDTH/2, STRINGS_OFFSET_Y + SECONDS_CIRCLE_Y-CLOCK_FONT*FONT_CHAR_HEIGHT - CLOCK_MARGIN, CLOCK_FONT);
            clearString_centered(last_minutes, SCREEN_WIDTH/2, STRINGS_OFFSET_Y + SECONDS_CIRCLE_Y + CLOCK_MARGIN, CLOCK_FONT);

            #ifdef NARROW_SCREEN
                // For small screens as sport wristbands
            #else
                // Big screens as 240x240 
                clearString_centered(core_time_getWeekDay_string(), SCREEN_WIDTH/2, STRINGS_OFFSET_Y + SECONDS_CIRCLE_Y + CLOCK_MARGIN + 35, FONT_SIZE_DEFAULT);
            #endif 

            #if defined(PEDOMETER_ENABLE) || defined(PEDOMETER_EMULATOR)
                this->drawStepsCircle(true);
            #endif
        }

    }

    // BATTERY
    #ifdef BATTERY_ENABLE
        
        if(draw){        
            last_battery            = driver_battery_getPercent();
            last_battery_charging   = driver_battery_isCharging();
        }

        String battery_percent_toPrint = String(last_battery) + "%";

        #ifdef NARROW_SCREEN
            // For small screens as sport wristbands
            #define APP_CLOCK_ICON_X (SCREEN_WIDTH/2 + -1)
            #define APP_CLOCK_ICON_Y (BATTERY_LABEL_Y_POSITION - 10)
            #define APPP_CLOCK_BATTERY_LABEL_X (SCREEN_WIDTH/2 - battery_percent_toPrint.length()*FONT_CHAR_WIDTH - 7)
            #define APPP_CLOCK_BATTERY_LABEL_Y ( BATTERY_LABEL_Y_POSITION - FONT_CHAR_HEIGHT/2 -2)
        #else
            // Big screens as 240x240 
            #define APP_CLOCK_ICON_X (SCREEN_WIDTH - 38)
            #define APP_CLOCK_ICON_Y (BATTERY_LABEL_Y_POSITION - 10)
            #define APPP_CLOCK_BATTERY_LABEL_X (SCREEN_WIDTH - battery_percent_toPrint.length()*FONT_CHAR_WIDTH*FONT_SIZE_DEFAULT - 44)
            #define APPP_CLOCK_BATTERY_LABEL_Y ( BATTERY_LABEL_Y_POSITION - FONT_CHAR_HEIGHT*FONT_SIZE_DEFAULT/2 )
        #endif 
            
            
        // (battery icon 32x16 px) 
        drawBatteryIcon(APP_CLOCK_ICON_X, APP_CLOCK_ICON_Y, last_battery, last_battery_charging, draw);
        
        if(draw){
            setDrawColor_ContrastColor();
            drawString(battery_percent_toPrint, APPP_CLOCK_BATTERY_LABEL_X, APPP_CLOCK_BATTERY_LABEL_Y, FONT_SIZE_DEFAULT);
        }else{
            setDrawColor_BackGroundColor();  
            clearString(battery_percent_toPrint, APPP_CLOCK_BATTERY_LABEL_X, APPP_CLOCK_BATTERY_LABEL_Y, FONT_SIZE_DEFAULT);
        }
        

    #endif        

    #ifdef NARROW_SCREEN
        // For small screens as sport wristbands
        // SLEEP LABEL
        #define SLEEP_LABEL_POSITION_Y (SCREEN_HEIGHT - 35)
        // DATE LABEL
        #define DATE_LABEL_POSITION_Y (SCREEN_HEIGHT - 54)
        #define DATE_LABEL_POSITION_X (SCREEN_WIDTH/2)
        #define DATE_DRAW_STRING(A,B,C,D) drawString_centered(A,B,C,D)
        #define DATE_CLEAR_STRING(A,B,C,D) clearString_centered(A,B,C,D)
        // PEDOMETER LABEL
        #define PEDOMETER_LABEL_POSITION_Y (SCREEN_HEIGHT - 14)
        #define PEDOMETER_LABEL_POSITION_X_OFFSET (0)
        #define PEDOMETER_LABEL_POSITION_PADDING (3)
    #else
        // Big screens as 240x240 
        
        // SLEEP LABEL
        #if FONT_SIZE_DEFAULT==2
            #define SLEEP_LABEL_POSITION_Y (SCREEN_HEIGHT - 17)  
        #else
            #define SLEEP_LABEL_POSITION_Y (SCREEN_HEIGHT - FONT_CHAR_HEIGHT*FONT_SIZE_DEFAULT/2 - 11)
        #endif
        
        // DATE LABEL
        #if FONT_SIZE_DEFAULT==2
            #define DATE_LABEL_POSITION_Y (STYLE_STATUSBAR_HEIGHT/2 - 6)    
        #else
            #define DATE_LABEL_POSITION_Y (((STYLE_STATUSBAR_HEIGHT/2 + 2) - FONT_CHAR_HEIGHT*FONT_SIZE_DEFAULT/2 -2))    
        #endif
        
        
        #define DATE_LABEL_POSITION_X (7)
        #define DATE_DRAW_STRING(A,B,C,D) drawString(A,B,C,D)
        #define DATE_CLEAR_STRING(A,B,C,D) clearString(A,B,C,D)

        // PEDOMETER LABEL
        #define PEDOMETER_LABEL_POSITION_Y (SCREEN_HEIGHT - 17)
        #if FONT_SIZE_DEFAULT == 1
            #define PEDOMETER_LABEL_POSITION_X_OFFSET (-5)
        #elif FONT_SIZE_DEFAULT == 2
            #define PEDOMETER_LABEL_POSITION_X_OFFSET (16)
        #else
            #define PEDOMETER_LABEL_POSITION_X_OFFSET (16)
        #endif
        
        #define PEDOMETER_LABEL_POSITION_PADDING (3)
    #endif 
    

    if(draw){
        #if SCREEN_WIDTH<=320 && FONT_SIZE_DEFAULT>=2
            this->last_date = core_time_getDateFull_short();
        #else
            this->last_date = core_time_getDateFull();
        #endif
        //this->last_date = core_time_getDateFull();
        setDrawColor(192,192,192);
        DATE_DRAW_STRING(this->last_date, DATE_LABEL_POSITION_X, DATE_LABEL_POSITION_Y, FONT_SIZE_DEFAULT);
    }else{
        setDrawColor_BackGroundColor();  
        DATE_CLEAR_STRING(this->last_date, DATE_LABEL_POSITION_X, DATE_LABEL_POSITION_Y, FONT_SIZE_DEFAULT);
    }

    #if defined(PEDOMETER_ENABLE) || defined(PEDOMETER_EMULATOR)
        
        if(draw){
            this->sleep_time = String(get_pedometer_days_sleep_hours());
            this->last_pedometer = get_pedometer_days_steps();
        }

        String pedometer_toPrint = String(this->last_pedometer);
        String sleep_toPrint = String(this->sleep_time) + "  ";

            
        // 16px - leg and sleep icon width
        int pedometer_label_width_05 = (PEDOMETER_LABEL_POSITION_PADDING*2 + 16 + pedometer_toPrint.length()*FONT_CHAR_WIDTH)*FONT_SIZE_DEFAULT/2;
        int sleep_label_width_05 = (PEDOMETER_LABEL_POSITION_PADDING*2 + 16 + sleep_toPrint.length()*FONT_CHAR_WIDTH)*FONT_SIZE_DEFAULT/2;

        #ifdef NARROW_SCREEN
            // For small screens as sport wristbands
            #define PEDOMETER_ICON_POSITION_X   (SCREEN_WIDTH/2 + pedometer_label_width_05 - 16 + PEDOMETER_LABEL_POSITION_X_OFFSET)
            #define PEDOMETER_ICON_POSITION_Y   (PEDOMETER_LABEL_POSITION_Y + PEDOMETER_LABEL_POSITION_PADDING - 9)
            #define SLEEP_ICON_POSITION_X       (SCREEN_WIDTH/2 + sleep_label_width_05 - 16 + PEDOMETER_LABEL_POSITION_X_OFFSET)
            #define SLEEP_ICON_POSITION_Y       (SLEEP_LABEL_POSITION_Y + PEDOMETER_LABEL_POSITION_PADDING - 9)
        #else
            // Big screens as 240x240 
            #define SLEEP_LABEL_POSITION_X_OFFSET   (14)
            #define PEDOMETER_ICON_POSITION_X       (SCREEN_WIDTH - 21)
            #define PEDOMETER_ICON_POSITION_Y       (SCREEN_HEIGHT - 19)
            #define SLEEP_ICON_POSITION_X           (5)
            #define SLEEP_ICON_POSITION_Y           (SCREEN_HEIGHT - 19)
        #endif 

        drawImage(draw, getIcon_legs_grey(), PEDOMETER_ICON_POSITION_X, PEDOMETER_ICON_POSITION_Y);
        drawImage(draw, getIcon_sleep_grey(), SLEEP_ICON_POSITION_X, SLEEP_ICON_POSITION_Y);

        #ifdef NARROW_SCREEN
            // For small screens as sport wristbands
            #define PEDOMETER_LABEL_X (SCREEN_WIDTH/2 - pedometer_label_width_05 + PEDOMETER_LABEL_POSITION_X_OFFSET)
            #define PEDOMETER_LABEL_Y (PEDOMETER_LABEL_POSITION_Y + 1)
            #define PEDOMETER_LABEL_SIZE (1)
            #define DRAW_PEDOMETER_LABEL(A,B,C,D) drawString(A,B,C,D)
            #define CLEAR_PEDOMETER_LABEL(A,B,C,D) clearString(A,B,C,D)

            #define SLEEP_LABEL_X (SCREEN_WIDTH/2)
            #define SLEEP_LABEL_Y (SLEEP_LABEL_POSITION_Y)
            #define SLEEP_LABEL_SIZE (1)
            #define DRAW_SLEEP_LABEL(A,B,C,D) drawString_centered(A,B,C,D)
            #define CLEAR_SLEEP_LABEL(A,B,C,D) clearString_centered(A,B,C,D)
        #else
            // Big screens as 240x240 
            #define PEDOMETER_LABEL_X (SCREEN_WIDTH - pedometer_label_width_05*2 + PEDOMETER_LABEL_POSITION_X_OFFSET)
            #define PEDOMETER_LABEL_Y (PEDOMETER_LABEL_POSITION_Y)
            #define PEDOMETER_LABEL_SIZE (FONT_SIZE_DEFAULT)
            #define DRAW_PEDOMETER_LABEL(A,B,C,D) drawString(A,B,C,D)
            #define CLEAR_PEDOMETER_LABEL(A,B,C,D) clearString(A,B,C,D)

            #define SLEEP_LABEL_X (30)
            #define SLEEP_LABEL_Y (SLEEP_LABEL_POSITION_Y)
            #define SLEEP_LABEL_SIZE (FONT_SIZE_DEFAULT)
            #define DRAW_SLEEP_LABEL(A,B,C,D) drawString(A,B,C,D)
            #define CLEAR_SLEEP_LABEL(A,B,C,D) clearString(A,B,C,D)
        #endif 

        if(draw){
            setDrawColor(192,192,192);
            // PEDOMETER
            DRAW_PEDOMETER_LABEL(pedometer_toPrint, PEDOMETER_LABEL_X, PEDOMETER_LABEL_Y, PEDOMETER_LABEL_SIZE);
            // SLEEP
            DRAW_SLEEP_LABEL(sleep_toPrint, SLEEP_LABEL_X, SLEEP_LABEL_Y, SLEEP_LABEL_SIZE);

        }else{
            setDrawColor_BackGroundColor();  
            // PEDOMETER
            CLEAR_PEDOMETER_LABEL(pedometer_toPrint, PEDOMETER_LABEL_X, PEDOMETER_LABEL_Y, PEDOMETER_LABEL_SIZE);
            // SLEEP
            CLEAR_SLEEP_LABEL(sleep_toPrint, SLEEP_LABEL_X, SLEEP_LABEL_Y, SLEEP_LABEL_SIZE);
        }
        
    #endif
        
}

const unsigned char appNameClass::icon[] PROGMEM = {
    
	/*            PUT YOUR ICON HERE            */
#ifdef USE_L_MENU_IMAGES
    0x02,0x01,0x02,0x28,0x02,0x28,0x04,0x00,0x66,0xff,0x00,0x00,0xFF,0x80,0x00,0x00,0x07,0xFF,0xF0,0x00,0x00,0x1F,0xFF,0xFC,0x00,0x00,0x7F,
    0xFF,0xFE,0x00,0x00,0xFF,0xFF,0xFF,0x00,0x01,0xFF,0xFF,0xFF,0x80,0x03,0xFF,0xE7,0xFF,0xC0,0x07,0xFF,0xE7,0xFF,0xE0,0x0F,0xFF,0xE7,0xFF,
    0xF0,0x1F,0xFF,0xE7,0xFF,0xF8,0x1F,0xFF,0xE7,0xFF,0xF8,0x3F,0xFF,0xE7,0xFF,0xFC,0x3F,0xFF,0xE7,0xFF,0xFC,0x3F,0xFF,0xE7,0xFF,0xFC,0x7F,
    0xFF,0xE7,0xFF,0xFE,0x7F,0xFF,0xE7,0xFF,0xFE,0x7F,0xFF,0xE7,0xFF,0xFE,0xFF,0xFF,0xE7,0xFF,0xFF,0xFF,0xFF,0xE7,0xFF,0xFF,0xFF,0xFF,0xC3,
    0xFF,0xFF,0xFF,0xFF,0xC3,0xFF,0xFF,0xFF,0xFF,0xE1,0xFF,0xFF,0xFF,0xFF,0xF8,0xFF,0xFF,0xFF,0xFF,0xFC,0x7F,0xFF,0x7F,0xFF,0xFE,0x3F,0xFE,
    0x7F,0xFF,0xFF,0x1F,0xFE,0x7F,0xFF,0xFF,0x9F,0xFE,0x3F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFC,0x1F,0xFF,0xFF,0xFF,0xF8,0x1F,0xFF,
    0xFF,0xFF,0xF8,0x0F,0xFF,0xFF,0xFF,0xF0,0x07,0xFF,0xFF,0xFF,0xE0,0x03,0xFF,0xFF,0xFF,0xC0,0x01,0xFF,0xFF,0xFF,0x80,0x00,0xFF,0xFF,0xFF,
    0x00,0x00,0x7F,0xFF,0xFC,0x00,0x00,0x1F,0xFF,0xF8,0x00,0x00,0x07,0xFF,0xC0,0x00,0x00,0x01,0xFF,0x00,0x00,0x04,0xff,0xff,0xff,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,
    0x00,0x18,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x18,
    0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00,0x1E,0x00,0x00,
    0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x03,0x80,0x00,0x00,0x00,0x01,0xC0,0x00,0x00,0x00,0x00,0xE0,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
#elif defined(USE_XL_MENU_IMAGES)
    /*
    #ifdef COLOR_GRAY_16
        
    #else
        
    #endif
    */
    #ifdef COLOR_GRAY_16
        0x02,0x01,0x02,0x50,0x02,0x50,0x04,0x7E,0x7E,0x7E,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x04,0x3E,0x3E,0x3E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x0F,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xF0,0x00,0x00,0x1F,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xF8,0x00,0x00,0x3F,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFC,0x00,0x00,0x3F,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFC,0x00,0x00,0x7F,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFE,0x00,0x00,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0x00,0x01,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0x80,0x01,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0x80,0x03,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xC0,0x03,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xC0,0x07,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xE0,0x07,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xE0,0x0F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xF0,0x1F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xF8,0x1F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xF8,0x1F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xF8,0x3F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFC,0x7F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0xFF,0xF8,0x3F,0xFF,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0xFF,0xF0,0x1F,0xFF,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0xFF,0xF0,0x07,0xFF,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0xFF,0xF8,0x07,0xFF,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0xFF,0xFC,0x03,0xFF,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0xFF,0xFF,0xC1,0xFF,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0xFF,0xFF,0xE0,0xFF,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0xFF,0xFF,0xF0,0x7F,0xFF,0xFF,0xFE,0x3F,0xFF,0xFF,0xFF,0xFF,0xF8,0x3F,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFF,0xFC,0x1F,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFF,0xFE,0x0F,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0x07,0xFF,0xFF,0xFC,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0x83,0xFF,0xFF,0xF8,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xC7,0xFF,0xFF,0xF8,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xEF,0xFF,0xFF,0xF8,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    #else
        0x02,0x01,0x02,0x50,0x02,0x50,0x04,0x00,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x7C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x70,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFE,0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x07,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xE0,0x00,0x00,0x0F,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xF0,0x00,0x00,0x1F,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xF8,0x00,0x00,0x3F,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFC,0x00,0x00,0x7F,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFC,0x00,0x00,0x7F,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFE,0x00,0x00,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0x00,0x01,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0x00,0x01,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0x80,0x03,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xC0,0x03,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xC0,0x07,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xE0,0x07,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xE0,0x0F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xF0,0x1F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xF8,0x1F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xF8,0x3F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xF8,0x3F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xF8,0x1F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xF0,0x1F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xF8,0x0F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xF8,0x07,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFF,0x83,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFF,0xC1,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFF,0xE0,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFF,0xF0,0x7F,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFF,0xF8,0x3F,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFF,0xFC,0x1F,0xFF,0xFF,0xF8,0x1F,0xFF,0xFF,0xFF,0xFF,0xFE,0x0F,0xFF,0xFF,0xF8,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0x07,0xFF,0xFF,0xF8,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0x83,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xC7,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xEF,0xFF,0xFF,0xF0,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x70,0x70,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    #endif
    
#else
    0x02,0x01,0x02,0x20,0x02,0x20,0x04,0x00,0x66,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xF0,0x00,0x00,0x3F,0xFC,0x00,0x00,
    0xFF,0xFF,0x00,0x01,0xFF,0xFF,0x80,0x03,0xFF,0xFF,0xC0,0x07,0xFF,0xFF,0xE0,0x0F,0xFF,0xFF,0xF0,0x1F,0xFF,0xFF,0xE0,0x19,0xFF,0xFF,0x80,
    0x18,0x7F,0xFE,0x00,0x3E,0x1F,0xF8,0x1C,0x3F,0x87,0xE0,0x7C,0x3F,0xE1,0x81,0xFC,0x3F,0xF8,0x07,0xFC,0x3F,0xFE,0x1F,0xFC,0x3F,0xFE,0x7F,
    0xFC,0x3F,0xFE,0x7F,0xFC,0x3F,0xFE,0x7F,0xFC,0x1F,0xFE,0x7F,0xF8,0x1F,0xFE,0x7F,0xF8,0x0F,0xFE,0x7F,0xF0,0x0F,0xFE,0x7F,0xF0,0x07,0xFE,
    0x7F,0xE0,0x03,0xFE,0x7F,0xC0,0x01,0xFE,0x7F,0x80,0x00,0xFE,0x7F,0x00,0x00,0x3E,0x7C,0x00,0x00,0x0E,0x70,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x04,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x1C,0x06,0x00,0x00,0x78,0x07,0x80,0x01,
    0xE0,0x01,0xE0,0x07,0x80,0x00,0x78,0x1E,0x00,0x00,0x1E,0x78,0x00,0x00,0x07,0xE0,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x04,0xb4,0xb4,0xb4,0x00,0x0F,0xF0,0x00,0x00,0x7F,0xFE,0x00,0x01,0xF0,0x0F,0x80,0x03,0xC0,0x03,0xC0,0x07,0x00,0x00,0xE0,0x0E,0x00,0x00,
    0x70,0x1C,0x00,0x00,0x38,0x38,0x00,0x00,0x1C,0x30,0x00,0x00,0x08,0x60,0x00,0x00,0x02,0x60,0x00,0x00,0x06,0x60,0x00,0x00,0x06,0xC0,0x00,
    0x00,0x03,0xC0,0x00,0x00,0x03,0xC0,0x00,0x00,0x03,0xC0,0x00,0x00,0x03,0xC0,0x00,0x00,0x03,0xC0,0x00,0x00,0x03,0xC0,0x00,0x00,0x03,0xC0,
    0x00,0x00,0x03,0x60,0x00,0x00,0x06,0x60,0x00,0x00,0x06,0x70,0x00,0x00,0x0E,0x30,0x00,0x00,0x0C,0x38,0x00,0x00,0x1C,0x1C,0x00,0x00,0x38,
    0x0E,0x00,0x00,0x70,0x07,0x00,0x00,0xE0,0x03,0xC0,0x03,0xC0,0x01,0xF0,0x0F,0x80,0x00,0x7E,0x7E,0x00,0x00,0x0E,0x70,0x00,0x04,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x60,0x00,
    0x00,0x01,0x80,0x00,0x00,0x06,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x60,0x00,0x00,0x01,0x80,0x00,0x00,0x01,0x80,0x00,0x00,0x01,0x80,0x00,
    0x00,0x01,0x80,0x00,0x00,0x01,0x80,0x00,0x00,0x01,0x80,0x00,0x00,0x01,0x80,0x00,0x00,0x01,0x80,0x00,0x00,0x01,0x80,0x00,0x00,0x01,0x80,
    0x00,0x00,0x01,0x80,0x00,0x00,0x01,0x80,0x00,0x00,0x01,0x80,0x00,0x00,0x01,0x80,0x00,0x00,0x01,0x80,0x00,
#endif
   
};


#define appNameClass    FileManagerApp          // App name without spaces
#define appName         "Files"              // App name with spaces 

class appNameClass: public Application{
    public:
        virtual void onLoop() override;
        virtual void onDestroy() override;
        virtual void onEvent(unsigned char event, int val1, int val2, int val3, int val4, int val5) override;

        void onCreate();
        appNameClass(){ fillScreen(0, 0, 0); super_onCreate(); onCreate(); };
        static unsigned const char* getParams(const unsigned char type){
            switch(type){ 
              case PARAM_TYPE_NAME: return (unsigned char*)appName; 
              case PARAM_TYPE_ICON: return icon;
              default: return (unsigned char*)""; }
        };
        const static unsigned char icon[] PROGMEM;
      
};

void appNameClass::onCreate(){
    /*
        Write you code onCreate here
    */
    setDrawColor(255, 255, 255);
    drawString(appName, 5, STYLE_STATUSBAR_HEIGHT + 10, 2);
}

void appNameClass::onLoop(){
    /*
        Write you code onLoop here
    */
}

void appNameClass::onDestroy(){
    /*
        Write you code onDestroy here
    */
}

void appNameClass::onEvent(unsigned char event, int val1, int val2, int val3, int val4, int val5){
    
    if(event==EVENT_BUTTON_PRESSED){
        // Write you code on [val1] button pressed here
        if(val1==BUTTON_BACK){
            startApp(-1);
        }
    }else if(event==EVENT_BUTTON_RELEASED){
        // Write you code on [val1] button released here
    }else if(event==EVENT_BUTTON_LONG_PRESS){
        // Write you code on [val1] button long press here
    }else if(event==EVENT_ON_TIME_CHANGED){
        // Write you code on system time changed
    }
    
}

const unsigned char appNameClass::icon[] PROGMEM = {

    /*
    #ifdef COLOR_GRAY_16
        
    #else
        
    #endif
    */

    #ifdef USE_L_MENU_IMAGES
        0x02,0x01,0x02,0x20,0x02,0x20,0x04,0xff,0xd9,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xF8,0x00,0x00,0x00,0x0C,0x00,0x00,0x00,0x06,0x00,0x00,
        0x00,0x03,0xFF,0xFE,0x1F,0xE0,0x00,0x06,0x3F,0xF0,0x00,0x02,0x7F,0xF8,0x00,0x02,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,
        0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,
        0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE0,0x7F,0xFF,
        0xFF,0xE0,0x7F,0xFF,0xFF,0xE0,0x7F,0xFF,0xFF,0xE0,0x7F,0xFF,0xFF,0xE0,0x00,0x00,0x00,0x00,0x04,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xF0,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x0C,0x00,0x00,0x00,0x07,0xFF,0xF8,0x00,0x00,0x00,0x18,0x00,0x00,
        0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,
        0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,
        0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xF8,0x00,0x00,0x02,0x04,0x00,0x00,0x07,0xF2,0x00,0x00,0x08,0x09,0xFF,0xFE,0x1F,0xE4,0x00,0x01,0x20,0x13,
        0xFF,0xF9,0x40,0x08,0x00,0x05,0x80,0x07,0xFF,0xE5,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,
        0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,
        0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x17,0x80,0x00,0x00,0x14,0x80,0x00,0x00,0x14,
        0x80,0x00,0x00,0x1C,0x80,0x00,0x00,0x10,0xFF,0xFF,0xFF,0xF0,
    #elif defined(USE_XL_MENU_IMAGES)
        #ifdef COLOR_GRAY_16
            0x02,0x01,0x02,0x50,0x02,0x50,0x04,0x7E,0x7E,0x7E,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0D,0xFF,0xC2,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x34,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x04,0x3E,0x3E,0x3E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x01,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x01,0x00,0x00,0xFF,0xFF,0xF0,0x00,0x08,0x00,0x00,0x10,0x00,0x20,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0xFF,0xF0,0x00,0x00,0x20,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x08,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x07,0xFF,0xFC,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xE0,0x07,0xFF,0xFC,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xE0,0x0F,0xFF,0xFC,0xFF,0xF8,0xFF,0xFF,0xFF,0xFF,0xF0,0x0F,0xFF,0xFC,0xFF,0xFC,0x00,0x00,0x0F,0xFF,0xF0,0x1F,0xFF,0xE0,0x00,0x1C,0x00,0x00,0x03,0xFF,0xF8,0x1F,0xFF,0xE0,0x00,0x1E,0x00,0x00,0x03,0xFF,0xF8,0x1F,0xFF,0xE0,0x00,0x0F,0xFF,0xFF,0xF3,0xFF,0xF8,0x3F,0xFF,0xE0,0x00,0x00,0x00,0x00,0x73,0xFF,0xFC,0x3F,0xFF,0xE0,0x00,0x00,0x00,0x00,0x33,0xFF,0xFC,0x3F,0xFF,0xE0,0x00,0x00,0x00,0x00,0x33,0xFF,0xFC,0x3F,0xFF,0xE0,0x00,0x00,0x00,0x00,0x33,0xFF,0xFC,0x7F,0xFF,0xE0,0x00,0x00,0x00,0x00,0x33,0xFF,0xFE,0x7F,0xFF,0xE0,0x00,0x00,0x00,0x00,0x33,0xFF,0xFE,0x7F,0xFF,0xE0,0x00,0x00,0x00,0x00,0x33,0xFF,0xFE,0x7F,0xFF,0xE0,0x00,0x00,0x00,0x00,0x33,0xFF,0xFE,0x7F,0xFF,0xE0,0x00,0x00,0x00,0x00,0x33,0xFF,0xFE,0x7F,0xFF,0xE0,0x00,0x00,0x00,0x00,0x33,0xFF,0xFE,0x7F,0xFF,0xE0,0x00,0x00,0x00,0x00,0x33,0xFF,0xFE,0x7F,0xFF,0xE0,0x00,0x00,0x00,0x00,0x33,0xFF,0xFE,0x7F,0xFF,0xE0,0x00,0x00,0x00,0x00,0x33,0xFF,0xFE,0x7F,0xFF,0xE0,0x00,0x00,0x00,0x00,0x33,0xFF,0xFE,0x7F,0xFF,0xE0,0x00,0x00,0x00,0x00,0x33,0xFF,0xFE,0x7F,0xFF,0xE0,0x00,0x00,0x00,0x00,0x33,0xFF,0xFE,0x7F,0xFF,0xE0,0x00,0x00,0x00,0x00,0x33,0xFF,0xFE,0x7F,0xFF,0xE0,0x00,0x00,0x00,0x00,0x33,0xFF,0xFE,0x3F,0xFF,0xE0,0x00,0x00,0x00,0x00,0x33,0xFF,0xFC,0x3F,0xFF,0xE0,0x00,0x00,0x00,0x00,0x33,0xFF,0xFC,0x3F,0xFF,0xE0,0x00,0x00,0x00,0x00,0x33,0xFF,0xFC,0x3F,0xFF,0xE0,0x00,0x00,0x00,0x00,0x33,0xFF,0xFC,0x1F,0xFF,0xE0,0x00,0x00,0x00,0x00,0x33,0xFF,0xF8,0x1F,0xFF,0xE0,0x00,0x00,0x00,0x00,0x03,0xFF,0xF8,0x1F,0xFF,0xE0,0x00,0x00,0x00,0x00,0x07,0xFF,0xF8,0x0F,0xFF,0xE0,0x00,0x00,0x00,0x00,0x3F,0xFF,0xF0,0x0F,0xFF,0xE0,0x00,0x00,0x00,0x00,0x3F,0xFF,0xF0,0x07,0xFF,0xE0,0x00,0x00,0x00,0x00,0x7F,0xFF,0xE0,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        #else
            0x02,0x01,0x02,0x20,0x02,0x20,0x04,0xff,0xd9,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xF8,0x00,0x00,0x00,0x0C,0x00,0x00,0x00,0x06,0x00,0x00,
            0x00,0x03,0xFF,0xFE,0x1F,0xE0,0x00,0x06,0x3F,0xF0,0x00,0x02,0x7F,0xF8,0x00,0x02,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,
            0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,
            0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE0,0x7F,0xFF,
            0xFF,0xE0,0x7F,0xFF,0xFF,0xE0,0x7F,0xFF,0xFF,0xE0,0x7F,0xFF,0xFF,0xE0,0x00,0x00,0x00,0x00,0x04,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xF0,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x0C,0x00,0x00,0x00,0x07,0xFF,0xF8,0x00,0x00,0x00,0x18,0x00,0x00,
            0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,
            0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,
            0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xF8,0x00,0x00,0x02,0x04,0x00,0x00,0x07,0xF2,0x00,0x00,0x08,0x09,0xFF,0xFE,0x1F,0xE4,0x00,0x01,0x20,0x13,
            0xFF,0xF9,0x40,0x08,0x00,0x05,0x80,0x07,0xFF,0xE5,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,
            0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,
            0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x17,0x80,0x00,0x00,0x14,0x80,0x00,0x00,0x14,
            0x80,0x00,0x00,0x1C,0x80,0x00,0x00,0x10,0xFF,0xFF,0xFF,0xF0,
        #endif
    #else
        /*            PUT YOUR ICON HERE            */
        0x02,0x01,0x02,0x20,0x02,0x20,0x04,0xff,0xd9,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xF8,0x00,0x00,0x00,0x0C,0x00,0x00,0x00,0x06,0x00,0x00,
        0x00,0x03,0xFF,0xFE,0x1F,0xE0,0x00,0x06,0x3F,0xF0,0x00,0x02,0x7F,0xF8,0x00,0x02,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,
        0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,
        0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE2,0x7F,0xFF,0xFF,0xE0,0x7F,0xFF,
        0xFF,0xE0,0x7F,0xFF,0xFF,0xE0,0x7F,0xFF,0xFF,0xE0,0x7F,0xFF,0xFF,0xE0,0x00,0x00,0x00,0x00,0x04,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xF0,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x0C,0x00,0x00,0x00,0x07,0xFF,0xF8,0x00,0x00,0x00,0x18,0x00,0x00,
        0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,
        0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,
        0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xF8,0x00,0x00,0x02,0x04,0x00,0x00,0x07,0xF2,0x00,0x00,0x08,0x09,0xFF,0xFE,0x1F,0xE4,0x00,0x01,0x20,0x13,
        0xFF,0xF9,0x40,0x08,0x00,0x05,0x80,0x07,0xFF,0xE5,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,
        0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,
        0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x15,0x80,0x00,0x00,0x17,0x80,0x00,0x00,0x14,0x80,0x00,0x00,0x14,
        0x80,0x00,0x00,0x1C,0x80,0x00,0x00,0x10,0xFF,0xFF,0xFF,0xF0,
    #endif
};

#define appNameClass    InternetApp          // App name without spaces
#define appName         "Internet"              // App name with spaces 

class appNameClass: public Application{
    public:
        virtual void onLoop() override;
        virtual void onDestroy() override;
        virtual void onEvent(unsigned char event, int val1, int val2, int val3, int val4, int val5) override;

        void onCreate();
        appNameClass(){ fillScreen(0, 0, 0); super_onCreate(); onCreate(); };
        static unsigned const char* getParams(const unsigned char type){
            switch(type){ 
              case PARAM_TYPE_NAME: return (unsigned char*)appName; 
              case PARAM_TYPE_ICON: return icon;
              default: return (unsigned char*)""; }
        };
        const static unsigned char icon[] PROGMEM;
      
};

void appNameClass::onCreate(){
    /*
        Write you code onCreate here
    */
    setDrawColor(255, 255, 255);
    drawString(appName, 5, STYLE_STATUSBAR_HEIGHT + 10, 2);
}

void appNameClass::onLoop(){
    /*
        Write you code onLoop here
    */
}

void appNameClass::onDestroy(){
    /*
        Write you code onDestroy here
    */
}

void appNameClass::onEvent(unsigned char event, int val1, int val2, int val3, int val4, int val5){
    
    if(event==EVENT_BUTTON_PRESSED){
        // Write you code on [val1] button pressed here
        if(val1==BUTTON_BACK){
            startApp(-1);
        }
    }else if(event==EVENT_BUTTON_RELEASED){
        // Write you code on [val1] button released here
    }else if(event==EVENT_BUTTON_LONG_PRESS){
        // Write you code on [val1] button long press here
    }else if(event==EVENT_ON_TIME_CHANGED){
        // Write you code on system time changed
    }
    
}

const unsigned char appNameClass::icon[] PROGMEM = {
    
	/*            PUT YOUR ICON HERE            */

        0x02,0x01,0x02,0x20,0x02,0x20,0x04,0x33,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x03,0xC0,0x00,0x40,0x07,0xF0,0x00,0xE0,0x0F,0xF0,0x00,0xF0,0x1F,0xC0,0x03,0xF8,0x1F,0x00,0x03,0xF8,0x3F,0x00,0x07,0xFC,
        0x3E,0x00,0x0F,0xFC,0x3E,0x00,0x0E,0xFC,0x7E,0x00,0x3A,0x7E,0x7C,0x00,0x3A,0x76,0x70,0x00,0x38,0xC0,0x40,0x00,0x00,0x20,0x70,
        0x00,0x0F,0xE0,0x78,0x00,0x1F,0xF0,0x7F,0x00,0x3F,0xF0,0x7F,0x80,0x3F,0xF0,0x3F,0x80,0x3F,0xF0,0x3F,0x80,0x1F,0xF0,0x3F,0x80,
        0x0F,0xE0,0x1F,0x00,0x01,0xE8,0x1E,0x00,0x01,0xE8,0x0E,0x00,0x00,0xE0,0x06,0x00,0x00,0xC0,0x02,0x00,0x00,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x66,0xff,0x00,0x00,0x00,0x00,0x00,0x0F,0xF0,0x00,
        0x00,0x7F,0xFE,0x00,0x01,0xFF,0xFF,0x80,0x00,0x3F,0xFF,0x80,0x00,0x0F,0xFF,0x00,0x00,0x0F,0xFF,0x00,0x00,0x3F,0xFC,0x00,0x00,
        0xFF,0xFC,0x00,0x00,0xFF,0xF8,0x00,0x01,0xFF,0xF0,0x00,0x01,0xFF,0xF1,0x00,0x01,0xFF,0xC5,0x80,0x03,0xFF,0xC5,0x88,0x0F,0xFF,
        0xC7,0x3E,0x3F,0xFF,0xFF,0xDE,0x0F,0xFF,0xF0,0x1E,0x07,0xFF,0xE0,0x0E,0x00,0xFF,0xC0,0x0E,0x00,0x7F,0xC0,0x0E,0x00,0x7F,0xC0,
        0x0C,0x00,0x7F,0xE0,0x0C,0x00,0x7F,0xF0,0x1C,0x00,0xFF,0xFE,0x10,0x01,0xFF,0xFE,0x10,0x01,0xFF,0xFF,0x10,0x01,0xFF,0xFF,0x20,
        0x01,0xFF,0xFF,0xC0,0x01,0xFF,0xFF,0x80,0x00,0x7F,0xFE,0x00,0x00,0x0F,0xF0,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,
        0x0F,0xF0,0x00,0x00,0x70,0x0E,0x00,0x01,0x80,0x01,0x80,0x02,0x00,0x00,0x40,0x04,0x00,0x00,0x20,0x08,0x00,0x00,0x10,0x10,0x00,
        0x00,0x08,0x20,0x00,0x00,0x04,0x20,0x00,0x00,0x04,0x40,0x00,0x00,0x02,0x40,0x00,0x00,0x02,0x40,0x00,0x00,0x02,0x80,0x00,0x00,
        0x01,0x80,0x00,0x00,0x01,0x80,0x00,0x00,0x01,0x80,0x00,0x00,0x01,0x80,0x00,0x00,0x01,0x80,0x00,0x00,0x01,0x80,0x00,0x00,0x01,
        0x80,0x00,0x00,0x01,0x40,0x00,0x00,0x02,0x40,0x00,0x00,0x02,0x40,0x00,0x00,0x02,0x20,0x00,0x00,0x04,0x20,0x00,0x00,0x04,0x10,
        0x00,0x00,0x08,0x08,0x00,0x00,0x10,0x04,0x00,0x00,0x20,0x02,0x00,0x00,0x40,0x01,0x80,0x01,0x80,0x00,0x70,0x0E,0x00,0x00,0x0F,
        0xF0,0x00,

};

#define appNameClass    SimpleGameApp          // App name without spaces
#define appName         "Game"              // App name with spaces 

class appNameClass: public Application{
    public:
        virtual void onLoop() override;
        virtual void onDestroy() override;
        virtual void onEvent(unsigned char event, int val1, int val2, int val3, int val4, int val5) override;

        void onCreate();
        appNameClass(){ fillScreen(0, 0, 0); super_onCreate(); onCreate(); };
        static unsigned const char* getParams(const unsigned char type){
            switch(type){ 
              case PARAM_TYPE_NAME: return (unsigned char*)appName; 
              case PARAM_TYPE_ICON: return icon;
              default: return (unsigned char*)""; }
        };
        const static unsigned char icon[] PROGMEM;
      
};

void appNameClass::onCreate(){
    /*
        Write you code onCreate here
    */
    setDrawColor(255, 255, 255);
    drawString(appName, 5, STYLE_STATUSBAR_HEIGHT + 10, 2);
}

void appNameClass::onLoop(){
    /*
        Write you code onLoop here
    */
}

void appNameClass::onDestroy(){
    /*
        Write you code onDestroy here
    */
}

void appNameClass::onEvent(unsigned char event, int val1, int val2, int val3, int val4, int val5){
    
    if(event==EVENT_BUTTON_PRESSED){
        // Write you code on [val1] button pressed here
        if(val1==BUTTON_BACK){
            startApp(-1);
        }

    }else if(event==EVENT_BUTTON_RELEASED){
        // Write you code on [val1] button released here
    }else if(event==EVENT_BUTTON_LONG_PRESS){
        // Write you code on [val1] button long press here
    }else if(event==EVENT_ON_TIME_CHANGED){
        // Write you code on system time changed
    }
    
}

const unsigned char appNameClass::icon[] PROGMEM = {
    
	/*            PUT YOUR ICON HERE            */

    0x02,0x01,0x02,0x20,0x02,0x20,0x04,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x00,0x00,0x07,0xE0,0x00,0x00,0x07,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x07,0x00,0x00,0xE0,0x07,0x00,
    0x04,0xff,0xd9,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0xE0,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xff,0xff,0xff,0x03,0x80,
    0x01,0xC0,0x03,0x80,0x01,0xC0,0x03,0x80,0x01,0xC0,0x00,0x70,0x0E,0x00,0x00,0x70,0x0E,0x00,0x00,0x70,0x0E,0x00,0x03,
    0xFF,0xFF,0xC0,0x03,0xFF,0xFF,0xC0,0x03,0xFF,0xFF,0xC0,0x1F,0x8F,0xF1,0xF8,0x1F,0x8F,0xF1,0xF8,0x1F,0x8F,0xF1,0xF8,
    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE3,0xFF,0xFF,0xC7,0xE3,0xFF,0xFF,0xC7,0xE3,0xFF,0xFF,
    0xC7,0xE3,0x80,0x01,0xC7,0xE3,0x80,0x01,0xC7,0xE3,0x80,0x01,0xC7,0x00,0x7E,0x7E,0x00,0x00,0x7E,0x7E,0x00,0x00,0x7E,
    0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};

#define appNameClass    KeyboardTest         // App name without spaces
#define appName         "Keyboard test"              // App name with spaces 

class appNameClass: public Application{
    public:
        virtual void onLoop() override;
        virtual void onDestroy() override;
        virtual void onEvent(unsigned char event, int val1, int val2, int val3, int val4, int val5) override;

        void onCreate();
        appNameClass(){ 
            fillScreen(0, 0, 0);  // filling background
            super_onCreate();           // Drawind statusbar and etc if needed
            onCreate(); 
        };

        static unsigned const char* getParams(const unsigned char type){
            switch(type){ 
              case PARAM_TYPE_NAME: return (unsigned char*)appName; 
              case PARAM_TYPE_ICON: return icon;
              default: return (unsigned char*)""; }
        };
        const static unsigned char icon[] PROGMEM;
      
};

void appNameClass::onCreate(){
    /*
        Write you code on App create here
    */
   core_software_keyboard_show();
}

void appNameClass::onLoop(){
    /*
        Write you code onLoop here
    */
}

void appNameClass::onDestroy(){
    /*
        Write you code onDestroy here
    */
}

void appNameClass::onEvent(unsigned char event, int val1, int val2, int val3, int val4, int val5){
    
    if(event==EVENT_BUTTON_PRESSED){
        // Write you code on [val1] button pressed here
        if(val1==BUTTON_BACK){
            startApp(-1);
        }
    }else if(event==EVENT_BUTTON_RELEASED){
        // Write you code on [val1] button released here
    }else if(event==EVENT_BUTTON_LONG_PRESS){
        // Write you code on [val1] button long press here
    }else if(event==EVENT_ON_TIME_CHANGED){
        // Write you code on system time changed
    }
    
}

const unsigned char appNameClass::icon[] PROGMEM = {
    
	/*            PUT YOUR ICON HERE            */
    0x02,0x01,0x02,0x20,0x02,0x20,0x04,0xff,0xff,0xff,0x01,0xC7,0x07,0x00,0x02,0x24,0x48,0x80,0x02,0x24,0x48,0x00,0x02,
    0x27,0x88,0x00,0x03,0xE4,0x48,0x00,0x02,0x24,0x48,0x00,0x02,0x24,0x48,0x80,0x02,0x27,0x87,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFC,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x7F,0xFF,0xFF,
    0xFC,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x7F,0xFF,0xFF,0xFC,0x44,0x44,0x44,0x44,0x44,0x44,
    0x44,0x44,0x44,0x44,0x44,0x44,0x7F,0xFF,0xFF,0xFC,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x7F,
    0xFF,0xFF,0xFC,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x7F,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,
    0x04,0x47,0x47,0x47,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x3B,0xBB,0xBB,0xB8,0x3B,0xBB,0xBB,0xB8,0x3B,0xBB,0xBB,0xB8,0x00,0x00,0x00,0x00,0x3B,0xBB,0xBB,0xB8,0x3B,
    0xBB,0xBB,0xB8,0x3B,0xBB,0xBB,0xB8,0x00,0x00,0x00,0x00,0x3B,0xBB,0xBB,0xB8,0x3B,0xBB,0xBB,0xB8,0x3B,0xBB,0xBB,0xB8,
    0x00,0x00,0x00,0x00,0x3B,0xBB,0xBB,0xB8,0x3B,0xBB,0xBB,0xB8,0x3B,0xBB,0xBB,0xB8,0x00,0x00,0x00,0x00,0x3B,0xBB,0xBB,
    0xB8,0x3B,0xBB,0xBB,0xB8,0x3B,0xBB,0xBB,0xB8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};

#define appNameClass    TouchCalibration         // App name without spaces
#define appName         "Touch Calibr"              // App name with spaces 

class appNameClass: public Application{
    public:
        virtual void onLoop() override;
        virtual void onDestroy() override;
        virtual void onEvent(unsigned char event, int val1, int val2, int val3, int val4, int val5) override;

        void onCreate();
        appNameClass(){ 
            fillScreen(0, 0, 0);  // filling background
            super_onCreate();           // Drawind statusbar and etc if needed
            onCreate(); 
        };

        static unsigned const char* getParams(const unsigned char type){
            switch(type){ 
              case PARAM_TYPE_NAME: return (unsigned char*)appName; 
              case PARAM_TYPE_ICON: return icon;
              default: return (unsigned char*)""; }
        };
        const static unsigned char icon[] PROGMEM;
      
};

void appNameClass::onCreate(){
    /*
        Write you code on App create here
    */

    setBackgroundColor(0, 0, 0);
    setDrawColor(255, 255, 255);
    drawString("Not touched", 5, STYLE_STATUSBAR_HEIGHT + 0*20 + 10, 2);
    drawString("00000", 5, STYLE_STATUSBAR_HEIGHT + 1*20 + 10, 2);
    drawString("00000", 5, STYLE_STATUSBAR_HEIGHT + 2*20 + 10, 2);
}

void appNameClass::onLoop(){
    /*
        Write you code onLoop here
    */

    /*
    setBackgroundColor(0, 0, 0);
    setDrawColor(0, 0, 0);
    clearString("25500", 5, STYLE_STATUSBAR_HEIGHT + 3*20 + 10, 2);
    
    setDrawColor(255, 255, 255);
    drawString(getDe(), 5, STYLE_STATUSBAR_HEIGHT + 3*20 + 10, 2);
    //drawString(String((int) 2), 5, STYLE_STATUSBAR_HEIGHT + 3*20 + 10, 2);
    */
}

void appNameClass::onDestroy(){
    /*
        Write you code onDestroy here
    */
}

void appNameClass::onEvent(unsigned char event, int val1, int val2, int val3, int val4, int val5){
    
    if(event==EVENT_BUTTON_PRESSED){
        // Write you code on [val1] button pressed here
        if(val1==BUTTON_BACK){
            startApp(-1);
        }
        if(val1==BUTTON_POWER){
            startApp(-1);
        }
    }else if(event==EVENT_BUTTON_RELEASED){
        // Write you code on [val1] button released here
    }else if(event==EVENT_BUTTON_LONG_PRESS){
        // Write you code on [val1] button long press here
    }else if(event==EVENT_ON_TIME_CHANGED){
        // Write you code on system time changed
    }else if(event==EVENT_ON_TOUCH_START){
        setDrawColor(0, 0, 0);
        clearString("Not touched released", 5, STYLE_STATUSBAR_HEIGHT + 0*20 + 10, 2);
        clearString("000000000000000", 5, STYLE_STATUSBAR_HEIGHT + 1*20 + 10, 2);
        clearString("000000000000000", 5, STYLE_STATUSBAR_HEIGHT + 2*20 + 10, 2);

        setDrawColor(255, 255, 255);
        drawString("Touch start", 5, STYLE_STATUSBAR_HEIGHT + 0*20 + 10, 2);
        drawString(String(val1), 5, STYLE_STATUSBAR_HEIGHT + 1*20 + 10, 2);
        drawString(String(val2), 5, STYLE_STATUSBAR_HEIGHT + 2*20 + 10, 2);
    }else if(event==EVENT_ON_TOUCH_RELEASED){
        setDrawColor(0, 0, 0);
        clearString("Not touched released", 5, STYLE_STATUSBAR_HEIGHT + 0*20 + 10, 2);
        clearString("000000000000000", 5, STYLE_STATUSBAR_HEIGHT + 1*20 + 10, 2);
        clearString("000000000000000", 5, STYLE_STATUSBAR_HEIGHT + 2*20 + 10, 2);

        setDrawColor(255, 255, 255);
        drawString("Touch released", 5, STYLE_STATUSBAR_HEIGHT + 0*20 + 10, 2);
        drawString(String(val1), 5, STYLE_STATUSBAR_HEIGHT + 1*20 + 10, 2);
        drawString(String(val2), 5, STYLE_STATUSBAR_HEIGHT + 2*20 + 10, 2);
    }
    
}

const unsigned char appNameClass::icon[] PROGMEM = {
    
	/*            PUT YOUR ICON HERE            */
    0x02,0x01,0x02,0x20,0x02,0x20,0x04,0xff,0xff,0xff,0xFF,0x00,0x00,0xFF,0xFF,0x00,0x00,0xFF,0xC0,0x00,0x00,0x03,
    0xC0,0x00,0x00,0x03,0xC0,0x00,0x00,0x03,0xC0,0x00,0x00,0x03,0xC0,0x00,0x00,0x03,0xC0,0x00,0x00,0x03,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x01,0x80,0x00,0x00,0x01,0x80,0x00,0x00,0x01,0x80,0x00,
    0x00,0x01,0x80,0x00,0x00,0x3F,0xFC,0x00,0x00,0x3F,0xFC,0x00,0x00,0x01,0x80,0x00,0x00,0x01,0x80,0x00,0x00,0x01,
    0x80,0x00,0x00,0x01,0x80,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x03,
    0xC0,0x00,0x00,0x03,0xC0,0x00,0x00,0x03,0xC0,0x00,0x00,0x03,0xC0,0x00,0x00,0x03,0xC0,0x00,0x00,0x03,0xFF,0x00,
    0x00,0xFF,0xFF,0x00,0x00,0xFF,
};

#define appNameClass    PedometerAppTest         // App name without spaces
#define appName         "Pedometer"              // App name with spaces 

#ifndef PEDOMETER_APP_TEST_FONT_SIZE
    #define PEDOMETER_APP_TEST_FONT_SIZE FONT_SIZE_DEFAULT
#endif

class appNameClass: public Application{
    public:
        virtual void onLoop() override;
        virtual void onDestroy() override;
        virtual void onEvent(unsigned char event, int val1, int val2, int val3, int val4, int val5) override;

        void onCreate();
        appNameClass(){ 
            fillScreen(0, 0, 0);  // filling background
            super_onCreate();           // Drawind statusbar and etc if needed
            onCreate(); 
        };

        static unsigned const char* getParams(const unsigned char type){
            switch(type){ 
              case PARAM_TYPE_NAME: return (unsigned char*)appName; 
              case PARAM_TYPE_ICON: return icon;
              default: return (unsigned char*)""; }
        };
        const static unsigned char icon[] PROGMEM;
        void drawStringOnScreen(bool draw, String stringToPrint);
        int currentPrintScreenString = 0;
        float acceleration_max = 0;
        float acceleration_min = 0;
      
        String step_app_pedometr_test = "-";
        String sleep_app_pedometr_test = "-";
        String mesures_ms_app_pedometr_test = "-";
        String mesures_app_pedometr_test = "-";

        String accel_x_app_pedometr_test = "-";
        String accel_y_app_pedometr_test = "-";
        String accel_z_app_pedometr_test = "-";

        String accel_total_app_pedometr_test = "-";

        String delta_app_pedometr_test = "-";
        String central_weight_app_pedometr_test = "-";
        String mesure_delay_app_pedometr_test = "-";
};

void appNameClass::onCreate(){
    /*
        Write you code on App create here
    */
    this->preventSleep         = true;
    this->preventInAppSleep    = true;

    DRAW_LIMITS_setEnable(true);
    DRAW_LIMIT_reset();
    DRAW_LIMITS_setEnable(STYLE_STATUSBAR_HEIGHT, -1, -1, -1);
    
    setBackgroundColor(0,0,0);
    setContrastColor(255, 255, 255);
    setDrawColor_ContrastColor();
    
    //drawString(appName, 5, STYLE_STATUSBAR_HEIGHT + 10, FONT_SIZE_DEFAULT);
    //core_pedometer_start_step_detection();
}

void appNameClass::drawStringOnScreen(bool draw, String stringToPrint){

    if(draw) setDrawColor_ContrastColor();
    else setDrawColor_BackGroundColor();

    #ifdef ROUND_SCREEN
        drawString_centered(stringToPrint, SCREEN_WIDTH/2, STYLE_STATUSBAR_HEIGHT + currentPrintScreenString*10*PEDOMETER_APP_TEST_FONT_SIZE + 10, PEDOMETER_APP_TEST_FONT_SIZE);
    #else
        drawString(stringToPrint, 5, STYLE_STATUSBAR_HEIGHT + currentPrintScreenString*10*PEDOMETER_APP_TEST_FONT_SIZE + 10, PEDOMETER_APP_TEST_FONT_SIZE);
    #endif
    
    if(draw)currentPrintScreenString ++;
}


void appNameClass::onLoop(){
    /*
        Write you code onLoop here
    */
       currentPrintScreenString = 0;

    //drawRect(0,0, SCREEN_WIDTH, SCREEN_HEIGHT, true);

    #ifdef ACCELEROMETER_ENABLE
        driver_accelerometer_update_accelerometer();

        #ifdef PEDOMETER_ENABLE
            if(this->step_app_pedometr_test != String(get_pedometer_days_steps())){
                drawStringOnScreen(false, "Steps: " + step_app_pedometr_test);
                this->step_app_pedometr_test = String(get_pedometer_days_steps());
                drawStringOnScreen(true, "Steps: " + step_app_pedometr_test);
            }else currentPrintScreenString ++;
            

            if(this->sleep_app_pedometr_test != String(get_pedometer_days_sleep())){
                drawStringOnScreen(false, "Sleep: " + sleep_app_pedometr_test);
                this->sleep_app_pedometr_test = String(get_pedometer_days_sleep());
                drawStringOnScreen(true, "Sleep: " + sleep_app_pedometr_test);
            }else currentPrintScreenString ++;
            
            if(this->mesures_ms_app_pedometr_test != String(get_corePedometer_currentsleep_between_mesures())){
                drawStringOnScreen(false, "Mesures ms: " + mesures_ms_app_pedometr_test);
                this->mesures_ms_app_pedometr_test = String(get_corePedometer_currentsleep_between_mesures());
                drawStringOnScreen(true, "Mesures ms: " + mesures_ms_app_pedometr_test);
            }else currentPrintScreenString ++;
            
            if(this->mesures_app_pedometr_test != String(getPedometr_mesurings_in_a_day())){
                drawStringOnScreen(false, "Mesures: " + mesures_app_pedometr_test);
                this->mesures_app_pedometr_test = String(getPedometr_mesurings_in_a_day());
                drawStringOnScreen(true, "Mesures: " + mesures_app_pedometr_test);
            }else currentPrintScreenString ++;
            
            drawStringOnScreen(true, "");
            drawStringOnScreen(true, "Accels X Y Z:");
            if(this->accel_x_app_pedometr_test != String(get_driver_accelerometer_x())){
                drawStringOnScreen(false, accel_x_app_pedometr_test);
                this->accel_x_app_pedometr_test = String(get_driver_accelerometer_x());
                drawStringOnScreen(true, accel_x_app_pedometr_test);
            }else currentPrintScreenString ++;
            
            if(this->accel_y_app_pedometr_test != String(get_driver_accelerometer_y())){
                drawStringOnScreen(false, accel_y_app_pedometr_test);
                this->accel_y_app_pedometr_test = String(get_driver_accelerometer_y());
                drawStringOnScreen(true, accel_y_app_pedometr_test);
            }else currentPrintScreenString ++;
            
            if(this->accel_z_app_pedometr_test != String(get_driver_accelerometer_z())){
                drawStringOnScreen(false, accel_z_app_pedometr_test);
                this->accel_z_app_pedometr_test = String(get_driver_accelerometer_z());
                drawStringOnScreen(true, accel_z_app_pedometr_test);
            }else currentPrintScreenString ++;
            
            if(this->accel_total_app_pedometr_test != String(driver_accelerometer_get_accel_total())){
                drawStringOnScreen(false, "Accerometer total: " + accel_total_app_pedometr_test);
                this->accel_total_app_pedometr_test = String(driver_accelerometer_get_accel_total());
                drawStringOnScreen(true, "Accerometer total: " + accel_total_app_pedometr_test);
            }else currentPrintScreenString ++;
            
            #ifdef DEBUG_PEDOMETER
                drawStringOnScreen(true, " ");
                if(this->delta_app_pedometr_test != String(get_analysis_delta_value())){
                    drawStringOnScreen(false, "Delta: " + delta_app_pedometr_test);
                    this->delta_app_pedometr_test = String(get_analysis_delta_value());
                    drawStringOnScreen(true, "Delta: " + delta_app_pedometr_test);
                }else currentPrintScreenString ++;
            
            
                drawStringOnScreen(true, "Central weight: ");
                if(this->central_weight_app_pedometr_test != String(get_analysis_central_weight_value())){
                    drawStringOnScreen(false, central_weight_app_pedometr_test);
                    this->central_weight_app_pedometr_test = String(get_analysis_central_weight_value());
                    drawStringOnScreen(true, central_weight_app_pedometr_test);
                }else currentPrintScreenString ++;

            #endif
            drawStringOnScreen(true, "");
            drawStringOnScreen(true, "Mesure delay: ");
            if(this->mesure_delay_app_pedometr_test != String(get_corePedometer_currentsleep_between_mesures())){
                drawStringOnScreen(false, mesure_delay_app_pedometr_test);
                this->mesure_delay_app_pedometr_test = String(get_corePedometer_currentsleep_between_mesures());
                drawStringOnScreen(true, mesure_delay_app_pedometr_test);
            }else currentPrintScreenString ++;
            
        #endif
        
    #endif
    
}

void appNameClass::onDestroy(){
    /*
        Write you code onDestroy here
    */
    //digitalWrite(10,1);
    
}

void appNameClass::onEvent(unsigned char event, int val1, int val2, int val3, int val4, int val5){
    
     #ifdef TOUCH_SCREEN_ENABLE

        if(event==EVENT_ON_TOUCH_DRAG){
        } 
        else if(event==EVENT_BUTTON_PRESSED){
            if(val1==BUTTON_POWER){
                startApp(-1);
            }
            else if(val1==BUTTON_BACK){
                startApp(-1);
            }
        }

    #else

        /**/
        #if (DRIVER_CONTROLS_TOTALBUTTONS == 2 || DRIVER_CONTROLS_TOTALBUTTONS == 1)
            
            if(event==EVENT_BUTTON_PRESSED){
            }else if(event==EVENT_BUTTON_RELEASED){
            }else if(event==EVENT_BUTTON_LONG_PRESS){
                if(val1==BUTTON_SELECT){
                    acceleration_max = 0;
                    acceleration_min = 0;
                    #ifdef PEDOMETER_ENABLE
                        set_pedometer_days_steps(0,0);
                        set_pedometer_days_sleep(0,0);
                    #endif
                }else if(val1==BUTTON_BACK){
                    startApp(-1);
                }    
            }else if(event==EVENT_BUTTON_SHORT_PRESS){
            }else if(event==EVENT_BUTTON_SHORT_SINGLE_PRESS){
                if(val1==BUTTON_SELECT){
                }else if(val1==BUTTON_BACK){
                }
            }else if(event==EVENT_BUTTON_DOUBLE_PRESS){
                #if (DRIVER_CONTROLS_TOTALBUTTONS == 1)
                    if(val1==BUTTON_SELECT){
                        startApp(-1);
                    }
                #else
                #endif
                
            }
            
        #else
            if(event==EVENT_BUTTON_PRESSED){
                switch(val1){
                    case BUTTON_UP:
                        break;
                    case BUTTON_BACK:
                        break;
                    case BUTTON_DOWN:
                        break;
                    case BUTTON_SELECT:
                        break;
                }
            }else if(event==EVENT_BUTTON_RELEASED){

            }else if(event==EVENT_BUTTON_LONG_PRESS){

            }
        #endif
    
    #endif
    
}

const unsigned char appNameClass::icon[] PROGMEM = {
    
	    #ifdef USE_L_MENU_IMAGES
    #elif defined(USE_XL_MENU_IMAGES)
        0x02,0x01,0x02,0x50,0x02,0x50,0x04,0x00,0x00,0x33,0x00,0x00,0x00,0x00,0x60,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x06,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x66,0x00,0x00,0x00,0x00,0x10,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x08,0x00,0x00,0x00,0x00,0x04,0x2A,0x2A,0x66,0x00,0x00,0x00,0x00,0x0C,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x10,0x00,0x00,0x00,0x00,0x04,0x2A,0x2A,0x99,0x00,0x00,0x00,0x00,0x03,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFE,0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0xFF,0xFF,0x81,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0xFF,0xFF,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0x00,0x01,0xFF,0xFE,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0x80,0x03,0xFF,0xFC,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xC0,0x03,0xFF,0xFC,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xC0,0x07,0xFF,0xF8,0x00,0x1F,0xFF,0xC0,0xFF,0xFF,0xE0,0x07,0xFF,0xF8,0x00,0x1F,0xFF,0x80,0x3F,0xFF,0xE0,0x0F,0xFF,0xF8,0x00,0x0F,0xFF,0x00,0x1F,0xFF,0xF0,0x0F,0xFF,0xF8,0x00,0x0F,0xFE,0x00,0x1F,0xFF,0xF0,0x1F,0xFF,0xF8,0x00,0x0F,0xFE,0x00,0x0F,0xFF,0xF8,0x1F,0xFF,0xF0,0x00,0x0F,0xFC,0x00,0x0F,0xFF,0xF8,0x3F,0xFF,0xF0,0x00,0x0F,0xFC,0x00,0x07,0xFF,0xFC,0x3F,0xFF,0xF0,0x00,0x0F,0xFC,0x00,0x07,0xFF,0xFC,0x3F,0xFF,0xF0,0x00,0x07,0xFC,0x00,0x07,0xFF,0xFC,0x3F,0xFF,0xF0,0x00,0x07,0xF8,0x00,0x07,0xFF,0xFC,0x3F,0xFF,0xF0,0x00,0x07,0xF8,0x00,0x07,0xFF,0xFC,0x7F,0xFF,0xF0,0x00,0x0F,0xF8,0x00,0x07,0xFF,0xFE,0x7F,0xFF,0xF8,0x00,0x0F,0xF8,0x00,0x07,0xFF,0xFE,0x7F,0xFF,0xF8,0x00,0x0F,0xF8,0x00,0x07,0xFF,0xFE,0x7F,0xFF,0xF8,0x00,0x1F,0xF8,0x00,0x07,0xFF,0xFE,0x7F,0xFF,0xF8,0x00,0x1F,0xF8,0x00,0x07,0xFF,0xFE,0x7F,0xFF,0xF8,0x00,0x1F,0xF8,0x00,0x07,0xFF,0xFE,0xFF,0xFF,0xF8,0x00,0x3F,0xF8,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x3F,0xFC,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x3F,0xFC,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x3F,0xFE,0x00,0x07,0xFF,0xFF,0x7F,0xFF,0xFC,0x00,0x3F,0xFE,0x00,0x07,0xFF,0xFE,0x7F,0xFF,0xFE,0x00,0xFF,0xFE,0x00,0x0F,0xFF,0xFE,0x7F,0xFF,0xFE,0x0F,0xFF,0xFF,0x00,0x0F,0xFF,0xFE,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x0F,0xFF,0xFE,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x0F,0xFF,0xFE,0x7F,0xFF,0xFF,0xF8,0x1F,0xFF,0x00,0x1F,0xFF,0xFE,0x3F,0xFF,0xFF,0x80,0x1F,0xFF,0x80,0x1F,0xFF,0xFC,0x3F,0xFF,0xFF,0x00,0x1F,0xFF,0xFC,0x1F,0xFF,0xFC,0x3F,0xFF,0xFF,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0x80,0x0F,0xFE,0x0F,0xFF,0xFF,0xFC,0x1F,0xFF,0xFF,0x80,0x0F,0xFE,0x00,0x7F,0xFF,0xF8,0x1F,0xFF,0xFF,0x80,0x0F,0xFC,0x00,0x3F,0xFF,0xF8,0x0F,0xFF,0xFF,0x80,0x0F,0xFC,0x00,0x3F,0xFF,0xF0,0x0F,0xFF,0xFF,0xC0,0x0F,0xFC,0x00,0x7F,0xFF,0xF0,0x07,0xFF,0xFF,0xE0,0x0F,0xFC,0x00,0x7F,0xFF,0xE0,0x07,0xFF,0xFF,0xE0,0x1F,0xF8,0x00,0x7F,0xFF,0xE0,0x03,0xFF,0xFF,0xF8,0xFF,0xF8,0x00,0x7F,0xFF,0xC0,0x03,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0xFF,0xFF,0xC0,0x01,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0xFF,0xFF,0x80,0x00,0xFF,0xFF,0xFF,0xFF,0xFC,0x01,0xFF,0xFF,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFE,0x03,0xFF,0xFF,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0x87,0xFF,0xFE,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x00,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xE0,0x00,0x00,0x00,0x00,0x04,0x55,0x55,0x99,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x04,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xE0,0x00,0x1F,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xE0,0x00,0x7F,0x80,0x00,0x00,0x00,0x00,0x07,0xFF,0xE0,0x00,0xFF,0xC0,0x00,0x00,0x00,0x00,0x07,0xFF,0xF0,0x00,0xFF,0xE0,0x00,0x00,0x00,0x00,0x07,0xFF,0xF0,0x01,0xFF,0xE0,0x00,0x00,0x00,0x00,0x07,0xFF,0xF0,0x01,0xFF,0xF0,0x00,0x00,0x00,0x00,0x07,0xFF,0xF0,0x03,0xFF,0xF0,0x00,0x00,0x00,0x00,0x07,0xFF,0xF0,0x03,0xFF,0xF0,0x00,0x00,0x00,0x00,0x0F,0xFF,0xF0,0x03,0xFF,0xF8,0x00,0x00,0x00,0x00,0x07,0xFF,0xF0,0x03,0xFF,0xF8,0x00,0x00,0x00,0x00,0x07,0xFF,0xF0,0x03,0xFF,0xF8,0x00,0x00,0x00,0x00,0x07,0xFF,0xF0,0x07,0xFF,0xF8,0x00,0x00,0x00,0x00,0x07,0xFF,0xF0,0x07,0xFF,0xF8,0x00,0x00,0x00,0x00,0x07,0xFF,0xE0,0x07,0xFF,0xF8,0x00,0x00,0x00,0x00,0x07,0xFF,0xE0,0x07,0xFF,0xF8,0x00,0x00,0x00,0x00,0x07,0xFF,0xE0,0x07,0xFF,0xF8,0x00,0x00,0x00,0x00,0x07,0xFF,0xC0,0x07,0xFF,0xF8,0x00,0x00,0x00,0x00,0x03,0xFF,0xC0,0x03,0xFF,0xF8,0x00,0x00,0x00,0x00,0x03,0xFF,0xC0,0x03,0xFF,0xF8,0x00,0x00,0x00,0x00,0x03,0xFF,0xC0,0x01,0xFF,0xF8,0x00,0x00,0x00,0x00,0x03,0xFF,0xC0,0x01,0xFF,0xF0,0x00,0x00,0x00,0x00,0x01,0xFF,0x80,0x01,0xFF,0xF0,0x00,0x00,0x00,0x00,0x01,0xFE,0x00,0x00,0xFF,0xF0,0x00,0x00,0x00,0x00,0x01,0xC0,0x00,0x00,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xE0,0x00,0x00,0x00,0x00,0x00,0x01,0xC0,0x00,0xFF,0xE0,0x00,0x00,0x00,0x00,0x00,0x1F,0xE0,0x00,0x3F,0xE0,0x00,0x00,0x00,0x00,0x00,0xFF,0xE0,0x00,0x00,0xE0,0x00,0x00,0x00,0x00,0x00,0xFF,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF0,0x01,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF0,0x01,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF0,0x01,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x3F,0xF0,0x03,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x3F,0xF0,0x03,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0xE0,0x03,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x0F,0xC0,0x03,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x80,0x80,0xCC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x02,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x80,0x80,0x99,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    #else
        // small image
        0x02,0x01,0x02,0x20,0x02,0x20,0x04,0xff,0xff,0xff,0x00,0x00,0x07,0xF0,0x00,0x00,0x0F,0xF8,0x00,0x00,0x1F,
        0xFC,0x07,0xC0,0x1F,0xFC,0x1F,0xE0,0x3F,0xFE,0x3F,0xF0,0x3F,0xFE,0x3F,0xF0,0x3F,0xFE,0x3F,0xF8,0x3F,0xFE,
        0x7F,0xF8,0x1F,0xFE,0x7F,0xF8,0x1F,0xFE,0x7F,0xFC,0x0F,0xFE,0x7F,0xFC,0x0F,0xFE,0x3F,0xFC,0x0F,0xFC,0x3F,
        0xFC,0x07,0xFC,0x1F,0xFC,0x07,0xFC,0x1F,0xF8,0x03,0xF8,0x1F,0xF8,0x00,0x00,0x0F,0xF8,0x00,0x00,0x07,0xF8,
        0x00,0x00,0x07,0xE0,0x03,0xF8,0x03,0x00,0x07,0xFC,0x00,0x00,0x07,0xFC,0x00,0x06,0x07,0xFC,0x00,0x3E,0x07,
        0xFC,0x01,0xFF,0x03,0xFC,0x03,0xFF,0x03,0xF8,0x03,0xFF,0x01,0xF0,0x01,0xFF,0x00,0x00,0x01,0xFE,0x00,0x00,
        0x00,0xFC,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,
    #endif
};

#define appNameClass    PedometerApp             // App name without spaces
#define appName         "Activity"              // App name with spaces 

#define PEDOMETER_PAGES_PEDOMETER               0x00
#define PEDOMETER_PAGES_PEDOMETR_STATISTICS     0x01
#define PEDOMETER_PAGES_SLEEP_MONITOR           0x02
#define PEDOMETER_PAGES_SLEEP_STATISTICS        0x03

#define PEDOMETER_PAGE_MARGIN 4
#define PEDOMETER_CHART_HEIGHT ((SCREEN_HEIGHT - PEDOMETER_PAGE_MARGIN*2 - STYLE_STATUSBAR_HEIGHT)/3)
#define PEDOMETER_CHART_WIDTH ((SCREEN_WIDTH - PEDOMETER_PAGE_MARGIN*2))
#define PEDOMETER_CHART_COLUMNS 7
#define PEDOMETER_CHART_COLUMN_MARGINS_PX 3
#define PEDOMETER_CHART_COLUMN_WIDTH ((PEDOMETER_CHART_WIDTH - PEDOMETER_CHART_COLUMN_MARGINS_PX*PEDOMETER_CHART_COLUMNS)/PEDOMETER_CHART_COLUMNS)

#define PEDOMETER_DAYCHART_COLUMNS 24
#define PEDOMETER_DAYCHART_COLUMN_MARGINS_PX 0
#define PEDOMETER_DAYCHART_COLUMN_WIDTH ((PEDOMETER_CHART_WIDTH - PEDOMETER_DAYCHART_COLUMN_MARGINS_PX*PEDOMETER_DAYCHART_COLUMNS)/PEDOMETER_DAYCHART_COLUMNS)

#define APP_BACKGROUND_RED      0
#define APP_BACKGROUND_GREEN    0
#define APP_BACKGROUND_BLUE     0

class appNameClass: public Application{
    public:
        virtual void onLoop() override;
        virtual void onDestroy() override;
        virtual void onEvent(unsigned char event, int val1, int val2, int val3, int val4, int val5) override;

        void onCreate();
        appNameClass(){ 
            fillScreen(APP_BACKGROUND_RED, APP_BACKGROUND_GREEN, APP_BACKGROUND_BLUE);  // filling background
            super_onCreate();           // Drawind statusbar and etc if needed
            onCreate(); 
        };

        static unsigned const char* getParams(const unsigned char type){
            switch(type){ 
              case PARAM_TYPE_NAME: return (unsigned char*)appName; 
              case PARAM_TYPE_ICON: return icon;
              default: return (unsigned char*)""; }
        };
        const static unsigned char icon[] PROGMEM;
        void drawPage(bool draw, unsigned char page);   
        unsigned char current_page = PEDOMETER_PAGES_PEDOMETER;
        unsigned char getNextPage();
        unsigned char getPreviousPage();
};

unsigned char  appNameClass::getNextPage(){
    char page = current_page + 1;
    if(page>0x03) return 0x00;
    return page;
}

unsigned char  appNameClass::getPreviousPage(){
    if(current_page==0x00) return 0x03;
    char page = current_page - 1;
    return page;
}

void appNameClass::drawPage(bool draw, unsigned char page){
    #if defined(PEDOMETER_ENABLE) || defined(PEDOMETER_EMULATOR)
        if(page==PEDOMETER_PAGES_PEDOMETER){

            PEDOMETER_DAY_VALUE_TYPE pedometer_days_steps_max=0;
            for(unsigned char i=0; i<PEDOMETER_CHART_COLUMNS; i++){
                if(get_pedometer_days_steps(i)>pedometer_days_steps_max) pedometer_days_steps_max = get_pedometer_days_steps(i);
            }

            for(unsigned char i=0; i<PEDOMETER_CHART_COLUMNS; i++){
                if(draw){
                    if(get_pedometer_days_steps(i)<get_pedometer_days_steps_min_limit()){
                        setDrawColor(255 - 127*(int)i/7, 0, 0);
                    }else{
                        setDrawColor(0, 255 - 127*(int)i/7, 0);
                    }
                    
                }else{setDrawColor_BackGroundColor();} 
                
                #define Y1_CHART (STYLE_STATUSBAR_HEIGHT + PEDOMETER_PAGE_MARGIN + PEDOMETER_CHART_HEIGHT)
                #define Y2_CHART (STYLE_STATUSBAR_HEIGHT + PEDOMETER_PAGE_MARGIN + PEDOMETER_CHART_HEIGHT - (pedometer_days_steps_max==0?0:(PEDOMETER_CHART_HEIGHT*get_pedometer_days_steps(i)/pedometer_days_steps_max)) )
                #define X1_CHART (PEDOMETER_PAGE_MARGIN + (PEDOMETER_CHART_COLUMN_WIDTH + PEDOMETER_CHART_COLUMN_MARGINS_PX)*i)
                #define X2_CHART (X1_CHART + PEDOMETER_CHART_COLUMN_WIDTH - 1)

                #define X_SRINGS PEDOMETER_PAGE_MARGIN
                #define Y_SRINGS (Y1_CHART + FONT_CHAR_HEIGHT*FONT_SIZE_DEFAULT*7*(i+1)/5)
                drawRect(X1_CHART, Y1_CHART, X2_CHART, Y2_CHART, true);

                if(draw){
                    setDrawColor_ContrastColor();
                    drawString(String(get_pedometer_days_steps(i)) + " steps", X_SRINGS, Y_SRINGS);
                }else{
                    setDrawColor_BackGroundColor();
                    clearString(String(get_pedometer_days_steps(i)) + " steps", X_SRINGS, Y_SRINGS);
                    //drawString(String(get_pedometer_days_steps(i)) + " steps", X_SRINGS, Y_SRINGS);
                }
                
            }
        }if(page==PEDOMETER_PAGES_PEDOMETR_STATISTICS){
            uint16_t pedometer_days_activity_max=0;
            for(unsigned char i=0; i<PEDOMETER_DAYCHART_COLUMNS; i++){
                if(get_pedometer_hours_steps(i)>pedometer_days_activity_max) pedometer_days_activity_max = get_pedometer_hours_steps(i);
            }

            #define X_TITLE SCREEN_WIDTH/2
            #define Y_TITLE STYLE_STATUSBAR_HEIGHT + PEDOMETER_PAGE_MARGIN

            if(draw){
                setDrawColor_ContrastColor();
                drawString_centered("Day activity", X_TITLE, Y_TITLE);

                //drawString("Day mesures:",                                  PEDOMETER_PAGE_MARGIN,      Y_TITLE + PEDOMETER_CHART_HEIGHT + FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*2/3 +     FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*3/2*1);
                //drawString(String(getPedometr_mesurings_in_a_day()),        PEDOMETER_PAGE_MARGIN,      Y_TITLE + PEDOMETER_CHART_HEIGHT + FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*2/3 +     FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*3/2*2);
                drawString("Total steps:",                                  PEDOMETER_PAGE_MARGIN,      Y_TITLE + PEDOMETER_CHART_HEIGHT + FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*2/3 +     FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*3/2*1);
                drawString(String(get_pedometer_days_steps()),              PEDOMETER_PAGE_MARGIN,      Y_TITLE + PEDOMETER_CHART_HEIGHT + FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*2/3 +     FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*3/2*2);
                drawString("Target:",                                       PEDOMETER_PAGE_MARGIN,      Y_TITLE + PEDOMETER_CHART_HEIGHT + FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*2/3 +     FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*3/2*3);
                drawString(String(get_pedometer_days_steps_min_limit()),    PEDOMETER_PAGE_MARGIN,      Y_TITLE + PEDOMETER_CHART_HEIGHT + FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*2/3 +     FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*3/2*4);
                
            }else{
                setDrawColor_BackGroundColor();
                clearString_centered("Day activity", X_TITLE, Y_TITLE);

                //clearString("Day mesures:",                                  PEDOMETER_PAGE_MARGIN,      Y_TITLE + PEDOMETER_CHART_HEIGHT + FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*2/3 +     FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*3/2*1);
                //clearString(String(getPedometr_mesurings_in_a_day()),        PEDOMETER_PAGE_MARGIN,      Y_TITLE + PEDOMETER_CHART_HEIGHT + FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*2/3 +     FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*3/2*2);
                clearString("Total steps:",                                  PEDOMETER_PAGE_MARGIN,      Y_TITLE + PEDOMETER_CHART_HEIGHT + FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*2/3 +     FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*3/2*1);
                clearString(String(get_pedometer_days_steps()),              PEDOMETER_PAGE_MARGIN,      Y_TITLE + PEDOMETER_CHART_HEIGHT + FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*2/3 +     FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*3/2*2);
                clearString("Target:",                                       PEDOMETER_PAGE_MARGIN,      Y_TITLE + PEDOMETER_CHART_HEIGHT + FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*2/3 +     FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*3/2*3);
                clearString(String(get_pedometer_days_steps_min_limit()),    PEDOMETER_PAGE_MARGIN,      Y_TITLE + PEDOMETER_CHART_HEIGHT + FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*2/3 +     FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*3/2*4);
            }

            for(unsigned char i=0; i<PEDOMETER_DAYCHART_COLUMNS; i++){
                if(draw){
                    setDrawColor(0, 255, 0);
                }else{
                    setDrawColor_BackGroundColor();
                } 

                //debug("Column width: " + String(PEDOMETER_DAYCHART_COLUMN_WIDTH));
                
                #define Y1_CHART (FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*3/2 + STYLE_STATUSBAR_HEIGHT + PEDOMETER_PAGE_MARGIN + PEDOMETER_CHART_HEIGHT)
                #define Y2_CHART (FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*3/2 + STYLE_STATUSBAR_HEIGHT + PEDOMETER_PAGE_MARGIN + PEDOMETER_CHART_HEIGHT - (pedometer_days_activity_max==0?0:(PEDOMETER_CHART_HEIGHT*get_pedometer_hours_steps(i)/pedometer_days_activity_max)))
                #define X1_CHART (PEDOMETER_PAGE_MARGIN + (PEDOMETER_DAYCHART_COLUMN_WIDTH + PEDOMETER_DAYCHART_COLUMN_MARGINS_PX)*i)
                #define X2_CHART (X1_CHART + PEDOMETER_DAYCHART_COLUMN_WIDTH - 1)

                #define X_SRINGS PEDOMETER_PAGE_MARGIN
                #define Y_SRINGS (Y1_CHART + FONT_CHAR_HEIGHT*FONT_SIZE_DEFAULT*7*(i+1)/5)
                drawRect(X1_CHART, Y1_CHART, X2_CHART, Y2_CHART, true);
                
            }
        }if(page==PEDOMETER_PAGES_SLEEP_MONITOR){
            uint16_t pedometer_days_sleep_hours_max=0;
            for(unsigned char i=0; i<PEDOMETER_CHART_COLUMNS; i++){
                if(get_pedometer_days_sleep(i)>pedometer_days_sleep_hours_max) pedometer_days_sleep_hours_max = get_pedometer_days_sleep(i);
            }

            for(unsigned char i=0; i<PEDOMETER_CHART_COLUMNS; i++){
                if(draw){
                    if(get_pedometer_days_sleep(i)<get_pedometer_days_sleep_min_limit()){
                        setDrawColor(255 - 127*(int)i/7, 0, 0);
                    }else{
                        setDrawColor(0, 0, 255 - 127*(int)i/7);
                    }
                    
                }else{setDrawColor_BackGroundColor();} 
                
                #define Y1_CHART (STYLE_STATUSBAR_HEIGHT + PEDOMETER_PAGE_MARGIN + PEDOMETER_CHART_HEIGHT)
                #define Y2_CHART (STYLE_STATUSBAR_HEIGHT + PEDOMETER_PAGE_MARGIN + PEDOMETER_CHART_HEIGHT - (pedometer_days_sleep_hours_max==0?0:(PEDOMETER_CHART_HEIGHT*get_pedometer_days_sleep(i)/pedometer_days_sleep_hours_max) ))
                #define X1_CHART (PEDOMETER_PAGE_MARGIN + (PEDOMETER_CHART_COLUMN_WIDTH + PEDOMETER_CHART_COLUMN_MARGINS_PX)*i)
                #define X2_CHART (X1_CHART + PEDOMETER_CHART_COLUMN_WIDTH - 1)

                #define X_SRINGS PEDOMETER_PAGE_MARGIN
                #define Y_SRINGS (Y1_CHART + FONT_CHAR_HEIGHT*FONT_SIZE_DEFAULT*7*(i+1)/5)
                drawRect(X1_CHART, Y1_CHART, X2_CHART, Y2_CHART, true);

                if(draw){
                    setDrawColor_ContrastColor();
                    drawString(String(get_pedometer_days_sleep_hours(i)) + " sleep h.", X_SRINGS, Y_SRINGS);
                }else{
                    setDrawColor_BackGroundColor();
                    clearString(String(get_pedometer_days_sleep_hours(i)) + " sleep h.", X_SRINGS, Y_SRINGS);
                }
                
            }
        }if(page==PEDOMETER_PAGES_SLEEP_STATISTICS){
            uint16_t pedometer_days_activity_max=0;
            for(unsigned char i=0; i<PEDOMETER_DAYCHART_COLUMNS; i++){
                if(get_pedometer_hours_sleep(i)>pedometer_days_activity_max) pedometer_days_activity_max = get_pedometer_hours_sleep(i);
            }

            #define X_TITLE SCREEN_WIDTH/2
            #define Y_TITLE STYLE_STATUSBAR_HEIGHT + PEDOMETER_PAGE_MARGIN

            if(draw){
                setDrawColor_ContrastColor();
                drawString_centered("Day activity", X_TITLE, Y_TITLE);

                //drawString("Day mesures:",                                  PEDOMETER_PAGE_MARGIN,      Y_TITLE + PEDOMETER_CHART_HEIGHT + FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*2/3 +     FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*3/2*1);
                //drawString(String(getPedometr_mesurings_in_a_day()),        PEDOMETER_PAGE_MARGIN,      Y_TITLE + PEDOMETER_CHART_HEIGHT + FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*2/3 +     FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*3/2*2);
                drawString("Sleep hours:",                                  PEDOMETER_PAGE_MARGIN,      Y_TITLE + PEDOMETER_CHART_HEIGHT + FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*2/3 +     FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*3/2*1);
                drawString(String(get_pedometer_days_sleep_hours()),        PEDOMETER_PAGE_MARGIN,      Y_TITLE + PEDOMETER_CHART_HEIGHT + FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*2/3 +     FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*3/2*2);
                drawString("Target:",                                       PEDOMETER_PAGE_MARGIN,      Y_TITLE + PEDOMETER_CHART_HEIGHT + FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*2/3 +     FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*3/2*3);
                drawString(String(get_pedometer_days_sleep_hours_limit()),    PEDOMETER_PAGE_MARGIN,      Y_TITLE + PEDOMETER_CHART_HEIGHT + FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*2/3 +     FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*3/2*4);
                
            }else{
                setDrawColor_BackGroundColor();
                clearString_centered("Day activity", X_TITLE, Y_TITLE);

                //clearString("Day mesures:",                                  PEDOMETER_PAGE_MARGIN,      Y_TITLE + PEDOMETER_CHART_HEIGHT + FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*2/3 +     FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*3/2*1);
                //clearString(String(getPedometr_mesurings_in_a_day()),        PEDOMETER_PAGE_MARGIN,      Y_TITLE + PEDOMETER_CHART_HEIGHT + FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*2/3 +     FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*3/2*2);
                clearString("Sleep hours:",                                  PEDOMETER_PAGE_MARGIN,      Y_TITLE + PEDOMETER_CHART_HEIGHT + FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*2/3 +     FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*3/2*1);
                clearString(String(get_pedometer_days_sleep_hours()),        PEDOMETER_PAGE_MARGIN,      Y_TITLE + PEDOMETER_CHART_HEIGHT + FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*2/3 +     FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*3/2*2);
                clearString("Target:",                                       PEDOMETER_PAGE_MARGIN,      Y_TITLE + PEDOMETER_CHART_HEIGHT + FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*2/3 +     FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*3/2*3);
                clearString(String(get_pedometer_days_sleep_hours_limit()),    PEDOMETER_PAGE_MARGIN,      Y_TITLE + PEDOMETER_CHART_HEIGHT + FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*2/3 +     FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*3/2*4);
            }

            for(unsigned char i=0; i<PEDOMETER_DAYCHART_COLUMNS; i++){
                if(draw){
                    setDrawColor(0, 0, 255);
                }else{
                    setDrawColor_BackGroundColor();
                } 

                //debug("Column width: " + String(PEDOMETER_DAYCHART_COLUMN_WIDTH));
                
                #define Y1_CHART (FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*3/2 + STYLE_STATUSBAR_HEIGHT + PEDOMETER_PAGE_MARGIN + PEDOMETER_CHART_HEIGHT)
                #define Y2_CHART (FONT_SIZE_DEFAULT*FONT_CHAR_HEIGHT*3/2 + STYLE_STATUSBAR_HEIGHT + PEDOMETER_PAGE_MARGIN + PEDOMETER_CHART_HEIGHT - (pedometer_days_activity_max==0?0:(PEDOMETER_CHART_HEIGHT*get_pedometer_hours_sleep(i)/pedometer_days_activity_max) ))
                #define X1_CHART (PEDOMETER_PAGE_MARGIN + (PEDOMETER_DAYCHART_COLUMN_WIDTH + PEDOMETER_DAYCHART_COLUMN_MARGINS_PX)*i)
                #define X2_CHART (X1_CHART + PEDOMETER_DAYCHART_COLUMN_WIDTH - 1)

                #define X_SRINGS PEDOMETER_PAGE_MARGIN
                #define Y_SRINGS (Y1_CHART + FONT_CHAR_HEIGHT*FONT_SIZE_DEFAULT*7*(i+1)/5)
                drawRect(X1_CHART, Y1_CHART, X2_CHART, Y2_CHART, true);
                
            }
        }
    #endif
}

void appNameClass::onCreate(){
    /*
        Write you code on App create here
    */
    //this->preventSleep         = true;
    //this->preventInAppSleep    = true;

    DRAW_LIMITS_setEnable(true);
    DRAW_LIMIT_reset();
    DRAW_LIMITS_setEnable(STYLE_STATUSBAR_HEIGHT, -1, -1, -1);
    
    setBackgroundColor(0,0,0);
    setContrastColor(255, 255, 255);
    setDrawColor_ContrastColor();
    
    this->drawPage(true, current_page);
}

void appNameClass::onLoop(){    
}

void appNameClass::onDestroy(){
    /*
        Write you code onDestroy here
    */
}

void appNameClass::onEvent(unsigned char event, int val1, int val2, int val3, int val4, int val5){
    
    #ifdef TOUCH_SCREEN_ENABLE
        if(event==EVENT_ON_TOUCH_QUICK_SWIPE_TO_LEFT){
            this->drawPage(false, this->current_page);
            this->current_page = getNextPage();
            this->drawPage(true, this->current_page);
        }else if(event==EVENT_ON_TOUCH_QUICK_SWIPE_TO_RIGHT){
            this->drawPage(false, this->current_page);
            this->current_page = getPreviousPage();
            this->drawPage(true, this->current_page);
        }else if(event==EVENT_ON_TOUCH_QUICK_SWIPE_TO_BOTTOM || event==EVENT_ON_TOUCH_QUICK_SWIPE_TO_TOP){
            startApp(-1);
        }
    #endif

    #ifdef TOUCH_SCREEN_ENABLE

        if(event==EVENT_ON_TOUCH_DRAG){
        }
        if(event==EVENT_BUTTON_PRESSED){
            if(val1==BUTTON_POWER){
                startApp(-1);
            }else if(val1==BUTTON_BACK){
                startApp(-1);
            }else if(val1==BUTTON_DOWN){
                this->drawPage(false, this->current_page);
                this->current_page = getNextPage();
                this->drawPage(true, this->current_page);
            }else if(val1==BUTTON_UP){
                this->drawPage(false, this->current_page);
                this->current_page = getPreviousPage();
                this->drawPage(true, this->current_page);
            }

        }

    #else

        /**/
        #if (DRIVER_CONTROLS_TOTALBUTTONS == 2 || DRIVER_CONTROLS_TOTALBUTTONS == 1)
            
            if(event==EVENT_BUTTON_PRESSED){
            }else if(event==EVENT_BUTTON_RELEASED){
            }else if(event==EVENT_BUTTON_LONG_PRESS){
                if(val1==BUTTON_SELECT){
                }else if(val1==BUTTON_BACK){
                    startApp(-1);
                }    
            }else if(event==EVENT_BUTTON_SHORT_PRESS){
            }else if(event==EVENT_BUTTON_SHORT_SINGLE_PRESS){
                if(val1==BUTTON_SELECT){
                    this->drawPage(false, this->current_page);
                    this->current_page = getNextPage();
                    this->drawPage(true, this->current_page);
                    //debug("Page: " + String(this->current_page));
                }else if(val1==BUTTON_BACK){
                }
            }else if(event==EVENT_BUTTON_DOUBLE_PRESS){
                #if (DRIVER_CONTROLS_TOTALBUTTONS == 1)
                    if(val1==BUTTON_SELECT){
                        startApp(-1);
                        return;
                    }
                #else
                #endif
                
            }
            
        #else
            if(event==EVENT_BUTTON_PRESSED){
                switch(val1){
                    case BUTTON_UP:
                        break;
                    case BUTTON_BACK:
                        startApp(-1); // Exit
                        break;
                    case BUTTON_DOWN:
                        break;
                    case BUTTON_SELECT:
                        break;
                }
            
            }else if(event==EVENT_BUTTON_RELEASED){

            }else if(event==EVENT_BUTTON_LONG_PRESS){

            }
        #endif
    
    #endif

    else if(event==EVENT_ON_DATE_CHANGED){
        setDrawColor_BackGroundColor();
        drawRect(0, STYLE_STATUSBAR_HEIGHT, SCREEN_WIDTH, SCREEN_HEIGHT, true);
        this->drawPage(true, this->current_page);
    }else if(event==EVENT_ON_HOUR_CHANGED){

    }else if(event==EVENT_ON_MINUTE_CHANGED){
        
    }else if(event==EVENT_ON_TIME_CHANGED){
        //if(millis()/1000%2==0 ) this->drawPage(false, this->current_page);
        //else this->drawPage(true, this->current_page);
    }

}

const unsigned char appNameClass::icon[] PROGMEM = {
    
    #ifdef USE_L_MENU_IMAGES
    #elif defined(USE_XL_MENU_IMAGES)
        0x02,0x01,0x02,0x50,0x02,0x50,0x04,0x00,0x33,0x00,0x00,0x00,0x00,0x00,0x60,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x06,0x00,0x00,0x00,0x00,0x04,0x00,0x66,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x04,0x00,0x99,0x00,0x00,0x00,0x00,0x00,0x07,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFE,0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0xFF,0xFF,0x81,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0xFF,0xFF,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0x00,0x01,0xFF,0xFE,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0x80,0x03,0xFF,0xFC,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xC0,0x03,0xFF,0xFC,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xC0,0x07,0xFF,0xF8,0x00,0x1F,0xFF,0xC0,0xFF,0xFF,0xE0,0x07,0xFF,0xF8,0x00,0x0F,0xFF,0x80,0x3F,0xFF,0xE0,0x0F,0xFF,0xF8,0x00,0x0F,0xFF,0x00,0x1F,0xFF,0xF0,0x0F,0xFF,0xF8,0x00,0x0F,0xFE,0x00,0x1F,0xFF,0xF0,0x1F,0xFF,0xF8,0x00,0x0F,0xFE,0x00,0x0F,0xFF,0xF8,0x1F,0xFF,0xF0,0x00,0x0F,0xFC,0x00,0x0F,0xFF,0xF8,0x3F,0xFF,0xF0,0x00,0x0F,0xFC,0x00,0x07,0xFF,0xFC,0x3F,0xFF,0xF0,0x00,0x0F,0xFC,0x00,0x07,0xFF,0xFC,0x3F,0xFF,0xF0,0x00,0x07,0xFC,0x00,0x07,0xFF,0xFC,0x3F,0xFF,0xF0,0x00,0x07,0xF8,0x00,0x07,0xFF,0xFC,0x3F,0xFF,0xF0,0x00,0x07,0xF8,0x00,0x07,0xFF,0xFC,0x7F,0xFF,0xF0,0x00,0x0F,0xF8,0x00,0x07,0xFF,0xFE,0x7F,0xFF,0xF8,0x00,0x0F,0xF8,0x00,0x07,0xFF,0xFE,0x7F,0xFF,0xF8,0x00,0x0F,0xF8,0x00,0x07,0xFF,0xFE,0x7F,0xFF,0xF8,0x00,0x1F,0xF8,0x00,0x07,0xFF,0xFE,0x7F,0xFF,0xF8,0x00,0x1F,0xF8,0x00,0x07,0xFF,0xFE,0xFF,0xFF,0xF8,0x00,0x1F,0xF8,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x3F,0xF8,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x3F,0xFC,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x3F,0xFC,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x3F,0xFE,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x3F,0xFE,0x00,0x07,0xFF,0xFF,0x7F,0xFF,0xFE,0x00,0xFF,0xFE,0x00,0x0F,0xFF,0xFE,0x7F,0xFF,0xFE,0x0F,0xFF,0xFF,0x00,0x0F,0xFF,0xFE,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x0F,0xFF,0xFE,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x0F,0xFF,0xFE,0x7F,0xFF,0xFF,0xF8,0x1F,0xFF,0x00,0x1F,0xFF,0xFE,0x3F,0xFF,0xFF,0x80,0x1F,0xFF,0x80,0x1F,0xFF,0xFC,0x3F,0xFF,0xFF,0x00,0x1F,0xFF,0xFC,0x1F,0xFF,0xFC,0x3F,0xFF,0xFF,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0xFF,0x80,0x0F,0xFE,0x0F,0xFF,0xFF,0xFC,0x1F,0xFF,0xFF,0x80,0x0F,0xFE,0x00,0x7F,0xFF,0xF8,0x1F,0xFF,0xFF,0x80,0x0F,0xFC,0x00,0x3F,0xFF,0xF8,0x0F,0xFF,0xFF,0x80,0x0F,0xFC,0x00,0x3F,0xFF,0xF0,0x0F,0xFF,0xFF,0xC0,0x0F,0xFC,0x00,0x7F,0xFF,0xF0,0x07,0xFF,0xFF,0xE0,0x0F,0xFC,0x00,0x7F,0xFF,0xE0,0x07,0xFF,0xFF,0xE0,0x1F,0xF8,0x00,0x7F,0xFF,0xE0,0x03,0xFF,0xFF,0xF8,0xFF,0xF8,0x00,0x7F,0xFF,0xC0,0x03,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0xFF,0xFF,0xC0,0x01,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0xFF,0xFF,0x80,0x00,0xFF,0xFF,0xFF,0xFF,0xFC,0x01,0xFF,0xFF,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFE,0x03,0xFF,0xFF,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0x87,0xFF,0xFE,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x00,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xE0,0x00,0x00,0x00,0x00,0x04,0x55,0x99,0x55,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x04,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xE0,0x00,0x1F,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xE0,0x00,0x7F,0x80,0x00,0x00,0x00,0x00,0x07,0xFF,0xE0,0x00,0xFF,0xC0,0x00,0x00,0x00,0x00,0x07,0xFF,0xF0,0x00,0xFF,0xE0,0x00,0x00,0x00,0x00,0x07,0xFF,0xF0,0x01,0xFF,0xE0,0x00,0x00,0x00,0x00,0x07,0xFF,0xF0,0x01,0xFF,0xF0,0x00,0x00,0x00,0x00,0x07,0xFF,0xF0,0x03,0xFF,0xF0,0x00,0x00,0x00,0x00,0x07,0xFF,0xF0,0x03,0xFF,0xF0,0x00,0x00,0x00,0x00,0x0F,0xFF,0xF0,0x03,0xFF,0xF8,0x00,0x00,0x00,0x00,0x07,0xFF,0xF0,0x03,0xFF,0xF8,0x00,0x00,0x00,0x00,0x07,0xFF,0xF0,0x03,0xFF,0xF8,0x00,0x00,0x00,0x00,0x07,0xFF,0xF0,0x07,0xFF,0xF8,0x00,0x00,0x00,0x00,0x07,0xFF,0xF0,0x07,0xFF,0xF8,0x00,0x00,0x00,0x00,0x07,0xFF,0xE0,0x07,0xFF,0xF8,0x00,0x00,0x00,0x00,0x07,0xFF,0xE0,0x07,0xFF,0xF8,0x00,0x00,0x00,0x00,0x07,0xFF,0xE0,0x07,0xFF,0xF8,0x00,0x00,0x00,0x00,0x07,0xFF,0xC0,0x07,0xFF,0xF8,0x00,0x00,0x00,0x00,0x03,0xFF,0xC0,0x03,0xFF,0xF8,0x00,0x00,0x00,0x00,0x03,0xFF,0xC0,0x03,0xFF,0xF8,0x00,0x00,0x00,0x00,0x03,0xFF,0xC0,0x01,0xFF,0xF8,0x00,0x00,0x00,0x00,0x03,0xFF,0xC0,0x01,0xFF,0xF0,0x00,0x00,0x00,0x00,0x01,0xFF,0x80,0x01,0xFF,0xF0,0x00,0x00,0x00,0x00,0x01,0xFE,0x00,0x00,0xFF,0xF0,0x00,0x00,0x00,0x00,0x01,0xC0,0x00,0x00,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xE0,0x00,0x00,0x00,0x00,0x00,0x01,0xC0,0x00,0xFF,0xE0,0x00,0x00,0x00,0x00,0x00,0x1F,0xE0,0x00,0x3F,0xE0,0x00,0x00,0x00,0x00,0x00,0xFF,0xE0,0x00,0x00,0xE0,0x00,0x00,0x00,0x00,0x00,0xFF,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF0,0x01,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF0,0x01,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF0,0x01,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x3F,0xF0,0x03,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x3F,0xF0,0x03,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0xE0,0x03,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x0F,0xC0,0x03,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x55,0xCC,0x55,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x02,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x2A,0x99,0x2A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x80,0xCC,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    #else
        // small image
        0x02,0x01,0x02,0x20,0x02,0x20,0x04,0xff,0xff,0xff,0x00,0x00,0x07,0xF0,0x00,0x00,0x0F,0xF8,0x00,0x00,0x1F,
        0xFC,0x07,0xC0,0x1F,0xFC,0x1F,0xE0,0x3F,0xFE,0x3F,0xF0,0x3F,0xFE,0x3F,0xF0,0x3F,0xFE,0x3F,0xF8,0x3F,0xFE,
        0x7F,0xF8,0x1F,0xFE,0x7F,0xF8,0x1F,0xFE,0x7F,0xFC,0x0F,0xFE,0x7F,0xFC,0x0F,0xFE,0x3F,0xFC,0x0F,0xFC,0x3F,
        0xFC,0x07,0xFC,0x1F,0xFC,0x07,0xFC,0x1F,0xF8,0x03,0xF8,0x1F,0xF8,0x00,0x00,0x0F,0xF8,0x00,0x00,0x07,0xF8,
        0x00,0x00,0x07,0xE0,0x03,0xF8,0x03,0x00,0x07,0xFC,0x00,0x00,0x07,0xFC,0x00,0x06,0x07,0xFC,0x00,0x3E,0x07,
        0xFC,0x01,0xFF,0x03,0xFC,0x03,0xFF,0x03,0xF8,0x03,0xFF,0x01,0xF0,0x01,0xFF,0x00,0x00,0x01,0xFE,0x00,0x00,
        0x00,0xFC,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,
    #endif
    
    
};

#define appNameClass    TouchTest         // App name without spaces
#define appName         "Touch test"              // App name with spaces 

//#define APP_TOUCH_TEST_DEBUG

class appNameClass: public Application{
    public:
        virtual void onLoop() override;
        virtual void onDestroy() override;
        virtual void onEvent(unsigned char event, int val1, int val2, int val3, int val4, int val5) override;

        void onCreate();
        void drawLabelFingers(bool draw, unsigned char event, unsigned char finger, int x, int y);
        appNameClass(){ 
            //fillScreen(0, 0, 0);  // filling background
            
            #ifdef LIGHT_COLOR_THEME
                setBackgroundColor(255, 255, 255); 
                fillScreen(255, 255, 255);
            #else
                setBackgroundColor(0, 0, 0);
                fillScreen(0, 0, 0);
            #endif
            super_onCreate();           // Drawind statusbar and etc if needed
            onCreate(); 
        };

        static unsigned const char* getParams(const unsigned char type){
            switch(type){ 
              case PARAM_TYPE_NAME: return (unsigned char*)appName; 
              case PARAM_TYPE_ICON: return icon;
              default: return (unsigned char*)""; }
        };
        const static unsigned char icon[] PROGMEM;

        uint8_t lastEvent[MULTITOUCH_SCREEN_FINGERS];
        int last_x[MULTITOUCH_SCREEN_FINGERS];
        int last_y[MULTITOUCH_SCREEN_FINGERS];
        int last_x_drag[MULTITOUCH_SCREEN_FINGERS];
        int last_y_drag[MULTITOUCH_SCREEN_FINGERS];
      
};

void appNameClass::onCreate(){
    /*
        Write you code on App create here
    */

    DRAW_LIMITS_setEnable(true);
    DRAW_LIMIT_reset();
    DRAW_LIMITS_setEnable(STYLE_STATUSBAR_HEIGHT, -1, -1, -1);

    for(unsigned char finger=0; finger<MULTITOUCH_SCREEN_FINGERS; finger++){
        lastEvent[MULTITOUCH_SCREEN_FINGERS] = 0;
        last_x[MULTITOUCH_SCREEN_FINGERS] = 0;
        last_y[MULTITOUCH_SCREEN_FINGERS] = 0;
        last_x_drag[MULTITOUCH_SCREEN_FINGERS] = -1;
        last_y_drag[MULTITOUCH_SCREEN_FINGERS] = -1;
    }

    #ifdef LIGHT_COLOR_THEME
        setBackgroundColor(255, 255, 255);
        setDrawColor(0, 0, 0);
    #else
        setBackgroundColor(0, 0, 0);
        setDrawColor(255, 255, 255);
    #endif
    
    for(uint8_t finger=0; finger<MULTITOUCH_SCREEN_FINGERS; finger++){
        drawLabelFingers(true, 0x00, finger, 0, 0);
    }
}

void appNameClass::onLoop(){
    /*
        Write you code onLoop here
    */

    /*
    setBackgroundColor(0, 0, 0);
    setDrawColor(0, 0, 0);
    clearString("25500", 5, STYLE_STATUSBAR_HEIGHT + 3*20 + 10, 2);
    
    setDrawColor(255, 255, 255);
    drawString(getDe(), 5, STYLE_STATUSBAR_HEIGHT + 3*20 + 10, 2);
    //drawString(String((int) 2), 5, STYLE_STATUSBAR_HEIGHT + 3*20 + 10, 2);
    */
}

void appNameClass::onDestroy(){
    /*
        Write you code onDestroy here
    */
}

void appNameClass::drawLabelFingers(bool draw, unsigned char event, unsigned char finger, int x, int y){

    #ifdef LIGHT_COLOR_THEME
        if(draw) setDrawColor(0, 0, 0);
        else setDrawColor(255, 255, 255);
    #else
        if(draw) setDrawColor(255, 255, 255);
        else setDrawColor(0, 0, 0);
    #endif

    String eventString = "Not touched";

    
    switch(event){
        case EVENT_ON_TOUCH_START:
            eventString = "Touch start"; break;
        case EVENT_ON_TOUCH_RELEASED:
            eventString = "Touch released"; break;
        case EVENT_ON_TOUCH_DRAG:
            eventString = "Touch drag"; break;
        case EVENT_ON_TOUCH_LONG_PRESS:
            eventString = "Touch long press"; break;
        case EVENT_ON_TOUCH_CLICK:
            eventString = "Touch click"; break;
        case EVENT_ON_TOUCH_QUICK_SWIPE_TO_RIGHT:
            eventString = "Touch quick swipe right"; break;
        case EVENT_ON_TOUCH_QUICK_SWIPE_TO_LEFT:
            eventString = "Touch quick swipe left"; break;
        case EVENT_ON_TOUCH_QUICK_SWIPE_TO_BOTTOM:
            eventString = "Touch quick swipe bottom"; break;
        case EVENT_ON_TOUCH_QUICK_SWIPE_TO_TOP:
            eventString = "Touch quick swipe top"; break;
    }

    //#define MARKER_FONT_SIZE (FONT_SIZE_DEFAULT*3/2)
    #define MARKER_FONT_SIZE 3

    if(draw){
        lastEvent[finger]   = event;
        last_x[finger]      = x;
        last_y[finger]      = y;

        if(event!=EVENT_ON_TOUCH_RELEASED){
            drawCircle(x, y, 20, false);
            drawString(String(finger), x - (FONT_CHAR_WIDTH-1)*MARKER_FONT_SIZE/2, y - (FONT_CHAR_HEIGHT-2)*MARKER_FONT_SIZE/2, MARKER_FONT_SIZE);
        }

        drawString("   Finger: " + String(finger),          10*FONT_SIZE_DEFAULT, STYLE_STATUSBAR_HEIGHT + (finger*4 + 0)*20 + 10, FONT_SIZE_DEFAULT);
        drawString(eventString,                             10*FONT_SIZE_DEFAULT, STYLE_STATUSBAR_HEIGHT + (finger*4 + 1)*20 + 10, FONT_SIZE_DEFAULT);
        drawString("X:" + String(x) + "    Y:" + String(y), 10*FONT_SIZE_DEFAULT, STYLE_STATUSBAR_HEIGHT + (finger*4 + 2)*20 + 10, FONT_SIZE_DEFAULT);
    }else{

        if(lastEvent[finger]!=EVENT_ON_TOUCH_RELEASED){
            drawCircle(last_x[finger], last_y[finger], 20, false);
            clearString(String(finger), x - (FONT_CHAR_WIDTH-1)*MARKER_FONT_SIZE/2, y - (FONT_CHAR_HEIGHT-2)*MARKER_FONT_SIZE/2, MARKER_FONT_SIZE);
        }

        clearString("   Finger: " + String(finger),          10*FONT_SIZE_DEFAULT, STYLE_STATUSBAR_HEIGHT + (finger*4 + 0)*20 + 10, FONT_SIZE_DEFAULT);
        clearString(eventString,                             10*FONT_SIZE_DEFAULT, STYLE_STATUSBAR_HEIGHT + (finger*4 + 1)*20 + 10, FONT_SIZE_DEFAULT);
        clearString("X:" + String(x) + "    Y:" + String(y), 10*FONT_SIZE_DEFAULT, STYLE_STATUSBAR_HEIGHT + (finger*4 + 2)*20 + 10, FONT_SIZE_DEFAULT);
    }
    

    #ifdef APP_TOUCH_TEST_DEBUG
        if(draw) debug(eventString + " on finger " + String(finger) + ", X: " + String(x) + ", Y: " + String(y));
    #endif
}

void appNameClass::onEvent(unsigned char event, int val1, int val2, int val3, int val4, int val5){

    if(event==EVENT_BUTTON_PRESSED){
        // Write you code on [val1] button pressed here
        if(val1==BUTTON_BACK){
            startApp(-1);
        }
        if(val1==BUTTON_POWER){
            startApp(-1);
        }
    }else if(event==EVENT_BUTTON_RELEASED){
        // Write you code on [val1] button released here
    }else if(event==EVENT_BUTTON_LONG_PRESS){
        // Write you code on [val1] button long press here
    }else if(event==EVENT_ON_TIME_CHANGED){
        // Write you code on system time changed
    }else if(event==EVENT_ON_TOUCH_QUICK_SWIPE_TO_TOP){
        #ifdef APP_TOUCH_TEST_DEBUG
            debug("SWIPE TOP");
        #endif
        startApp(-1);
    }else if(event==EVENT_ON_TOUCH_START){
        
        this->drawLabelFingers(false, lastEvent[val5], val5, last_x[val5], last_y[val5]);
        #ifdef LIGHT_COLOR_THEME
            setDrawColor(0, 0, 0);
        #else
            setDrawColor(255, 255, 255);
        #endif  

        last_x_drag[val5] = val1;
        last_y_drag[val5] = val2;

        this->drawLabelFingers(true, event, val5, val1, val2);
        //drawString("   Finger: " + String(val5), 5, STYLE_STATUSBAR_HEIGHT + 0*20 + 10, 2);
        //drawString("Touch start", 5, STYLE_STATUSBAR_HEIGHT + 1*20 + 10, 2);
        //drawString("X:" + String(val1) + " Y:" + String(val2), 5, STYLE_STATUSBAR_HEIGHT + 2*20 + 10, 2);
        #ifdef PARTIAL_DISPLAY_DRAWING
            driver_display_partial_loop();
        #endif

        #ifdef APP_TOUCH_TEST_DEBUG
            debug("Touch start      X:" + String(val1) + "     Y: " + String(val2) + "     Finger: " + val5);
        #endif
    }else if(event==EVENT_ON_TOUCH_RELEASED){
        /*
        val1 = released X
        val2 = released Y
        val5 = touch num
        */

       #ifdef LIGHT_COLOR_THEME
            setDrawColor(0, 0, 0);
        #else
            setDrawColor(255, 255, 255);
        #endif

        if(
            last_x_drag[val5]!=-1 && last_x_drag[val5]!=last_x[val5]
            && last_y_drag[val5]!=-1 && last_y_drag[val5]!=last_y[val5]
        ){
            #ifdef LIGHT_COLOR_THEME
                setDrawColor(255, 255, 255);
            #else
                setDrawColor(0, 0, 0);
            #endif
            // Clearing line
            drawLine(last_x[val5], last_y[val5], last_x_drag[val5], last_y_drag[val5]);
            #ifdef LIGHT_COLOR_THEME
                setDrawColor(0, 0, 0);
            #else
                setDrawColor(255, 255, 255);
            #endif
        }
        

        last_x_drag[val5] = -1;
        last_y_drag[val5] = -1;

        this->drawLabelFingers(false, lastEvent[val5], val5, last_x[val5], last_y[val5]);

        #ifdef LIGHT_COLOR_THEME
            setDrawColor(0, 0, 0);
        #else
            setDrawColor(255, 255, 255);
        #endif
        
        this->drawLabelFingers(true, event, val5, val1, val2);
        #ifdef PARTIAL_DISPLAY_DRAWING
            driver_display_partial_loop();
        #endif

    }else if(event==EVENT_ON_TOUCH_DRAG){

        this->drawLabelFingers(false, lastEvent[val5], val5, last_x[val5], last_y[val5]);

        #ifdef LIGHT_COLOR_THEME
            setDrawColor(0, 0, 0);
        #else
            setDrawColor(255, 255, 255);
        #endif

        #ifdef LIGHT_COLOR_THEME
            setDrawColor(255, 255, 255);
        #else
            setDrawColor(0, 0, 0);
        #endif
        // Clearing line
        drawLine(val3, val4, last_x_drag[val5], last_y_drag[val5]);
        #ifdef LIGHT_COLOR_THEME
            setDrawColor(0, 0, 0);
        #else
            setDrawColor(255, 255, 255);
        #endif

        last_x_drag[val5] += val1;
        last_y_drag[val5] += val2;
        
        drawLine(val3, val4, last_x_drag[val5], last_y_drag[val5]);

        this->drawLabelFingers(true, event, val5, val3, val4);
        #ifdef PARTIAL_DISPLAY_DRAWING
            driver_display_partial_loop();
        #endif

    }else if(event==EVENT_ON_TOUCH_LONG_PRESS){
        this->drawLabelFingers(false, lastEvent[val5], val5, last_x[val5], last_y[val5]);

        #ifdef LIGHT_COLOR_THEME
            setDrawColor(0, 0, 0);
        #else
            setDrawColor(255, 255, 255);
        #endif

        this->drawLabelFingers(true, event, val5, val1, val2);
        #ifdef PARTIAL_DISPLAY_DRAWING
            driver_display_partial_loop();
        #endif

    }
}

const unsigned char appNameClass::icon[] PROGMEM = {
    
#if defined(USE_XL_MENU_IMAGES)
    #ifdef COLOR_GRAY_16
        0x02,0x01,0x02,0x50,0x02,0x50,0x04,0x7E,0x7E,0x7E,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x19,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xB0,0x90,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x8F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x11,0xA2,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x46,0x20,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x13,0x06,0x00,0x40,0x00,0x00,0x00,0x04,0x00,0x00,0x44,0xA0,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x31,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x40,0x12,0xC0,0x00,0x00,0x00,0x00,0x40,0x00,0x81,0x00,0x05,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x60,0x80,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x50,0x30,0x30,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x80,0x10,0x40,0x00,0x00,0x00,0x00,0x00,0xC0,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x80,0x00,0x24,0xA0,0x40,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x42,0x49,0x20,0x40,0x00,0x00,0x00,0x01,0x00,0x00,0x08,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x80,0x88,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xA0,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x20,0x42,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x40,0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x46,0x20,0x80,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x0F,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x04,0x3E,0x3E,0x3E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x40,0x20,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x06,0x08,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x04,0x40,0x60,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x09,0x00,0x19,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x06,0x60,0x44,0x80,0x00,0x00,0x00,0x08,0x00,0x00,0x24,0x80,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x31,0xC9,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x12,0x40,0x24,0xA0,0x00,0x00,0x00,0x04,0x00,0x00,0x04,0x90,0x92,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0xA1,0x00,0x48,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x28,0x00,0x28,0x50,0x00,0x00,0x00,0x00,0x40,0x00,0x0A,0x00,0x05,0x50,0x00,0x00,0x00,0x02,0x00,0x00,0x42,0x00,0x15,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x42,0x00,0x01,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x42,0x00,0x01,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x0A,0x80,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x2A,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0xA1,0x40,0x80,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x40,0x00,0x80,0x00,0x00,0x00,0x00,0x14,0x86,0x80,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x52,0x60,0x80,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x09,0x19,0x20,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x04,0x40,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x1F,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x34,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x39,0xC4,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x80,0x10,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x10,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x01,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x03,0xFF,0xFF,0x80,0x1F,0xFF,0xFF,0xFF,0xFF,0xC0,0x07,0xFF,0xFE,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xE0,0x07,0xFF,0xF8,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xE0,0x0F,0xFF,0xF0,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xF0,0x0F,0xFF,0xE0,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xF0,0x1F,0xFF,0xC0,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xF8,0x1F,0xFF,0xC0,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xF8,0x1F,0xFF,0x80,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xF8,0x3F,0xFF,0x80,0x0F,0x00,0x1F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0x00,0x3F,0x80,0x1F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0x00,0x7F,0xC0,0x0F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0x00,0x7F,0xE0,0x0F,0xFF,0xFF,0xFF,0xFC,0x7F,0xFF,0x00,0xFF,0xE0,0x0F,0xFF,0xFF,0xFF,0xFE,0x7F,0xFF,0x00,0xFF,0xFC,0x0F,0xFF,0xFF,0xFF,0xFE,0x7F,0xFF,0x00,0xFF,0x8C,0x0F,0xCF,0xFF,0xFF,0xFE,0x7F,0xFF,0x00,0x7F,0x07,0x0F,0x87,0xFF,0xFF,0xFE,0x7F,0xFF,0x00,0x7F,0x03,0x7C,0x01,0xFF,0xFF,0xFE,0x7F,0xFF,0x00,0x3F,0x01,0xE8,0x00,0xFF,0xFF,0xFE,0x7F,0xFF,0x80,0x1F,0x80,0x80,0x00,0x7F,0xFF,0xFE,0x7F,0xFF,0x80,0x00,0x40,0x00,0x00,0x3F,0xFF,0xFE,0x7F,0xFF,0x80,0x00,0x60,0x00,0x00,0x1F,0xFF,0xFE,0x7F,0xFF,0xC0,0x06,0x10,0x00,0x00,0x0F,0xFF,0xFE,0x7F,0xFF,0xE0,0x00,0x18,0x00,0x00,0x0F,0xFF,0xFE,0x7F,0xFF,0xF0,0x00,0x0C,0x00,0x00,0x0F,0xFF,0xFE,0x7F,0xFF,0xF8,0x00,0x02,0x00,0x00,0x07,0xFF,0xFE,0x7F,0xFF,0xFC,0x00,0x03,0x00,0x00,0x07,0xFF,0xFE,0x3F,0xFF,0xFF,0x00,0x0F,0x80,0x00,0x07,0xFF,0xFC,0x3F,0xFF,0xFF,0xE0,0x7F,0xC0,0x00,0x03,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x01,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x01,0xFF,0xFC,0x1F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0xFF,0xF8,0x1F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0xFF,0xF8,0x1F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0xFF,0xF8,0x0F,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0xFF,0xF0,0x0F,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0xFF,0xF0,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x01,0xFF,0xE0,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0x03,0xFF,0xE0,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x87,0xFF,0xC0,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0xFF,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xA8,0xA8,0xA8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x68,0x68,0x68,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    #else
        0x02,0x01,0x02,0x50,0x02,0x50,0x04,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x40,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x02,0x00,0x00,0x00,0x00,0x04,0x00,0x40,0x80,0x00,0x00,0x00,0x00,0x30,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x0C,0x00,0x00,0x00,0x00,0x04,0x00,0x80,0xC0,0x00,0x00,0x00,0x00,0x0F,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x07,0xFF,0xFF,0x80,0x1F,0xFF,0xFF,0xFF,0xFF,0xE0,0x0F,0xFF,0xFE,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xF0,0x0F,0xFF,0xF8,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xF0,0x1F,0xFF,0xF0,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xF8,0x1F,0xFF,0xE0,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xF8,0x1F,0xFF,0xC0,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xF8,0x3F,0xFF,0xC0,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0x80,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFC,0x3F,0xFF,0x80,0x0F,0x00,0x1F,0xFF,0xFF,0xFF,0xFC,0x7F,0xFF,0x00,0x3F,0x80,0x1F,0xFF,0xFF,0xFF,0xFE,0x7F,0xFF,0x00,0x7F,0xC0,0x0F,0xFF,0xFF,0xFF,0xFE,0x7F,0xFF,0x00,0x7F,0xE0,0x0F,0xFF,0xFF,0xFF,0xFE,0x7F,0xFF,0x00,0xFF,0xE0,0x0F,0xFF,0xFF,0xFF,0xFE,0x7F,0xFF,0x00,0xFF,0xFC,0x0F,0xFF,0xFF,0xFF,0xFE,0x7F,0xFF,0x00,0xFF,0x8C,0x0F,0xCF,0xFF,0xFF,0xFE,0xFF,0xFF,0x00,0x7F,0x07,0x0F,0x87,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x7F,0x03,0x7C,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x3F,0x01,0xE8,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x1F,0x80,0x80,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x40,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x60,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xC0,0x06,0x10,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x18,0x00,0x00,0x0F,0xFF,0xFF,0x7F,0xFF,0xF0,0x00,0x0C,0x00,0x00,0x0F,0xFF,0xFE,0x7F,0xFF,0xF8,0x00,0x02,0x00,0x00,0x07,0xFF,0xFE,0x7F,0xFF,0xFC,0x00,0x03,0x00,0x00,0x07,0xFF,0xFE,0x7F,0xFF,0xFF,0x00,0x0F,0x80,0x00,0x07,0xFF,0xFE,0x7F,0xFF,0xFF,0xE0,0x7F,0xC0,0x00,0x03,0xFF,0xFE,0x7F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x01,0xFF,0xFE,0x3F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x01,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0xFF,0xFC,0x3F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0xFF,0xFC,0x1F,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0xFF,0xF8,0x1F,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0xFF,0xF8,0x1F,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0xFF,0xF8,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x01,0xFF,0xF0,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0x03,0xFF,0xF0,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x87,0xFF,0xE0,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x0F,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xF0,0x00,0x00,0x00,0x00,0x04,0x00,0x40,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x40,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x40,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x60,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x80,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x01,0x48,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x04,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x10,0x82,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x08,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x05,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x11,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x42,0x00,0x01,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x01,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x80,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x2A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x81,0x40,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x14,0x06,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x12,0x40,0x80,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x09,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x1F,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x19,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x80,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x19,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xB0,0x90,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x8F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x11,0xA2,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x46,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x0E,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0xA0,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x31,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x40,0x12,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x83,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x80,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x50,0x30,0x30,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x80,0x10,0x40,0x00,0x00,0x00,0x00,0x00,0xC0,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x0A,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x24,0xA0,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x42,0x49,0x20,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x80,0x88,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xA0,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x20,0x42,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x40,0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x46,0x20,0x80,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x0F,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x70,0xE6,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x8E,0x19,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x12,0x39,0xCD,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x24,0xC0,0x36,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x29,0x1F,0x9A,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x4A,0x60,0x6D,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x52,0x80,0x25,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x54,0x80,0x12,0xA0,0x00,0x00,0x00,0x00,0x00,0x00,0x95,0x00,0x0A,0xA0,0x00,0x00,0x00,0x00,0x00,0x00,0x85,0x00,0x0A,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0xA1,0x00,0x02,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0xA5,0x00,0x22,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x95,0x00,0x78,0xA0,0x38,0x00,0x00,0x00,0x00,0x00,0x15,0x00,0xFC,0x03,0x7C,0x00,0x00,0x00,0x00,0x00,0x54,0x80,0x7E,0x03,0xFE,0x00,0x00,0x00,0x00,0x00,0x5A,0x40,0x3F,0x3F,0xFF,0x00,0x00,0x00,0x00,0x00,0x29,0x30,0x1F,0xBF,0xFF,0x80,0x00,0x00,0x00,0x00,0x25,0x8F,0x0F,0xFF,0xFF,0xC0,0x00,0x00,0x00,0x00,0x16,0x60,0x47,0xFF,0xFF,0xE0,0x00,0x00,0x00,0x00,0x19,0x1F,0x83,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x0C,0xC0,0x31,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x02,0x3F,0xC0,0xFF,0xFF,0xF0,0x00,0x00,0x00,0x00,0x01,0x80,0x18,0x7F,0xFF,0xF0,0x00,0x00,0x00,0x00,0x00,0x7F,0xE0,0x3F,0xFF,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x40,0x80,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x81,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x40,0x20,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x81,0x00,0x48,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x20,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x20,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    #endif
    
#elif defined(USE_L_MENU_IMAGES)
   
#else
    /*            PUT YOUR ICON HERE            */
    0x02,0x01,0x02,0x20,0x02,0x20,0x04,0xff,0xff,0xff,0xFF,0x00,0x00,0xFF,0xFF,0x00,0x00,0xFF,0xC0,0x00,0x00,0x03,
    0xC0,0x00,0x00,0x03,0xC0,0x00,0x00,0x03,0xC0,0x00,0x00,0x03,0xC0,0x00,0x00,0x03,0xC0,0x00,0x00,0x03,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x01,0x80,0x00,0x00,0x01,0x80,0x00,0x00,0x01,0x80,0x00,
    0x00,0x01,0x80,0x00,0x00,0x3F,0xFC,0x00,0x00,0x3F,0xFC,0x00,0x00,0x01,0x80,0x00,0x00,0x01,0x80,0x00,0x00,0x01,
    0x80,0x00,0x00,0x01,0x80,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x03,
    0xC0,0x00,0x00,0x03,0xC0,0x00,0x00,0x03,0xC0,0x00,0x00,0x03,0xC0,0x00,0x00,0x03,0xC0,0x00,0x00,0x03,0xFF,0x00,
    0x00,0xFF,0xFF,0x00,0x00,0xFF,
#endif
	

    
};

#define appNameClass    BleTester         // App name without spaces
#define appName         "BLE test"              // App name with spaces 

class appNameClass: public Application{
    public:
        virtual void onLoop() override;
        virtual void onDestroy() override;
        virtual void onEvent(unsigned char event, int val1, int val2, int val3, int val4, int val5) override;

        void onCreate();
        appNameClass(){ 
            fillScreen(0, 0, 0);  // filling background
            super_onCreate();           // Drawind statusbar and etc if needed
            onCreate(); 
        };

        static unsigned const char* getParams(const unsigned char type){
            switch(type){ 
              case PARAM_TYPE_NAME: return (unsigned char*)appName; 
              case PARAM_TYPE_ICON: return icon;
              default: return (unsigned char*)""; }
        };
        const static unsigned char icon[] PROGMEM;
      
};

void appNameClass::onCreate(){
    /*
        Write you code on App create here
    */

    this->preventSleep         = true;
    this->preventInAppSleep    = true;

    DRAW_LIMITS_setEnable(true);
    DRAW_LIMIT_reset();
    DRAW_LIMITS_setEnable(STYLE_STATUSBAR_HEIGHT, -1, -1, -1);
    
    setBackgroundColor(0,0,0);
    setContrastColor(255, 255, 255);
    setDrawColor_ContrastColor();

    drawString(appName, 5, STYLE_STATUSBAR_HEIGHT + 10, FONT_SIZE_DEFAULT);
}

void appNameClass::onLoop(){
    /*
        Write you code onLoop here
    */
}

void appNameClass::onDestroy(){
    /*
        Write you code onDestroy here
    */
}

void appNameClass::onEvent(unsigned char event, int val1, int val2, int val3, int val4, int val5){
    
     #ifdef TOUCH_SCREEN_ENABLE

        if(event==EVENT_ON_TOUCH_DRAG){
            // SCREEN SCROLL
        }

    #else

        /**/
        #if (DRIVER_CONTROLS_TOTALBUTTONS == 2 || DRIVER_CONTROLS_TOTALBUTTONS == 1)
            
            if(event==EVENT_BUTTON_PRESSED){
            }else if(event==EVENT_BUTTON_RELEASED){
            }else if(event==EVENT_BUTTON_LONG_PRESS){
                if(val1==BUTTON_SELECT){
                }else if(val1==BUTTON_BACK){
                    startApp(-1);
                }    
            }else if(event==EVENT_BUTTON_SHORT_PRESS){
            }else if(event==EVENT_BUTTON_SHORT_SINGLE_PRESS){
                if(val1==BUTTON_SELECT){
                }else if(val1==BUTTON_BACK){
                }
            }else if(event==EVENT_BUTTON_DOUBLE_PRESS){
                #if (DRIVER_CONTROLS_TOTALBUTTONS == 1)
                    if(val1==BUTTON_SELECT){
                        startApp(-1);
                    }
                #else
                #endif
                
            }
            
        #else
            if(event==EVENT_BUTTON_PRESSED){
                switch(val1){
                    case BUTTON_UP:
                        break;
                    case BUTTON_BACK:
                        break;
                    case BUTTON_DOWN:
                        break;
                    case BUTTON_SELECT:
                        break;
                }
                
            
            }else if(event==EVENT_BUTTON_RELEASED){

            }else if(event==EVENT_BUTTON_LONG_PRESS){

            }
        #endif
    
    #endif
    
}

const unsigned char appNameClass::icon[] PROGMEM = {
    
	/*            PUT YOUR ICON HERE            */
    0x02,0x01,0x02,0x20,0x02,0x20,0x04,0x6f,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x1E,0x00,
    0x00,0x00,0x7E,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x78,
    0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x04,0xFF,0xFF,0xFF,0x1F,0xFF,0xFF,0xF8,0x3F,0xFF,0xFF,0xFC,0x7F,0xFF,0xFF,0xFE,0xFF,0xFE,0x7F,0xFF,0xFF,0xF9,0x9F,0xFF,
    0xFF,0xE7,0xE7,0xFF,0xFF,0x9F,0xF9,0xFF,0xFF,0x7F,0xFE,0xFF,0xFF,0x1F,0xF8,0xFF,0xFF,0x67,0xE0,0xFF,0xFF,0x79,0x80,0xFF,0xFF,0x7E,0x00,
    0xFF,0xFF,0x7F,0x00,0xFF,0xFF,0x7F,0x00,0xFF,0xFF,0x7F,0x00,0xFF,0xFF,0x7F,0x00,0xFF,0xFF,0x7F,0x00,0xFF,0xFF,0x9F,0x01,0xFF,0xFF,0xE7,
    0x07,0xFF,0xFF,0xF9,0x1F,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xDF,0x7F,0xFF,0xFF,0xDF,0xFF,0xFF,0xFF,
    0xC7,0x6B,0xFF,0xFF,0xDB,0x65,0xFF,0xFF,0xDB,0x6D,0xFF,0xFF,0xC7,0x6D,0xFF,0x7F,0xFF,0xFF,0xFE,0x3F,0xFF,0xFF,0xFC,0x1F,0xFF,0xFF,0xF8,
    0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x06,0x60,0x00,0x00,0x18,0x18,
    0x00,0x00,0x60,0x06,0x00,0x00,0x80,0x01,0x00,0x00,0xE0,0x07,0x00,0x00,0x98,0x19,0x00,0x00,0x86,0x61,0x00,0x00,0x81,0x81,0x00,0x00,0x80,
    0x81,0x00,0x00,0x80,0x81,0x00,0x00,0x80,0x81,0x00,0x00,0x80,0x81,0x00,0x00,0x80,0x81,0x00,0x00,0x60,0x86,0x00,0x00,0x18,0x98,0x00,0x00,
    0x06,0xE0,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x80,0x00,0x00,0x20,0x00,0x00,0x00,0x38,0x94,0x00,
    0x00,0x24,0x9A,0x00,0x00,0x24,0x92,0x00,0x00,0x38,0x92,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};
#

#define appNameClass    MainMenuApp      // App name without spaces
#define appName         "Main menu"      // App name with spaces 

#define PAGES_LIST_HEIGHT               20
#define ACTIVE_SCREEN_WIDTH             SCREEN_WIDTH
#define ACTIVE_SCREEN_HEIGHT            (SCREEN_HEIGHT - STYLE_STATUSBAR_HEIGHT - PAGES_LIST_HEIGHT)

#define SINGLE_ELEMENT_REAL_WIDTH       (ACTIVE_SCREEN_WIDTH)
#define SINGLE_ELEMENT_REAL_HEIGHT      ((int)(ACTIVE_SCREEN_HEIGHT))
#define PAGES_LIST_POSITION             (SCREEN_HEIGHT-PAGES_LIST_HEIGHT/2)
#define APPS_ON_SINGLE_PAGE             1

#ifdef  APP_MENU_APPLICATIONS_0
  #define APP_MENU_APPLICATIONS_QUANTITY 1
#endif
#ifdef  APP_MENU_APPLICATIONS_1
  #define APP_MENU_APPLICATIONS_QUANTITY 2
#endif
#ifdef  APP_MENU_APPLICATIONS_2
  #define APP_MENU_APPLICATIONS_QUANTITY 3
#endif
#ifdef  APP_MENU_APPLICATIONS_3
  #define APP_MENU_APPLICATIONS_QUANTITY 4
#endif
#ifdef  APP_MENU_APPLICATIONS_4
  #define APP_MENU_APPLICATIONS_QUANTITY 5
#endif
#ifdef  APP_MENU_APPLICATIONS_5
  #define APP_MENU_APPLICATIONS_QUANTITY 6
#endif
#ifdef  APP_MENU_APPLICATIONS_6
  #define APP_MENU_APPLICATIONS_QUANTITY 7
#endif
#ifdef  APP_MENU_APPLICATIONS_7
  #define APP_MENU_APPLICATIONS_QUANTITY 8
#endif
#ifdef  APP_MENU_APPLICATIONS_8
  #define APP_MENU_APPLICATIONS_QUANTITY 9
#endif
#ifdef  APP_MENU_APPLICATIONS_9
  #define APP_MENU_APPLICATIONS_QUANTITY 10
#endif
#ifdef  APP_MENU_APPLICATIONS_10
  #define APP_MENU_APPLICATIONS_QUANTITY 11
#endif
#ifdef  APP_MENU_APPLICATIONS_11
  #define APP_MENU_APPLICATIONS_QUANTITY 12
#endif
#ifdef  APP_MENU_APPLICATIONS_12
  #define APP_MENU_APPLICATIONS_QUANTITY 13
#endif
#ifdef  APP_MENU_APPLICATIONS_13
  #define APP_MENU_APPLICATIONS_QUANTITY 14
#endif
#ifdef  APP_MENU_APPLICATIONS_14
  #define APP_MENU_APPLICATIONS_QUANTITY 15
#endif
#ifdef  APP_MENU_APPLICATIONS_15
  #define APP_MENU_APPLICATIONS_QUANTITY 16
#endif
#ifdef  APP_MENU_APPLICATIONS_16
  #define APP_MENU_APPLICATIONS_QUANTITY 17
#endif
#ifdef  APP_MENU_APPLICATIONS_17
  #define APP_MENU_APPLICATIONS_QUANTITY 18
#endif
#ifdef  APP_MENU_APPLICATIONS_18
  #define APP_MENU_APPLICATIONS_QUANTITY 19
#endif
#ifdef  APP_MENU_APPLICATIONS_19
  #define APP_MENU_APPLICATIONS_QUANTITY 20
#endif
#ifdef  APP_MENU_APPLICATIONS_20
  #define APP_MENU_APPLICATIONS_QUANTITY 21
#endif
#ifdef  APP_MENU_APPLICATIONS_21
  #define APP_MENU_APPLICATIONS_QUANTITY 22
#endif
#ifdef  APP_MENU_APPLICATIONS_22
  #define APP_MENU_APPLICATIONS_QUANTITY 23
#endif
#ifdef  APP_MENU_APPLICATIONS_23
  #define APP_MENU_APPLICATIONS_QUANTITY 24
#endif
#ifdef  APP_MENU_APPLICATIONS_24
  #define APP_MENU_APPLICATIONS_QUANTITY 25
#endif
#ifdef  APP_MENU_APPLICATIONS_25
  #define APP_MENU_APPLICATIONS_QUANTITY 26
#endif
#ifdef  APP_MENU_APPLICATIONS_26
  #define APP_MENU_APPLICATIONS_QUANTITY 27
#endif
#ifdef  APP_MENU_APPLICATIONS_27
  #define APP_MENU_APPLICATIONS_QUANTITY 28
#endif
#ifdef  APP_MENU_APPLICATIONS_28
  #define APP_MENU_APPLICATIONS_QUANTITY 29
#endif
#ifdef  APP_MENU_APPLICATIONS_29
  #define APP_MENU_APPLICATIONS_QUANTITY 30
#endif
#ifdef  APP_MENU_APPLICATIONS_30
  #define APP_MENU_APPLICATIONS_QUANTITY 31
#endif
#ifdef  APP_MENU_APPLICATIONS_31
  #define APP_MENU_APPLICATIONS_QUANTITY 32
#endif

#define TOTAL_PAGES (APP_MENU_APPLICATIONS_QUANTITY%APPS_ON_SINGLE_PAGE==0?((int)(APP_MENU_APPLICATIONS_QUANTITY/APPS_ON_SINGLE_PAGE)):((int)(APP_MENU_APPLICATIONS_QUANTITY/APPS_ON_SINGLE_PAGE) + 1))

// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # //

#ifdef USE_XL_MENU_IMAGES
  #define MENU_WATCH_IMAGE_WIDTH                  80
  #define MENU_WATCH_APPICON_IMAGE_HEIGHT         80
#else
  #define MENU_WATCH_IMAGE_WIDTH                  32
  #define MENU_WATCH_APPICON_IMAGE_HEIGHT         32
#endif
#define MENU_WATCH_APPICON_IMAGE_Y_OFFSET       -15
#define MENU_WATCH_APPICON_TITLE_Y_OFFSET       40

char app_z_menu_selectedAppIndex = 0; // Now it is a global variable

class appNameClass: public Application{
    public:
        virtual void onLoop() override;
        virtual void onDestroy() override;
        virtual void onEvent(unsigned char event, int val1, int val2, int val3, int val4, int val5) override;

        void onCreate();
        appNameClass(){ fillScreen(0, 0, 0); super_onCreate(); onCreate(); };
        static unsigned const char* getParams(const unsigned char type){
          switch(type){ 
            case PARAM_TYPE_NAME: return (unsigned char*)appName; 
            case PARAM_TYPE_ICON: return icon;
            default: return (unsigned char*)""; 
          }
        };
        const static unsigned char icon[] PROGMEM;
      
    private:
        const unsigned char* getApplicationTitle(int num);
        const unsigned char* getApplicationIcon(int num);
        void drawIcons(bool draw);
        void updateActiveAppIndex(int newSelectedAppIndex);

        void nextApp();
        void prevApp();
        void draw_app_icon_title(bool draw, int x, int y, const unsigned char* title);
        void draw_app_icon_image(bool draw, int x, int y, const unsigned char* icon);

};

const unsigned char appNameClass::icon[] PROGMEM = {
    
	/*            PUT YOUR ICON HERE            */

    0x02,0x01,0x02,0x20,0x02,0x20,0x04,0x6f,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x1E,0x00,
    0x00,0x00,0x7E,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x78,
    0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x04,0xFF,0xFF,0xFF,0x1F,0xFF,0xFF,0xF8,0x3F,0xFF,0xFF,0xFC,0x7F,0xFF,0xFF,0xFE,0xFF,0xFE,0x7F,0xFF,0xFF,0xF9,0x9F,0xFF,
    0xFF,0xE7,0xE7,0xFF,0xFF,0x9F,0xF9,0xFF,0xFF,0x7F,0xFE,0xFF,0xFF,0x1F,0xF8,0xFF,0xFF,0x67,0xE0,0xFF,0xFF,0x79,0x80,0xFF,0xFF,0x7E,0x00,
    0xFF,0xFF,0x7F,0x00,0xFF,0xFF,0x7F,0x00,0xFF,0xFF,0x7F,0x00,0xFF,0xFF,0x7F,0x00,0xFF,0xFF,0x7F,0x00,0xFF,0xFF,0x9F,0x01,0xFF,0xFF,0xE7,
    0x07,0xFF,0xFF,0xF9,0x1F,0xFF,0xFF,0xFE,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xDF,0x7F,0xFF,0xFF,0xDF,0xFF,0xFF,0xFF,
    0xC7,0x6B,0xFF,0xFF,0xDB,0x65,0xFF,0xFF,0xDB,0x6D,0xFF,0xFF,0xC7,0x6D,0xFF,0x7F,0xFF,0xFF,0xFE,0x3F,0xFF,0xFF,0xFC,0x1F,0xFF,0xFF,0xF8,
    0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x06,0x60,0x00,0x00,0x18,0x18,
    0x00,0x00,0x60,0x06,0x00,0x00,0x80,0x01,0x00,0x00,0xE0,0x07,0x00,0x00,0x98,0x19,0x00,0x00,0x86,0x61,0x00,0x00,0x81,0x81,0x00,0x00,0x80,
    0x81,0x00,0x00,0x80,0x81,0x00,0x00,0x80,0x81,0x00,0x00,0x80,0x81,0x00,0x00,0x80,0x81,0x00,0x00,0x60,0x86,0x00,0x00,0x18,0x98,0x00,0x00,
    0x06,0xE0,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x80,0x00,0x00,0x20,0x00,0x00,0x00,0x38,0x94,0x00,
    0x00,0x24,0x9A,0x00,0x00,0x24,0x92,0x00,0x00,0x38,0x92,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};

void appNameClass::onCreate(){
    
    DRAW_LIMITS_setEnable(true);
    DRAW_LIMIT_reset();
    DRAW_LIMITS_setEnable(STYLE_STATUSBAR_HEIGHT, -1, -1, -1);

    setBackgroundColor(0,0,0);
    setContrastColor(255, 255, 255);

    unsigned char app_z_menu_selectedAppIndex_presaved = app_z_menu_selectedAppIndex;
    app_z_menu_selectedAppIndex=0;
  
    core_views_draw_active_page(true, PAGES_LIST_POSITION, TOTAL_PAGES, app_z_menu_selectedAppIndex);
    this->updateActiveAppIndex(app_z_menu_selectedAppIndex);  
    this->drawIcons(true);
    
}

void appNameClass::updateActiveAppIndex(int newSelectedAppIndex){

  if(newSelectedAppIndex<0) newSelectedAppIndex = APP_MENU_APPLICATIONS_QUANTITY - 1;
  if(newSelectedAppIndex>=APP_MENU_APPLICATIONS_QUANTITY) newSelectedAppIndex = 0;

  if(app_z_menu_selectedAppIndex!=newSelectedAppIndex){

    if( (int)((app_z_menu_selectedAppIndex)/APPS_ON_SINGLE_PAGE) != (int)((newSelectedAppIndex)/APPS_ON_SINGLE_PAGE)){
      // update page
      this->drawIcons(false);
      core_views_draw_active_page(false, PAGES_LIST_POSITION, TOTAL_PAGES, (int)(app_z_menu_selectedAppIndex/APPS_ON_SINGLE_PAGE));
      app_z_menu_selectedAppIndex = newSelectedAppIndex;
      core_views_draw_active_page(true, PAGES_LIST_POSITION, TOTAL_PAGES, (int)(app_z_menu_selectedAppIndex/APPS_ON_SINGLE_PAGE));
      this->drawIcons(true);
    }else{
      app_z_menu_selectedAppIndex = newSelectedAppIndex;
    }
  }
}

void appNameClass::drawIcons(bool draw){
  int x0 = 0;
  int y0 = STYLE_STATUSBAR_HEIGHT+1;
  int x1 = x0+SINGLE_ELEMENT_REAL_WIDTH;
  int y1 = y0+SINGLE_ELEMENT_REAL_HEIGHT;

  int x_center = (x0+x1)/2;
  int y_center = (y0+y1)/2;

  int app_num = app_z_menu_selectedAppIndex;

  if(app_num<APP_MENU_APPLICATIONS_QUANTITY){
    #ifdef ESP8266
      ESP.wdtDisable();
    #endif

    #ifdef SMOOTH_ANIMATION
      if(this->scroll_x!=0){
        int x_position;
        int y_position;
        int appElementDraw;
        if(this->scroll_x>0){
          appElementDraw = (app_num + -1 + APP_MENU_APPLICATIONS_QUANTITY)%APP_MENU_APPLICATIONS_QUANTITY;

          x_position = this->scroll_x + x_center - SCREEN_WIDTH;
          y_position = y_center;
          /*
          this->draw_app_icon(
            draw, 
            this->scroll_x + x_center - SCREEN_WIDTH, 
            y_center, 
            (const unsigned char*)this->getApplicationTitle(appElementDraw), 
            this->getApplicationIcon(appElementDraw)
          );*/

        }else if(this->scroll_x<0){
          appElementDraw = (app_num + 1 + APP_MENU_APPLICATIONS_QUANTITY)%APP_MENU_APPLICATIONS_QUANTITY;

          x_position = this->scroll_x - x_center + 2*SCREEN_WIDTH;
          y_position = y_center;
          /*
          this->draw_app_icon(
            draw, 
            this->scroll_x - x_center + 2*SCREEN_WIDTH, 
            y_center, 
            (const unsigned char*)this->getApplicationTitle(appElementDraw), 
            this->getApplicationIcon(appElementDraw)
          );*/
        }
        this->draw_app_icon_title( draw, x_position, y_position, (const unsigned char*)this->getApplicationTitle(appElementDraw));
      }else{
        this->preventInAppSleep    = false;
        //debug("Prevent sleep stop");
      }
    #endif

    
    this->draw_app_icon_image( draw, x_center, y_center, this->getApplicationIcon(app_num));
    this->draw_app_icon_title( draw, this->scroll_x + x_center, y_center, (const unsigned char*)this->getApplicationTitle(app_num));
  }
}

/*
void appNameClass::draw_app_icon(bool draw, int x, int y, const unsigned char* title, const unsigned char* icon){
    // image
    drawImage(draw, icon, x-MENU_WATCH_IMAGE_WIDTH/2, y-MENU_WATCH_APPICON_IMAGE_HEIGHT/2 + MENU_WATCH_APPICON_IMAGE_Y_OFFSET);

    // title
    if(draw){
        setDrawColor(255, 255, 255);
        drawString_centered((char*)title, x, y + MENU_WATCH_APPICON_TITLE_Y_OFFSET, 2);
    }else{
        setDrawColor(getBackgroundColor_red(), getBackgroundColor_green(), getBackgroundColor_blue());
        clearString_centered((char*)title, x, y + MENU_WATCH_APPICON_TITLE_Y_OFFSET, 2);
    }  
}*/

void appNameClass::draw_app_icon_image(bool draw, int x, int y, const unsigned char* icon){
  // image
  drawImage(draw, icon, x-MENU_WATCH_IMAGE_WIDTH/2, y-MENU_WATCH_APPICON_IMAGE_HEIGHT/2 + MENU_WATCH_APPICON_IMAGE_Y_OFFSET);
}

void appNameClass::draw_app_icon_title(bool draw, int x, int y, const unsigned char* title){
  // title
  if(draw){
      setDrawColor(255, 255, 255);
      drawString_centered((char*)title, x, y + MENU_WATCH_APPICON_TITLE_Y_OFFSET, 2);
  }else{
      setDrawColor(getBackgroundColor_red(), getBackgroundColor_green(), getBackgroundColor_blue());
      clearString_centered((char*)title, x, y + MENU_WATCH_APPICON_TITLE_Y_OFFSET, 2);
  }
}


void appNameClass::onLoop(){
  #ifdef SMOOTH_ANIMATION
    if(this->scroll_x!=0){
      this->drawIcons(false);
      if(this->scroll_x!=0){
        //this->scroll_x++;
        int dx = abs(scroll_x)/SMOOTH_ANIMATION_COEFFICIENT + 1;
        if(scroll_x>scroll_to_x) dx *= -1;
        scroll_x+=dx;

        if (abs(dx)<1) scroll_x=0;
      }
      this->drawIcons(true);
    }
  #endif
}

void appNameClass::onDestroy(){
}

void appNameClass::nextApp(){
  this->drawIcons(false);
  #ifdef SMOOTH_ANIMATION
    //debug("Prevent sleep start");
    this->preventInAppSleep    = true;
    this->scroll_x += SCREEN_WIDTH;
  #endif
  this->updateActiveAppIndex(app_z_menu_selectedAppIndex+1);
}

void appNameClass::prevApp(){
  this->drawIcons(false);
  #ifdef SMOOTH_ANIMATION
    //debug("Prevent sleep start");
    this->preventInAppSleep    = true;
    this->scroll_x -= SCREEN_WIDTH;
  #endif
  this->updateActiveAppIndex(app_z_menu_selectedAppIndex-1);
}

void appNameClass::onEvent(unsigned char event, int val1, int val2, int val3, int val4, int val5){
    
  /*
  BUTTON_UP
  BUTTON_SELECT
  BUTTON_DOWN
  BUTTON_BACK
  BUTTON_POWER
  */
  #ifdef TOUCH_SCREEN_ENABLE
    if(event==EVENT_ON_TOUCH_QUICK_SWIPE_TO_LEFT){
      nextApp();
    }else if(event==EVENT_ON_TOUCH_QUICK_SWIPE_TO_RIGHT){
      prevApp();
    }else if(event==EVENT_ON_TOUCH_CLICK){
      startApp(app_z_menu_selectedAppIndex);
    }
  #endif

  #if (DRIVER_CONTROLS_TOTALBUTTONS == 1 || DRIVER_CONTROLS_TOTALBUTTONS == 2)
    if(event==EVENT_BUTTON_PRESSED){
      
    }else if(event==EVENT_BUTTON_RELEASED){
    }else if(event==EVENT_BUTTON_LONG_PRESS){
      if(val1==BUTTON_SELECT){
        startApp(app_z_menu_selectedAppIndex);
      }
    }else if(event==EVENT_ON_TIME_CHANGED){
    //}else if(event==EVENT_BUTTON_SHORT_SINGLE_PRESS){
    }else if(event==EVENT_BUTTON_SHORT_PRESS){
      if(val1==BUTTON_BACK){
        prevApp();
      }else if(val1==BUTTON_SELECT){
        nextApp();
      }
    }else if(event==EVENT_BUTTON_DOUBLE_PRESS){
      if(val1==BUTTON_SELECT){
        nextApp();
      }
    }
  #else
    if(event==EVENT_BUTTON_PRESSED){
      switch(val1){
        case BUTTON_UP:
          this->updateActiveAppIndex(app_z_menu_selectedAppIndex-1);
          break;
        case BUTTON_SELECT:
          startApp(app_z_menu_selectedAppIndex);
          break;
        case BUTTON_DOWN:
          this->updateActiveAppIndex(app_z_menu_selectedAppIndex+1);
          break;
      }
    }else if(event==EVENT_BUTTON_RELEASED){

    }else if(event==EVENT_BUTTON_LONG_PRESS){

    }else if(event==EVENT_ON_TIME_CHANGED){

    }else if(event==EVENT_BUTTON_SHORT_SINGLE_PRESS){

    }

    
  #endif

}

const unsigned char* appNameClass::getApplicationTitle(int num){
    return getAppParams(num,(PARAM_TYPE_NAME));
}

const unsigned char*  appNameClass::getApplicationIcon(int num){
    return (const unsigned char *)getAppParams(num,(PARAM_TYPE_ICON));
}

/*
    ############################################################################################
    #                                                                                          #
    #                                    SHARED FUNCTIONS +                                    #
    #                                                                                          #
    ############################################################################################
*/

Application *getApp(unsigned char i){  
    if (i==0) return new APP_MENU_APPLICATIONS_0; 
    #if APP_MENU_APPLICATIONS_QUANTITY > 1
      else if (i==1) return new APP_MENU_APPLICATIONS_1; 
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 2
      else if (i==2) return new APP_MENU_APPLICATIONS_2; 
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 3
      else if (i==3) return new APP_MENU_APPLICATIONS_3; 
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 4
      else if (i==4) return new APP_MENU_APPLICATIONS_4; 
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 5
      else if (i==5) return new APP_MENU_APPLICATIONS_5; 
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 6
      else if (i==6) return new APP_MENU_APPLICATIONS_6; 
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 7
      else if (i==7) return new APP_MENU_APPLICATIONS_7; 
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 8
      else if (i==8) return new APP_MENU_APPLICATIONS_8; 
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 9
      else if (i==9) return new APP_MENU_APPLICATIONS_9; 
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 10
      else if (i==10) return new APP_MENU_APPLICATIONS_10; 
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 11
      else if (i==11) return new APP_MENU_APPLICATIONS_11; 
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 12
      else if (i==12) return new APP_MENU_APPLICATIONS_12; 
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 13
      else if (i==13) return new APP_MENU_APPLICATIONS_13; 
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 14
      else if (i==14) return new APP_MENU_APPLICATIONS_14; 
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 15
      else if (i==15) return new APP_MENU_APPLICATIONS_15; 
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 16
      else if (i==16) return new APP_MENU_APPLICATIONS_16; 
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 17
      else if (i==17) return new APP_MENU_APPLICATIONS_17; 
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 18
      else if (i==18) return new APP_MENU_APPLICATIONS_18; 
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 19
      else if (i==19) return new APP_MENU_APPLICATIONS_19; 
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 20
      else if (i==20) return new APP_MENU_APPLICATIONS_20; 
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 21
      else if (i==21) return new APP_MENU_APPLICATIONS_21; 
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 22
      else if (i==22) return new APP_MENU_APPLICATIONS_22; 
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 23
      else if (i==23) return new APP_MENU_APPLICATIONS_23; 
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 24
      else if (i==24) return new APP_MENU_APPLICATIONS_24; 
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 25
      else if (i==25) return new APP_MENU_APPLICATIONS_25; 
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 26
      else if (i==26) return new APP_MENU_APPLICATIONS_26; 
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 27
      else if (i==27) return new APP_MENU_APPLICATIONS_27; 
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 28
      else if (i==28) return new APP_MENU_APPLICATIONS_28; 
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 29
      else if (i==29) return new APP_MENU_APPLICATIONS_29; 
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 30
      else if (i==30) return new APP_MENU_APPLICATIONS_30; 
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 31
      else if (i==31) return new APP_MENU_APPLICATIONS_31; 
    #endif
    else return new appNameClass;
}

const unsigned char *getAppParams(char i, unsigned char type){
    if(i==0){ APP_MENU_APPLICATIONS_0 *app; return ((*app).getParams(type));
    #if APP_MENU_APPLICATIONS_QUANTITY > 1
      }else if(i==1){ APP_MENU_APPLICATIONS_1 *app; return ((*app).getParams(type));
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 2
      }else if(i==2){ APP_MENU_APPLICATIONS_2 *app; return ((*app).getParams(type));
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 3
      }else if(i==3){ APP_MENU_APPLICATIONS_3 *app; return ((*app).getParams(type));
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 4
      }else if(i==4){ APP_MENU_APPLICATIONS_4 *app; return ((*app).getParams(type));
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 5
      }else if(i==5){ APP_MENU_APPLICATIONS_5 *app; return ((*app).getParams(type));
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 6
      }else if(i==6){ APP_MENU_APPLICATIONS_6 *app; return ((*app).getParams(type));
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 7
      }else if(i==7){ APP_MENU_APPLICATIONS_7 *app; return ((*app).getParams(type));
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 8
      }else if(i==8){ APP_MENU_APPLICATIONS_8 *app; return ((*app).getParams(type));
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 9
      }else if(i==9){ APP_MENU_APPLICATIONS_9 *app; return ((*app).getParams(type));
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 10
      }else if(i==10){ APP_MENU_APPLICATIONS_10 *app; return ((*app).getParams(type));
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 11
      }else if(i==11){ APP_MENU_APPLICATIONS_11 *app; return ((*app).getParams(type));
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 12
      }else if(i==12){ APP_MENU_APPLICATIONS_12 *app; return ((*app).getParams(type));
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 13
      }else if(i==13){ APP_MENU_APPLICATIONS_13 *app; return ((*app).getParams(type));
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 14
      }else if(i==14){ APP_MENU_APPLICATIONS_14 *app; return ((*app).getParams(type));
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 15
      }else if(i==15){ APP_MENU_APPLICATIONS_15 *app; return ((*app).getParams(type));
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 16
      }else if(i==16){ APP_MENU_APPLICATIONS_16 *app; return ((*app).getParams(type));
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 17
      }else if(i==17){ APP_MENU_APPLICATIONS_17 *app; return ((*app).getParams(type));
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 18
      }else if(i==18){ APP_MENU_APPLICATIONS_18 *app; return ((*app).getParams(type));
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 19
      }else if(i==19){ APP_MENU_APPLICATIONS_19 *app; return ((*app).getParams(type));
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 20
      }else if(i==20){ APP_MENU_APPLICATIONS_20 *app; return ((*app).getParams(type));
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 21
      }else if(i==21){ APP_MENU_APPLICATIONS_21 *app; return ((*app).getParams(type));
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 22
      }else if(i==22){ APP_MENU_APPLICATIONS_22 *app; return ((*app).getParams(type));
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 23
      }else if(i==23){ APP_MENU_APPLICATIONS_23 *app; return ((*app).getParams(type));
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 24
      }else if(i==24){ APP_MENU_APPLICATIONS_24 *app; return ((*app).getParams(type));
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 25
      }else if(i==25){ APP_MENU_APPLICATIONS_25 *app; return ((*app).getParams(type));
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 26
      }else if(i==26){ APP_MENU_APPLICATIONS_26 *app; return ((*app).getParams(type));
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 27
      }else if(i==27){ APP_MENU_APPLICATIONS_27 *app; return ((*app).getParams(type));
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 28
      }else if(i==28){ APP_MENU_APPLICATIONS_28 *app; return ((*app).getParams(type));
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 29
      }else if(i==29){ APP_MENU_APPLICATIONS_29 *app; return ((*app).getParams(type));
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 30
      }else if(i==30){ APP_MENU_APPLICATIONS_30 *app; return ((*app).getParams(type));
    #endif
    #if APP_MENU_APPLICATIONS_QUANTITY > 31
      }else if(i==31){ APP_MENU_APPLICATIONS_31 *app; return ((*app).getParams(type));
    #endif
    }else return 0;
}

void startApp(char num){
  currentApp->onDestroy();
  currentApp = getApp(num);
}

/*
    ############################################################################################
    #                                                                                          #
    #                                    SHARED FUNCTIONS -                                    #
    #                                                                                          #
    ############################################################################################
*/


